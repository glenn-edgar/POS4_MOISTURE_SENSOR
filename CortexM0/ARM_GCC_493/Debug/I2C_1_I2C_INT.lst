ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"I2C_1_I2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_1_I2C_ISR,"ax",%progbits
  18              		.align	2
  19              		.global	I2C_1_I2C_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	I2C_1_I2C_ISR, %function
  23              	I2C_1_I2C_ISR:
  24              	.LFB1:
  25              		.file 1 "Generated_Source\\PSoC4\\I2C_1_I2C_INT.c"
   1:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * \file I2C_1_I2C_INT.c
   3:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * \version 3.20
   4:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
   5:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * \brief
   6:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
   9:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * Note:
  10:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
  11:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** ********************************************************************************
  12:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * \copyright
  13:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * Copyright 2013-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  19:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #include "I2C_1_PVT.h"
  20:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #include "I2C_1_I2C_PVT.h"
  21:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #include "cyapicallbacks.h"
  22:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  23:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  24:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** * Function Name: I2C_1_I2C_ISR
  26:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** ****************************************************************************//**
  27:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
  28:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *
  30:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** *******************************************************************************/
  31:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** CY_ISR(I2C_1_I2C_ISR)
  32:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 2


  26              		.loc 1 32 0
  27              		.cfi_startproc
  28              	.LVL0:
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              		.cfi_def_cfa_offset 20
  31              		.cfi_offset 4, -20
  32              		.cfi_offset 5, -16
  33              		.cfi_offset 6, -12
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 5F46     		mov	r7, fp
  37 0004 5646     		mov	r6, r10
  38 0006 4D46     		mov	r5, r9
  39 0008 4446     		mov	r4, r8
  40 000a F0B4     		push	{r4, r5, r6, r7}
  41              		.cfi_def_cfa_offset 36
  42              		.cfi_offset 8, -36
  43              		.cfi_offset 9, -32
  44              		.cfi_offset 10, -28
  45              		.cfi_offset 11, -24
  33:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     uint32 diffCount;
  34:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     uint32 endTransfer;
  35:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  36:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #ifdef I2C_1_I2C_ISR_ENTRY_CALLBACK
  37:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     I2C_1_I2C_ISR_EntryCallback();
  38:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #endif /* I2C_1_I2C_ISR_ENTRY_CALLBACK */
  39:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  40:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #if (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  41:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     uint32 response;
  42:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  43:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     response = I2C_1_I2C_ACK_ADDR;
  44:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #endif /* (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  45:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  46:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  47:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  48:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* Calls customer routine if registered */
  49:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     if(NULL != I2C_1_customIntrHandler)
  46              		.loc 1 49 0
  47 000c BC4B     		ldr	r3, .L74
  32:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     uint32 diffCount;
  48              		.loc 1 32 0
  49 000e 83B0     		sub	sp, sp, #12
  50              		.cfi_def_cfa_offset 48
  51              		.loc 1 49 0
  52 0010 1B68     		ldr	r3, [r3]
  53 0012 002B     		cmp	r3, #0
  54 0014 00D0     		beq	.L2
  50:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
  51:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_customIntrHandler();
  55              		.loc 1 51 0
  56 0016 9847     		blx	r3
  57              	.LVL1:
  58              	.L2:
  52:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
  53:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  54:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     if(I2C_1_CHECK_INTR_I2C_EC_MASKED(I2C_1_INTR_I2C_EC_WAKE_UP))
  59              		.loc 1 54 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 3


  60 0018 BA4B     		ldr	r3, .L74+4
  61 001a 1B68     		ldr	r3, [r3]
  62 001c DB07     		lsl	r3, r3, #31
  63 001e 02D5     		bpl	.L3
  55:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
  56:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         /* Mask-off after wakeup */
  57:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_SetI2CExtClkInterruptMode(I2C_1_NO_INTR_SOURCES);
  64              		.loc 1 57 0
  65 0020 0022     		mov	r2, #0
  66 0022 B94B     		ldr	r3, .L74+8
  67 0024 1A60     		str	r2, [r3]
  68              	.L3:
  58:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
  59:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  60:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* Master and Slave error tracking:
  61:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  62:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  63:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  64:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  65:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     */
  66:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     if(I2C_1_CHECK_I2C_FSM_MASTER)
  69              		.loc 1 66 0
  70 0026 B94B     		ldr	r3, .L74+12
  46:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  71              		.loc 1 46 0
  72 0028 0021     		mov	r1, #0
  73              		.loc 1 66 0
  74 002a 1A78     		ldrb	r2, [r3]
  75 002c 9206     		lsl	r2, r2, #26
  76 002e 1ED5     		bpl	.L4
  67:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
  68:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if(I2C_1_I2C_MASTER)
  69:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         {
  70:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  71:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  72:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  73:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
  74:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_BUS_ERROR))
  77              		.loc 1 74 0
  78 0030 B748     		ldr	r0, .L74+16
  79 0032 0268     		ldr	r2, [r0]
  80 0034 D205     		lsl	r2, r2, #23
  81 0036 00D4     		bmi	.LCB57
  82 0038 7CE0     		b	.L5	@long jump
  83              	.LCB57:
  75:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
  76:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
  84              		.loc 1 76 0
  85 003a C024     		mov	r4, #192
  86 003c B54A     		ldr	r2, .L74+20
  87 003e A400     		lsl	r4, r4, #2
  88 0040 1188     		ldrh	r1, [r2]
  89 0042 2143     		orr	r1, r4
  90 0044 1180     		strh	r1, [r2]
  91              	.LVL2:
  77:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                          I2C_1_I2C_MSTAT_ERR_BUS_ERROR);
  78:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 4


  79:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
  80:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
  81:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  82:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  83:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  84:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  85:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  86:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
  87:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_ARB_LOST))
  92              		.loc 1 87 0
  93 0046 0168     		ldr	r1, [r0]
  94 0048 C907     		lsl	r1, r1, #31
  95 004a 04D5     		bpl	.L6
  88:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
  89:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
  96              		.loc 1 89 0
  97 004c 9020     		mov	r0, #144
  98 004e 1188     		ldrh	r1, [r2]
  99 0050 8000     		lsl	r0, r0, #2
 100 0052 0143     		orr	r1, r0
 101 0054 1180     		strh	r1, [r2]
 102              	.L6:
 103              	.LVL3:
  90:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                          I2C_1_I2C_MSTAT_ERR_ARB_LOST);
  91:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  92:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
  93:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
  94:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
  95:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             #if(I2C_1_I2C_MULTI_MASTER_SLAVE)
  96:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
  97:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
  98:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
  99:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 * Pass control to slave.
 100:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 */
 101:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_I2C_MASTER_CMD(I2C_1_I2C_MASTER_CMD_M_START_ON_IDLE))
 102:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 103:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
 104:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                              I2C_1_I2C_MSTAT_ERR_ABORT_XFER);
 105:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 106:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 107:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 108:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 109:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             #endif
 110:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 111:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* The error handling common part:
 112:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 113:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 114:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 115:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 116:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(0u != endTransfer)
 117:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 118:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Set completion flags for master */
 119:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_mstrStatus |= (uint16) I2C_1_GET_I2C_MSTAT_CMPLT;
 104              		.loc 1 119 0
 105 0056 0120     		mov	r0, #1
 106 0058 1978     		ldrb	r1, [r3]
 107 005a 0140     		and	r1, r0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 5


 108 005c 0130     		add	r0, r0, #1
 109 005e 411A     		sub	r1, r0, r1
 110 0060 1088     		ldrh	r0, [r2]
 111 0062 0143     		orr	r1, r0
 112 0064 89B2     		uxth	r1, r1
 113 0066 1180     		strh	r1, [r2]
 120:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 121:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #if(I2C_1_I2C_MULTI_MASTER_SLAVE)
 122:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 123:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_I2C_FSM_ADDR)
 124:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 125:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 126:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 127:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 128:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_CHECK_I2C_MASTER_CMD(I2C_1_I2C_MASTER_CMD_M_START_ON_IDLE))
 129:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 130:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_I2C_MASTER_CLEAR_START;
 131:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 132:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 133:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 134:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 135:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 136:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 137:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else if((!I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_BUS_ERROR))
 138:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                && I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_ARB_LOST))
 139:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 140:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 141:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 142:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 143:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 144:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 145:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 146:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 147:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 148:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 149:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 150:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 151:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable autoA
 152:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 153:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 154:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_ALL);
 155:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 156:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 157:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 158:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 159:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 160:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_state = I2C_1_I2C_FSM_IDLE;
 161:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 162:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 163:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 164:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 165:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_state = I2C_1_I2C_FSM_EXIT_IDLE;
 166:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 167:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 168:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 169:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 170:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 6


 171:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_state = I2C_1_I2C_FSM_EXIT_IDLE;
 172:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 173:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 174:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #else
 175:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 176:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* In case of LOST*/
 177:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_state = I2C_1_I2C_FSM_EXIT_IDLE;
 114              		.loc 1 177 0
 115 0068 0022     		mov	r2, #0
 116 006a 0121     		mov	r1, #1
 117 006c 1A70     		strb	r2, [r3]
 118              	.L4:
 119              	.LVL4:
 178:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 179:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #endif
 180:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 181:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         }
 182:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif
 183:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 184:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     else /* (I2C_1_CHECK_I2C_FSM_SLAVE) */
 185:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 186:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if(I2C_1_I2C_SLAVE)
 187:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         {
 188:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or I2C_1_INTR_SLAVE_I2C_ARB_LOST:
 189:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 190:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * to notify an error condition.
 191:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 192:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_BUS_ERROR |
 193:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                         I2C_1_INTR_SLAVE_I2C_ARB_LOST))
 194:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 195:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_I2C_FSM_RD)
 196:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 197:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* TX direction: master reads from slave */
 198:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus &= (uint8) ~I2C_1_I2C_SSTAT_RD_BUSY;
 199:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) (I2C_1_I2C_SSTAT_RD_ERR |
 200:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                           I2C_1_I2C_SSTAT_RD_CMPLT);
 201:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 202:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else
 203:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 204:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* RX direction: master writes into slave */
 205:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus &= (uint8) ~I2C_1_I2C_SSTAT_WR_BUSY;
 206:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) (I2C_1_I2C_SSTAT_WR_ERR |
 207:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                           I2C_1_I2C_SSTAT_WR_CMPLT);
 208:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 209:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 210:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_state = I2C_1_I2C_FSM_EXIT_IDLE;
 211:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 212:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         }
 213:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif
 214:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 215:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 216:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* States description:
 217:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 218:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 219:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     */
 220:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 221:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* FSM Master */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 7


 222:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     if(I2C_1_CHECK_I2C_FSM_MASTER)
 120              		.loc 1 222 0
 121 006e 1A78     		ldrb	r2, [r3]
 122 0070 9206     		lsl	r2, r2, #26
 123 0072 18D5     		bpl	.L8
 223:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 224:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if(I2C_1_I2C_MASTER)
 225:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         {
 226:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 227:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
 228:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * Set completion flags to notify the API.
 229:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 230:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_STOP))
 124              		.loc 1 230 0
 125 0074 1022     		mov	r2, #16
 126 0076 A648     		ldr	r0, .L74+16
 127 0078 0468     		ldr	r4, [r0]
 128 007a 2242     		tst	r2, r4
 129 007c 2CD0     		beq	.L9
 231:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 232:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_I2C_STOP);
 233:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 234:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_mstrStatus |= (uint16) I2C_1_GET_I2C_MSTAT_CMPLT;
 130              		.loc 1 234 0
 131 007e 0120     		mov	r0, #1
 232:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 132              		.loc 1 232 0
 133 0080 A549     		ldr	r1, .L74+24
 134              	.LVL5:
 135              		.loc 1 234 0
 136 0082 A44C     		ldr	r4, .L74+20
 232:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 137              		.loc 1 232 0
 138 0084 0A60     		str	r2, [r1]
 139              		.loc 1 234 0
 140 0086 1978     		ldrb	r1, [r3]
 141 0088 0140     		and	r1, r0
 142 008a 0130     		add	r0, r0, #1
 143 008c 411A     		sub	r1, r0, r1
 144 008e 2088     		ldrh	r0, [r4]
 145 0090 0143     		orr	r1, r0
 146 0092 89B2     		uxth	r1, r1
 147 0094 2180     		strh	r1, [r4]
 235:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_state       = I2C_1_I2C_FSM_IDLE;
 148              		.loc 1 235 0
 149 0096 1A70     		strb	r2, [r3]
 150              	.L1:
 236:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 237:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             else
 238:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 239:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_I2C_FSM_ADDR) /* Address stage */
 240:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 241:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 242:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 243:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     */
 244:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_NACK))
 245:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 8


 246:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_I2C_NACK);
 247:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 248:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
 249:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_I2C_MSTAT_ERR_ADDR_NAK);
 250:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 251:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 252:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 253:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 254:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 255:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 256:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 257:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 258:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     */
 259:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 260:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 261:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_CHECK_I2C_FSM_RD) /* Reading */
 262:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 263:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_state = I2C_1_I2C_FSM_MSTR_RD_DATA;
 264:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 265:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else /* Writing */
 266:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 267:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_state = I2C_1_I2C_FSM_MSTR_WR_DATA;
 268:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(0u != I2C_1_mstrWrBufSize)
 269:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 270:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 271:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_EMPTY);
 272:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 273:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 274:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 275:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 276:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 277:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_I2C_FSM_DATA) /* Data phase */
 278:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 279:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_I2C_FSM_RD) /* Reading */
 280:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 281:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_RX_FULL:
 282:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 283:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 284:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 285:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_CHECK_INTR_RX_MASKED(I2C_1_INTR_RX_FULL))
 286:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 287:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Calculate difference */
 288:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             diffCount =  I2C_1_mstrRdBufSize -
 289:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         (I2C_1_mstrRdBufIndex + I2C_1_GET_RX_FIFO_ENTRIES);
 290:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 291:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 292:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(diffCount > I2C_1_I2C_FIFO_SIZE)
 293:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 294:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 diffCount = I2C_1_I2C_FIFO_SIZE;
 295:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 296:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             else
 297:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 298:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 if(0u == diffCount)
 299:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 300:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_DISABLE_MASTER_AUTO_DATA_ACK;
 301:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 302:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     diffCount   = I2C_1_I2C_FIFO_SIZE;
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 9


 303:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 304:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 305:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 306:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 307:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 308:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 309:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_mstrRdBufPtr[I2C_1_mstrRdBufIndex] = (uint8)
 310:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                                         I2C_1_RX_FI
 311:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_mstrRdBufIndex++;
 312:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 313:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 314:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 315:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 316:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 317:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * generated by one command generate Stop.
 318:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 319:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else if(I2C_1_CHECK_INTR_RX_MASKED(I2C_1_INTR_RX_NOT_EMPTY))
 320:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 321:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Put data in component buffer */
 322:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrRdBufPtr[I2C_1_mstrRdBufIndex] = (uint8) I2C_1_RX_FIFO_RD_REG
 323:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrRdBufIndex++;
 324:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 325:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(I2C_1_mstrRdBufIndex < I2C_1_mstrRdBufSize)
 326:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 327:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_I2C_MASTER_GENERATE_ACK;
 328:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 329:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             else
 330:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 331:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 332:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 333:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 334:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 335:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 336:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Do nothing */
 337:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 338:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 339:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_ALL);
 340:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 341:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else /* Writing */
 342:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 343:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 344:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 345:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
 346:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 347:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 348:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_CHECK_INTR_MASTER_MASKED(I2C_1_INTR_MASTER_I2C_NACK))
 349:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 350:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_I2C_NACK);
 351:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 352:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrWrBufIndexTmp -= (I2C_1_GET_TX_FIFO_ENTRIES +
 354:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 355:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 356:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Update number of transferred bytes */
 357:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrWrBufIndex = I2C_1_mstrWrBufIndexTmp;
 358:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 359:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_ERR_XFER |
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 10


 360:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                      I2C_1_I2C_MSTAT_ERR_SHORT_XFER
 361:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 362:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_CLEAR_TX_FIFO;
 363:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 364:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 365:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 366:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 367:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 368:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 369:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 370:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 371:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else if(I2C_1_CHECK_INTR_TX_MASKED(I2C_1_INTR_TX_EMPTY))
 372:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 373:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             while(I2C_1_I2C_FIFO_SIZE != I2C_1_GET_TX_FIFO_ENTRIES)
 374:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 375:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 376:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 377:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 */
 378:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 if(I2C_1_mstrWrBufIndexTmp < I2C_1_mstrWrBufSize)
 379:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 380:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 #if(!I2C_1_CY_SCBIP_V0)
 381:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 382:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 383:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 384:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     */
 385:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     if(I2C_1_mstrWrBufIndexTmp == (I2C_1_mstrWrBufSize - 1u))
 386:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     {
 387:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         I2C_1_ClearTxInterruptSource(I2C_1_INTR_TX_UNDERFLOW);
 388:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_UNDERFLOW);
 389:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     }
 390:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                  #endif /* (!I2C_1_CY_SCBIP_V0) */
 391:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 392:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     /* Put data into TX FIFO */
 393:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_TX_FIFO_WR_REG = (uint32) I2C_1_mstrWrBufPtr[I2C_1_mstrWr
 394:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_mstrWrBufIndexTmp++;
 395:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 396:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 else
 397:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 398:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     break; /* No more data to put */
 399:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 400:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 401:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 402:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #if(I2C_1_CY_SCBIP_V0)
 403:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(I2C_1_mstrWrBufIndexTmp == I2C_1_mstrWrBufSize)
 404:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 405:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_UNDERFLOW);
 406:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 407:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 408:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_ClearTxInterruptSource(I2C_1_INTR_TX_ALL);
 409:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #else
 410:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_ClearTxInterruptSource(I2C_1_INTR_TX_EMPTY);
 411:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #endif /* (I2C_1_CY_SCBIP_V0) */
 412:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 413:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 414:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 415:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * The transaction needs to be completed.
 416:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 11


 417:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else if(I2C_1_CHECK_INTR_TX_MASKED(I2C_1_INTR_TX_UNDERFLOW))
 418:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 419:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Update number of transferred bytes */
 420:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrWrBufIndex = I2C_1_mstrWrBufIndexTmp;
 421:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 422:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 423:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 424:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 425:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 426:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Do nothing */
 427:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 428:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 429:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 430:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 431:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 432:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 433:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 434:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_DISABLE_MASTER_AUTO_DATA_ACK;
 435:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 436:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 437:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 438:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 439:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 440:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_I2C_MODE_NO_STOP(I2C_1_mstrControl))
 441:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 442:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 443:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_mstrStatus |= (uint16) (I2C_1_I2C_MSTAT_XFER_HALT |
 444:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_GET_I2C_MSTAT_CMPLT);
 445:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 446:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_state = I2C_1_I2C_FSM_MSTR_HALT;
 447:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 448:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 449:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 450:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 451:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 452:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 453:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 454:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * the other master is still reading from the slave.
 455:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         */
 456:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_I2C_MASTER_GENERATE_STOP;
 457:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 458:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 459:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 460:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 461:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         } /* (I2C_1_I2C_MASTER) */
 462:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif
 463:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 464:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     } /* (I2C_1_CHECK_I2C_FSM_MASTER) */
 465:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 466:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 467:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* FSM Slave */
 468:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     else if(I2C_1_CHECK_I2C_FSM_SLAVE)
 469:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 470:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if(I2C_1_I2C_SLAVE)
 471:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         {
 472:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 473:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 12


 474:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 475:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 476:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_NACK))
 477:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 478:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_I2C_NACK);
 479:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 480:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* All entries that remain in TX FIFO are: FIFO Size + 1 (SHIFTER) */
 481:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 diffCount = (I2C_1_GET_TX_FIFO_ENTRIES + I2C_1_GET_TX_FIFO_SR_VALID);
 482:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 483:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_slOverFlowCount > diffCount) /* Overflow */
 484:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 485:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_RD_OVFL;
 486:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 487:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else /* No Overflow */
 488:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 489:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Roll-back temporary index */
 490:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slRdBufIndexTmp -= (diffCount - I2C_1_slOverFlowCount);
 491:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 492:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 493:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Update slave of transferred bytes */
 494:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slRdBufIndex = I2C_1_slRdBufIndexTmp;
 495:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 496:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Clean-up TX FIFO */
 497:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 498:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slOverFlowCount = 0u;
 499:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_CLEAR_TX_FIFO;
 500:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 501:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Complete master reading */
 502:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slStatus &= (uint8) ~I2C_1_I2C_SSTAT_RD_BUSY;
 503:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slStatus |= (uint8)  I2C_1_I2C_SSTAT_RD_CMPLT;
 504:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_state     =  I2C_1_I2C_FSM_IDLE;
 505:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 506:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 507:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 508:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 509:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 510:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 511:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 512:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 513:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_WRITE_STOP))
 514:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 515:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_I2C_WRITE_STOP);
 516:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 517:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 518:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 519:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 520:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 */
 521:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if (0u != (I2C_1_I2C_CTRL_REG & I2C_1_I2C_CTRL_S_READY_DATA_ACK))
 522:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 523:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     while(0u != I2C_1_GET_RX_FIFO_ENTRIES)
 524:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 525:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #if(I2C_1_CHECK_I2C_ACCEPT_ADDRESS)
 526:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 527:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if((1u == I2C_1_GET_RX_FIFO_ENTRIES) &&
 528:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                (I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_ADDR_MATCH)))
 529:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 530:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 13


 531:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 532:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 533:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #endif
 534:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 535:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Put data in component buffer */
 536:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slWrBufPtr[I2C_1_slWrBufIndex] = (uint8) I2C_1_RX_FIFO_RD_REG;
 537:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slWrBufIndex++;
 538:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 539:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 540:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_DISABLE_SLAVE_AUTO_DATA;
 541:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 542:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 543:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_CHECK_INTR_RX(I2C_1_INTR_RX_OVERFLOW))
 544:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 545:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_WR_OVFL;
 546:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 547:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 548:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 549:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 550:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_ALL);
 551:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 552:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Complete master writing */
 553:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slStatus &= (uint8) ~I2C_1_I2C_SSTAT_WR_BUSY;
 554:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_slStatus |= (uint8)  I2C_1_I2C_SSTAT_WR_CMPLT;
 555:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_state     =  I2C_1_I2C_FSM_IDLE;
 556:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 557:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 558:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 559:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 560:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 561:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 562:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 563:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 564:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #if (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 565:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if (I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_ADDR_MATCH |
 566:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                          I2C_1_INTR_SLAVE_I2C_GENERAL))
 567:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #else
 568:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if (I2C_1_CHECK_INTR_SLAVE_MASKED(I2C_1_INTR_SLAVE_I2C_ADDR_MATCH))
 569:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif /* (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 570:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 571:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 572:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearI2CExtClkInterruptSource(I2C_1_INTR_I2C_EC_WAKE_UP);
 573:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 574:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #if (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER)
 575:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 576:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if (NULL != I2C_1_customAddressHandler)
 577:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 578:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Call custom address handler */
 579:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         response = I2C_1_customAddressHandler();
 580:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 581:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 582:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 583:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 584:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         * component does not use that source. */
 585:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         (void) I2C_1_RX_FIFO_RD_REG;
 586:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         response = I2C_1_I2C_ACK_ADDR;
 587:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 14


 588:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 589:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 590:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_ALL);
 591:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 592:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #endif
 593:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 594:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             #if (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 595:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if (response == I2C_1_I2C_NAK_ADDR)
 596:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 597:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #if (!I2C_1_CY_SCBIP_V0)
 598:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 599:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_DISABLE_INTR_SLAVE(I2C_1_INTR_SLAVE_I2C_WRITE_STOP);
 600:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #endif /* (!I2C_1_CY_SCBIP_V0) */
 601:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 602:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Clear address match and stop history */
 603:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_ALL);
 604:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 605:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* ACK the address byte */
 606:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_I2C_SLAVE_GENERATE_NACK;
 607:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 608:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else
 609:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             #endif /* (I2C_1_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 610:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 611:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_CHECK_I2C_STATUS(I2C_1_I2C_STATUS_S_READ))
 612:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* TX direction: master reads from slave */
 613:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 614:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_EMPTY);
 615:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 616:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 617:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slRdBufIndexTmp = I2C_1_slRdBufIndex;
 618:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 619:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Start master reading */
 620:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_RD_BUSY;
 621:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_state     = I2C_1_I2C_FSM_SL_RD;
 622:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 623:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 624:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* RX direction: master writes into slave */
 625:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 626:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Calculate available buffer size */
 627:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         diffCount = (I2C_1_slWrBufSize - I2C_1_slWrBufIndex);
 628:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 629:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     #if (I2C_1_CY_SCBIP_V0)
 630:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(diffCount < I2C_1_I2C_FIFO_SIZE)
 631:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 632:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 633:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_NOT_EMPTY);
 634:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 635:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         else
 636:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 637:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 638:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(diffCount == I2C_1_I2C_FIFO_SIZE)
 639:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 640:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
 641:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_ENABLE_SLAVE_AUTO_DATA;
 642:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 643:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             else
 644:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 15


 645:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 646:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_ENABLE_SLAVE_AUTO_DATA_ACK;
 647:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_FULL);
 648:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 649:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 650:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 651:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     #else
 652:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #if(I2C_1_CHECK_I2C_ACCEPT_ADDRESS)
 653:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 654:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 655:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 656:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 657:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             */
 658:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_NOT_EMPTY);
 659:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 660:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #else
 661:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 662:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(diffCount < I2C_1_I2C_FIFO_SIZE)
 663:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 664:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 665:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_NOT_EMPTY);
 666:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 667:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             else
 668:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 669:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 670:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 if(diffCount == I2C_1_I2C_FIFO_SIZE)
 671:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 672:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 673:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_ENABLE_SLAVE_AUTO_DATA;
 674:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 675:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 else
 676:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 677:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 678:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_ENABLE_SLAVE_AUTO_DATA_ACK;
 679:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_SetRxInterruptMode(I2C_1_INTR_RX_FULL);
 680:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 681:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 682:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 683:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #endif
 684:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     #endif /* (I2C_1_CY_SCBIP_V0) */
 685:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 686:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         /* Start master reading */
 687:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_WR_BUSY;
 688:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_state     = I2C_1_I2C_FSM_SL_WR;
 689:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 690:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 691:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Clear address match and stop history */
 692:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_ALL);
 693:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 694:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #if (!I2C_1_CY_SCBIP_V0)
 695:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 696:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ENABLE_INTR_SLAVE(I2C_1_INTR_SLAVE_I2C_WRITE_STOP);
 697:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 #endif /* (!I2C_1_CY_SCBIP_V0) */
 698:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 699:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* ACK the address byte */
 700:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_I2C_SLAVE_GENERATE_ACK;
 701:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 16


 702:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 703:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 704:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* I2C_1_INTR_RX_FULL:
 705:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 706:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 707:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_RX_MASKED(I2C_1_INTR_RX_FULL))
 708:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 709:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 710:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 diffCount =  I2C_1_slWrBufSize -
 711:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             (I2C_1_slWrBufIndex + I2C_1_I2C_FIFO_SIZE);
 712:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 713:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(diffCount > I2C_1_I2C_FIFO_SIZE) /* Proceed transaction */
 714:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 715:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     diffCount   = I2C_1_I2C_FIFO_SIZE;
 716:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 717:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 718:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 719:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 720:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 721:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 722:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 723:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 724:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 725:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Put data in component buffer */
 726:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slWrBufPtr[I2C_1_slWrBufIndex] = (uint8) I2C_1_RX_FIFO_RD_REG;
 727:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slWrBufIndex++;
 728:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 729:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 730:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 731:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 732:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_ENABLE_SLAVE_AUTO_DATA_NACK;
 733:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 734:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 735:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     * disable all RX interrupt sources.
 736:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     */
 737:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 738:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 739:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 740:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_FULL);
 741:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 742:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* I2C_1_INTR_RX_NOT_EMPTY:
 743:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 744:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 745:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             else if(I2C_1_CHECK_INTR_RX_MASKED(I2C_1_INTR_RX_NOT_EMPTY))
 746:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 747:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 diffCount = I2C_1_RX_FIFO_RD_REG;
 748:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 749:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 if(I2C_1_slWrBufIndex < I2C_1_slWrBufSize)
 750:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 751:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_I2C_SLAVE_GENERATE_ACK;
 752:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 753:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Put data into component buffer */
 754:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slWrBufPtr[I2C_1_slWrBufIndex] = (uint8) diffCount;
 755:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slWrBufIndex++;
 756:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 757:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 758:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 17


 759:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_I2C_SLAVE_GENERATE_NACK;
 760:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 761:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_slStatus |= (uint8) I2C_1_I2C_SSTAT_WR_OVFL;
 762:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 763:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 764:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearRxInterruptSource(I2C_1_INTR_RX_NOT_EMPTY);
 765:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 766:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             else
 767:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 768:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 /* Does nothing */
 769:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 770:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 771:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 772:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             /* I2C_1_INTR_TX_EMPTY:
 773:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 774:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 775:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 776:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             */
 777:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             if(I2C_1_CHECK_INTR_TX_MASKED(I2C_1_INTR_TX_EMPTY))
 778:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 779:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 while(I2C_1_I2C_FIFO_SIZE != I2C_1_GET_TX_FIFO_ENTRIES)
 780:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 781:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 782:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 783:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     * of the read transfer.
 784:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     */
 785:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     if(I2C_1_slRdBufIndexTmp < I2C_1_slRdBufSize)
 786:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Data from buffer */
 787:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 788:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_TX_FIFO_WR_REG = (uint32) I2C_1_slRdBufPtr[I2C_1_slRdBufIndexTmp];
 789:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_slRdBufIndexTmp++;
 790:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 791:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     else
 792:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     /* Probably Overflow */
 793:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 794:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         I2C_1_TX_FIFO_WR_REG = I2C_1_I2C_SLAVE_OVFL_RETURN;
 795:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 796:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         if(I2C_1_slOverFlowCount <= I2C_1_I2C_TX_OVERFLOW_COUNT)
 797:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 798:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             /* Get counter in range of overflow. */
 799:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_slOverFlowCount++;
 800:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 801:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 802:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 }
 803:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 804:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 I2C_1_ClearTxInterruptSource(I2C_1_INTR_TX_EMPTY);
 805:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             }
 806:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 807:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         }  /* (I2C_1_I2C_SLAVE) */
 808:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         #endif
 809:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 810:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 811:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 812:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     /* FSM EXIT:
 813:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
 814:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 815:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 18


 816:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     else
 817:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 818:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_CTRL_REG &= (uint32) ~I2C_1_CTRL_ENABLED; /* Disable scb IP */
 819:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 820:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_state = I2C_1_I2C_FSM_IDLE;
 821:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 822:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_DISABLE_SLAVE_AUTO_DATA;
 823:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_DISABLE_MASTER_AUTO_DATA;
 824:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 825:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     #if(I2C_1_CY_SCBIP_V0)
 826:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_SetRxInterruptMode(I2C_1_NO_INTR_SOURCES);
 827:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 828:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 829:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         /* Clear interrupt sources as they are not automatically cleared after SCB is disabled */
 830:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_ClearTxInterruptSource(I2C_1_INTR_RX_ALL);
 831:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_ClearRxInterruptSource(I2C_1_INTR_TX_ALL);
 832:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_ClearSlaveInterruptSource(I2C_1_INTR_SLAVE_ALL);
 833:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_ClearMasterInterruptSource(I2C_1_INTR_MASTER_ALL);
 834:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     #endif /* (I2C_1_CY_SCBIP_V0) */
 835:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 836:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_CTRL_REG |= (uint32) I2C_1_CTRL_ENABLED;  /* Enable scb IP */
 837:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 838:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 839:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #ifdef I2C_1_I2C_ISR_EXIT_CALLBACK
 840:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     I2C_1_I2C_ISR_ExitCallback();
 841:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** #endif /* I2C_1_I2C_ISR_EXIT_CALLBACK */
 842:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 843:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** }
 151              		.loc 1 843 0
 152 0098 03B0     		add	sp, sp, #12
 153              		@ sp needed
 154 009a 3CBC     		pop	{r2, r3, r4, r5}
 155 009c 9046     		mov	r8, r2
 156 009e 9946     		mov	r9, r3
 157 00a0 A246     		mov	r10, r4
 158 00a2 AB46     		mov	fp, r5
 159 00a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 160              	.LVL6:
 161              	.L8:
 468:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     {
 162              		.loc 1 468 0
 163 00a6 1020     		mov	r0, #16
 164 00a8 1A78     		ldrb	r2, [r3]
 165 00aa 1042     		tst	r0, r2
 166 00ac F4D1     		bne	.L1
 818:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 167              		.loc 1 818 0
 168 00ae 9B49     		ldr	r1, .L74+28
 169              	.LVL7:
 170 00b0 0A68     		ldr	r2, [r1]
 171 00b2 5200     		lsl	r2, r2, #1
 172 00b4 5208     		lsr	r2, r2, #1
 173 00b6 0A60     		str	r2, [r1]
 820:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 174              		.loc 1 820 0
 175 00b8 1870     		strb	r0, [r3]
 822:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****         I2C_1_DISABLE_MASTER_AUTO_DATA;
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 19


 176              		.loc 1 822 0
 177 00ba 994B     		ldr	r3, .L74+32
 178 00bc 994A     		ldr	r2, .L74+36
 179 00be 1868     		ldr	r0, [r3]
 180 00c0 0240     		and	r2, r0
 181 00c2 1A60     		str	r2, [r3]
 823:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 182              		.loc 1 823 0
 183 00c4 1868     		ldr	r0, [r3]
 184 00c6 984A     		ldr	r2, .L74+40
 185 00c8 0240     		and	r2, r0
 186 00ca 1A60     		str	r2, [r3]
 836:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****     }
 187              		.loc 1 836 0
 188 00cc 8022     		mov	r2, #128
 189 00ce 0B68     		ldr	r3, [r1]
 190 00d0 1206     		lsl	r2, r2, #24
 191 00d2 1343     		orr	r3, r2
 192 00d4 0B60     		str	r3, [r1]
 193 00d6 DFE7     		b	.L1
 194              	.LVL8:
 195              	.L9:
 239:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 196              		.loc 1 239 0
 197 00d8 1C78     		ldrb	r4, [r3]
 198 00da 2407     		lsl	r4, r4, #28
 199 00dc 40D5     		bpl	.L13
 244:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 200              		.loc 1 244 0
 201 00de 0468     		ldr	r4, [r0]
 202 00e0 0220     		mov	r0, #2
 203 00e2 2042     		tst	r0, r4
 204 00e4 30D0     		beq	.L14
 246:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 205              		.loc 1 246 0
 206 00e6 8C4A     		ldr	r2, .L74+24
 248:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_I2C_MSTAT_ERR_ADDR_NAK);
 207              		.loc 1 248 0
 208 00e8 8A49     		ldr	r1, .L74+20
 209              	.LVL9:
 246:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 210              		.loc 1 246 0
 211 00ea 1060     		str	r0, [r2]
 248:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_I2C_MSTAT_ERR_ADDR_NAK);
 212              		.loc 1 248 0
 213 00ec 8820     		mov	r0, #136
 214 00ee 0A88     		ldrh	r2, [r1]
 215 00f0 8000     		lsl	r0, r0, #2
 216 00f2 0243     		orr	r2, r0
 217 00f4 0A80     		strh	r2, [r1]
 218              	.LVL10:
 277:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 219              		.loc 1 277 0
 220 00f6 1A78     		ldrb	r2, [r3]
 221 00f8 5207     		lsl	r2, r2, #29
 222 00fa 00D5     		bpl	.LCB216
 223 00fc C8E0     		b	.L42	@long jump
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 20


 224              	.LCB216:
 225              	.LVL11:
 226              	.L16:
 434:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 227              		.loc 1 434 0
 228 00fe 8849     		ldr	r1, .L74+32
 229 0100 8A4A     		ldr	r2, .L74+44
 230 0102 0868     		ldr	r0, [r1]
 231 0104 0240     		and	r2, r0
 232 0106 0A60     		str	r2, [r1]
 437:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     I2C_1_SetTxInterruptMode(I2C_1_NO_INTR_SOURCES);
 233              		.loc 1 437 0
 234 0108 0022     		mov	r2, #0
 235 010a 8949     		ldr	r1, .L74+48
 236 010c 0A60     		str	r2, [r1]
 438:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 237              		.loc 1 438 0
 238 010e 8949     		ldr	r1, .L74+52
 239 0110 0A60     		str	r2, [r1]
 440:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 240              		.loc 1 440 0
 241 0112 894A     		ldr	r2, .L74+56
 242 0114 1278     		ldrb	r2, [r2]
 243 0116 9207     		lsl	r2, r2, #30
 244 0118 72D5     		bpl	.L34
 443:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_GET_I2C_MSTAT_CMPLT);
 245              		.loc 1 443 0
 246 011a 0121     		mov	r1, #1
 247 011c 0A20     		mov	r0, #10
 444:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 248              		.loc 1 444 0
 249 011e 1A78     		ldrb	r2, [r3]
 443:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                  I2C_1_GET_I2C_MSTAT_CMPLT);
 250              		.loc 1 443 0
 251 0120 0A40     		and	r2, r1
 252 0122 811A     		sub	r1, r0, r2
 253 0124 7B48     		ldr	r0, .L74+20
 254 0126 0288     		ldrh	r2, [r0]
 255 0128 0A43     		orr	r2, r1
 256 012a 92B2     		uxth	r2, r2
 257 012c 0280     		strh	r2, [r0]
 446:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 258              		.loc 1 446 0
 259 012e 6022     		mov	r2, #96
 260 0130 1A70     		strb	r2, [r3]
 261 0132 B1E7     		b	.L1
 262              	.LVL12:
 263              	.L5:
  87:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****             {
 264              		.loc 1 87 0
 265 0134 0268     		ldr	r2, [r0]
 266 0136 D207     		lsl	r2, r2, #31
 267 0138 99D5     		bpl	.L4
  89:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                          I2C_1_I2C_MSTAT_ERR_ARB_LOST);
 268              		.loc 1 89 0
 269 013a 9020     		mov	r0, #144
 270 013c 754A     		ldr	r2, .L74+20
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 21


 271 013e 8000     		lsl	r0, r0, #2
 272 0140 1188     		ldrh	r1, [r2]
 273 0142 0143     		orr	r1, r0
 274 0144 1180     		strh	r1, [r2]
 275              	.LVL13:
 276 0146 86E7     		b	.L6
 277              	.LVL14:
 278              	.L14:
 261:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 279              		.loc 1 261 0
 280 0148 1878     		ldrb	r0, [r3]
 281 014a C007     		lsl	r0, r0, #31
 282 014c 00D5     		bpl	.LCB282
 283 014e A1E0     		b	.L72	@long jump
 284              	.LCB282:
 267:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             if(0u != I2C_1_mstrWrBufSize)
 285              		.loc 1 267 0
 286 0150 2420     		mov	r0, #36
 287 0152 1870     		strb	r0, [r3]
 268:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 288              		.loc 1 268 0
 289 0154 7948     		ldr	r0, .L74+60
 290 0156 0068     		ldr	r0, [r0]
 291 0158 0028     		cmp	r0, #0
 292 015a 01D0     		beq	.L13
 271:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 293              		.loc 1 271 0
 294 015c 7548     		ldr	r0, .L74+52
 295 015e 0260     		str	r2, [r0]
 296              	.L13:
 277:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 297              		.loc 1 277 0
 298 0160 1A78     		ldrb	r2, [r3]
 299 0162 5207     		lsl	r2, r2, #29
 300 0164 48D5     		bpl	.L19
 301              	.LVL15:
 302              	.L15:
 279:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     {
 303              		.loc 1 279 0
 304 0166 0122     		mov	r2, #1
 305 0168 1878     		ldrb	r0, [r3]
 306 016a 0242     		tst	r2, r0
 307 016c 51D0     		beq	.L20
 285:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 308              		.loc 1 285 0
 309 016e 744A     		ldr	r2, .L74+64
 310 0170 1068     		ldr	r0, [r2]
 311 0172 0007     		lsl	r0, r0, #28
 312 0174 25D5     		bpl	.L21
 288:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         (I2C_1_mstrRdBufIndex + I2C_1_GET_RX_FIFO_ENTRIES);
 313              		.loc 1 288 0
 314 0176 734A     		ldr	r2, .L74+68
 289:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 315              		.loc 1 289 0
 316 0178 7348     		ldr	r0, .L74+72
 317 017a 744D     		ldr	r5, .L74+76
 288:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         (I2C_1_mstrRdBufIndex + I2C_1_GET_RX_FIFO_ENTRIES);
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 22


 318              		.loc 1 288 0
 319 017c 1268     		ldr	r2, [r2]
 289:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 320              		.loc 1 289 0
 321 017e 0068     		ldr	r0, [r0]
 322 0180 2C68     		ldr	r4, [r5]
 323 0182 121B     		sub	r2, r2, r4
 324 0184 1F24     		mov	r4, #31
 325 0186 0440     		and	r4, r0
 288:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         (I2C_1_mstrRdBufIndex + I2C_1_GET_RX_FIFO_ENTRIES);
 326              		.loc 1 288 0
 327 0188 141B     		sub	r4, r2, r4
 328              	.LVL16:
 292:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 329              		.loc 1 292 0
 330 018a 082C     		cmp	r4, #8
 331 018c 00D9     		bls	.LCB328
 332 018e B2E0     		b	.L43	@long jump
 333              	.LCB328:
 298:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 334              		.loc 1 298 0
 335 0190 002C     		cmp	r4, #0
 336 0192 06D1     		bne	.L22
 300:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 337              		.loc 1 300 0
 338 0194 6249     		ldr	r1, .L74+32
 339 0196 654A     		ldr	r2, .L74+44
 340 0198 0868     		ldr	r0, [r1]
 302:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     endTransfer = I2C_1_I2C_CMPLT_ANY_TRANSFER;
 341              		.loc 1 302 0
 342 019a 0834     		add	r4, r4, #8
 343              	.LVL17:
 300:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 344              		.loc 1 300 0
 345 019c 0240     		and	r2, r0
 346 019e 0A60     		str	r2, [r1]
 347              	.LVL18:
 303:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 348              		.loc 1 303 0
 349 01a0 0121     		mov	r1, #1
 350              	.LVL19:
 351              	.L22:
 352 01a2 6B4F     		ldr	r7, .L74+80
 310:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_mstrRdBufIndex++;
 353              		.loc 1 310 0 discriminator 1
 354 01a4 6B4E     		ldr	r6, .L74+84
 355              	.L23:
 309:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                                         I2C_1_RX_FI
 356              		.loc 1 309 0 discriminator 2
 357 01a6 3868     		ldr	r0, [r7]
 358 01a8 2A68     		ldr	r2, [r5]
 359 01aa 8446     		mov	ip, r0
 310:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 I2C_1_mstrRdBufIndex++;
 360              		.loc 1 310 0 discriminator 2
 361 01ac 3068     		ldr	r0, [r6]
 309:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                                         I2C_1_RX_FI
 362              		.loc 1 309 0 discriminator 2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 23


 363 01ae 6244     		add	r2, r2, ip
 364 01b0 C0B2     		uxtb	r0, r0
 365 01b2 1070     		strb	r0, [r2]
 311:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 366              		.loc 1 311 0 discriminator 2
 367 01b4 2A68     		ldr	r2, [r5]
 307:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 368              		.loc 1 307 0 discriminator 2
 369 01b6 013C     		sub	r4, r4, #1
 370              	.LVL20:
 311:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 371              		.loc 1 311 0 discriminator 2
 372 01b8 0132     		add	r2, r2, #1
 373 01ba 2A60     		str	r2, [r5]
 307:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 374              		.loc 1 307 0 discriminator 2
 375 01bc 002C     		cmp	r4, #0
 376 01be F2D1     		bne	.L23
 377 01c0 17E0     		b	.L24
 378              	.LVL21:
 379              	.L21:
 319:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 380              		.loc 1 319 0
 381 01c2 0420     		mov	r0, #4
 382 01c4 1268     		ldr	r2, [r2]
 383 01c6 1042     		tst	r0, r2
 384 01c8 13D0     		beq	.L24
 322:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             I2C_1_mstrRdBufIndex++;
 385              		.loc 1 322 0
 386 01ca 604A     		ldr	r2, .L74+76
 387 01cc 604D     		ldr	r5, .L74+80
 388 01ce 1468     		ldr	r4, [r2]
 389 01d0 2D68     		ldr	r5, [r5]
 390 01d2 2C19     		add	r4, r5, r4
 391 01d4 5F4D     		ldr	r5, .L74+84
 392 01d6 2D68     		ldr	r5, [r5]
 393 01d8 EDB2     		uxtb	r5, r5
 394 01da 2570     		strb	r5, [r4]
 323:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 395              		.loc 1 323 0
 396 01dc 1468     		ldr	r4, [r2]
 397 01de 0134     		add	r4, r4, #1
 398 01e0 1460     		str	r4, [r2]
 325:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 399              		.loc 1 325 0
 400 01e2 1468     		ldr	r4, [r2]
 401 01e4 574A     		ldr	r2, .L74+68
 402 01e6 1268     		ldr	r2, [r2]
 403 01e8 9442     		cmp	r4, r2
 404 01ea 00D3     		bcc	.LCB398
 405 01ec 85E0     		b	.L44	@long jump
 406              	.LCB398:
 327:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 407              		.loc 1 327 0
 408 01ee 5A4A     		ldr	r2, .L74+88
 409 01f0 1060     		str	r0, [r2]
 410              	.L24:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 24


 411              	.LVL22:
 339:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 412              		.loc 1 339 0
 413 01f2 5A48     		ldr	r0, .L74+92
 414 01f4 5A4A     		ldr	r2, .L74+96
 415 01f6 1060     		str	r0, [r2]
 416              	.LVL23:
 417              	.L19:
 431:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                 {
 418              		.loc 1 431 0
 419 01f8 0029     		cmp	r1, #0
 420 01fa 00D0     		beq	.LCB412
 421 01fc 7FE7     		b	.L16	@long jump
 422              	.LCB412:
 423 01fe 4BE7     		b	.L1
 424              	.LVL24:
 425              	.L34:
 456:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 426              		.loc 1 456 0
 427 0200 584B     		ldr	r3, .L74+100
 428 0202 1A68     		ldr	r2, [r3]
 429 0204 1823     		mov	r3, #24
 430 0206 9206     		lsl	r2, r2, #26
 431 0208 00D4     		bmi	.L36
 432 020a 083B     		sub	r3, r3, #8
 433              	.L36:
 456:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 434              		.loc 1 456 0 is_stmt 0 discriminator 4
 435 020c 524A     		ldr	r2, .L74+88
 436 020e 1360     		str	r3, [r2]
 437 0210 42E7     		b	.L1
 438              	.L20:
 348:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 439              		.loc 1 348 0 is_stmt 1
 440 0212 3F48     		ldr	r0, .L74+16
 441 0214 0468     		ldr	r4, [r0]
 442 0216 0220     		mov	r0, #2
 443 0218 2042     		tst	r0, r4
 444 021a 3ED1     		bne	.L73
 371:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 445              		.loc 1 371 0
 446 021c 524A     		ldr	r2, .L74+104
 447 021e 1068     		ldr	r0, [r2]
 448 0220 C006     		lsl	r0, r0, #27
 449 0222 60D5     		bpl	.L27
 373:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 450              		.loc 1 373 0
 451 0224 1F20     		mov	r0, #31
 452 0226 514D     		ldr	r5, .L74+108
 453 0228 2A68     		ldr	r2, [r5]
 454 022a 0240     		and	r2, r0
 455 022c 082A     		cmp	r2, #8
 456 022e 56D0     		beq	.L29
 378:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 457              		.loc 1 378 0
 458 0230 4F4A     		ldr	r2, .L74+112
 459 0232 424C     		ldr	r4, .L74+60
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 25


 460 0234 1068     		ldr	r0, [r2]
 461 0236 2668     		ldr	r6, [r4]
 462 0238 8642     		cmp	r6, r0
 463 023a 50D9     		bls	.L29
 464 023c 4D48     		ldr	r0, .L74+116
 393:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_mstrWrBufIndexTmp++;
 465              		.loc 1 393 0
 466 023e 4E4F     		ldr	r7, .L74+120
 467 0240 0068     		ldr	r0, [r0]
 373:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 468              		.loc 1 373 0
 469 0242 0195     		str	r5, [sp, #4]
 470 0244 8446     		mov	ip, r0
 387:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_UNDERFLOW);
 471              		.loc 1 387 0
 472 0246 4D48     		ldr	r0, .L74+124
 373:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 473              		.loc 1 373 0
 474 0248 1F26     		mov	r6, #31
 387:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_UNDERFLOW);
 475              		.loc 1 387 0
 476 024a 8246     		mov	r10, r0
 477 024c 4020     		mov	r0, #64
 478 024e 8046     		mov	r8, r0
 388:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     }
 479              		.loc 1 388 0
 480 0250 3848     		ldr	r0, .L74+52
 481 0252 8146     		mov	r9, r0
 482 0254 11E0     		b	.L30
 483              	.L31:
 393:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     I2C_1_mstrWrBufIndexTmp++;
 484              		.loc 1 393 0
 485 0256 1068     		ldr	r0, [r2]
 486 0258 6044     		add	r0, r0, ip
 487 025a 0078     		ldrb	r0, [r0]
 488 025c C0B2     		uxtb	r0, r0
 489 025e 3860     		str	r0, [r7]
 394:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 }
 490              		.loc 1 394 0
 491 0260 1068     		ldr	r0, [r2]
 492 0262 0130     		add	r0, r0, #1
 493 0264 1060     		str	r0, [r2]
 373:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             {
 494              		.loc 1 373 0
 495 0266 0198     		ldr	r0, [sp, #4]
 496 0268 0068     		ldr	r0, [r0]
 497 026a 3040     		and	r0, r6
 498 026c 0828     		cmp	r0, #8
 499 026e 36D0     		beq	.L29
 378:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                 {
 500              		.loc 1 378 0
 501 0270 1068     		ldr	r0, [r2]
 502 0272 8346     		mov	fp, r0
 503 0274 2068     		ldr	r0, [r4]
 504 0276 8345     		cmp	fp, r0
 505 0278 31D2     		bcs	.L29
 506              	.L30:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 26


 385:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     {
 507              		.loc 1 385 0
 508 027a 2068     		ldr	r0, [r4]
 509 027c 1568     		ldr	r5, [r2]
 510 027e 0138     		sub	r0, r0, #1
 511 0280 A842     		cmp	r0, r5
 512 0282 E8D1     		bne	.L31
 387:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                         I2C_1_SetTxInterruptMode(I2C_1_INTR_TX_UNDERFLOW);
 513              		.loc 1 387 0
 514 0284 5046     		mov	r0, r10
 515 0286 4546     		mov	r5, r8
 516 0288 0560     		str	r5, [r0]
 388:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                     }
 517              		.loc 1 388 0
 518 028a 4846     		mov	r0, r9
 519 028c 0560     		str	r5, [r0]
 520 028e E2E7     		b	.L31
 521              	.LVL25:
 522              	.L42:
 251:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                     }
 523              		.loc 1 251 0
 524 0290 0121     		mov	r1, #1
 525 0292 68E7     		b	.L15
 526              	.LVL26:
 527              	.L72:
 263:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         }
 528              		.loc 1 263 0
 529 0294 2522     		mov	r2, #37
 530 0296 1A70     		strb	r2, [r3]
 531 0298 62E7     		b	.L13
 532              	.LVL27:
 533              	.L73:
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 534              		.loc 1 353 0
 535 029a 1F26     		mov	r6, #31
 350:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 536              		.loc 1 350 0
 537 029c 1E49     		ldr	r1, .L74+24
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 538              		.loc 1 353 0
 539 029e 344D     		ldr	r5, .L74+112
 350:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 540              		.loc 1 350 0
 541 02a0 0860     		str	r0, [r1]
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 542              		.loc 1 353 0
 543 02a2 3248     		ldr	r0, .L74+108
 544 02a4 0168     		ldr	r1, [r0]
 354:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 545              		.loc 1 354 0
 546 02a6 0468     		ldr	r4, [r0]
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 547              		.loc 1 353 0
 548 02a8 2868     		ldr	r0, [r5]
 549 02aa 3140     		and	r1, r6
 550 02ac 411A     		sub	r1, r0, r1
 551 02ae E00B     		lsr	r0, r4, #15
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 27


 552 02b0 0240     		and	r2, r0
 359:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                      I2C_1_I2C_MSTAT_ERR_SHORT_XFER
 553              		.loc 1 359 0
 554 02b2 8420     		mov	r0, #132
 353:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                    I2C_1_GET_TX_FIFO_SR_VALID);
 555              		.loc 1 353 0
 556 02b4 8A1A     		sub	r2, r1, r2
 557 02b6 2A60     		str	r2, [r5]
 357:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 558              		.loc 1 357 0
 559 02b8 2968     		ldr	r1, [r5]
 560 02ba 314A     		ldr	r2, .L74+128
 359:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                      I2C_1_I2C_MSTAT_ERR_SHORT_XFER
 561              		.loc 1 359 0
 562 02bc 8000     		lsl	r0, r0, #2
 357:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 563              		.loc 1 357 0
 564 02be 1160     		str	r1, [r2]
 359:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                      I2C_1_I2C_MSTAT_ERR_SHORT_XFER
 565              		.loc 1 359 0
 566 02c0 1449     		ldr	r1, .L74+20
 567 02c2 0A88     		ldrh	r2, [r1]
 568 02c4 0243     		orr	r2, r0
 362:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 569              		.loc 1 362 0
 570 02c6 8020     		mov	r0, #128
 359:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                                                                      I2C_1_I2C_MSTAT_ERR_SHORT_XFER
 571              		.loc 1 359 0
 572 02c8 0A80     		strh	r2, [r1]
 362:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
 573              		.loc 1 362 0
 574 02ca 2E4A     		ldr	r2, .L74+132
 575 02cc 4002     		lsl	r0, r0, #9
 576 02ce 1168     		ldr	r1, [r2]
 577 02d0 0143     		orr	r1, r0
 578 02d2 1160     		str	r1, [r2]
 579 02d4 1068     		ldr	r0, [r2]
 580 02d6 2C49     		ldr	r1, .L74+136
 581 02d8 0140     		and	r1, r0
 582 02da 1160     		str	r1, [r2]
 583              	.LVL28:
 584 02dc 0FE7     		b	.L16
 585              	.LVL29:
 586              	.L29:
 410:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         #endif /* (I2C_1_CY_SCBIP_V0) */
 587              		.loc 1 410 0
 588 02de 1020     		mov	r0, #16
 589 02e0 264A     		ldr	r2, .L74+124
 590 02e2 1060     		str	r0, [r2]
 591 02e4 88E7     		b	.L19
 592              	.L27:
 417:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                         {
 593              		.loc 1 417 0
 594 02e6 1268     		ldr	r2, [r2]
 595 02e8 5206     		lsl	r2, r2, #25
 596 02ea 85D5     		bpl	.L19
 420:Generated_Source\PSoC4/I2C_1_I2C_INT.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 28


 597              		.loc 1 420 0
 598 02ec 204A     		ldr	r2, .L74+112
 599 02ee 1168     		ldr	r1, [r2]
 600 02f0 234A     		ldr	r2, .L74+128
 601 02f2 1160     		str	r1, [r2]
 602              	.LVL30:
 603 02f4 03E7     		b	.L16
 604              	.LVL31:
 605              	.L43:
 294:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 606              		.loc 1 294 0
 607 02f6 0824     		mov	r4, #8
 608              	.LVL32:
 609 02f8 53E7     		b	.L22
 610              	.LVL33:
 611              	.L44:
 331:Generated_Source\PSoC4/I2C_1_I2C_INT.c ****                             }
 612              		.loc 1 331 0
 613 02fa 0121     		mov	r1, #1
 614 02fc 79E7     		b	.L24
 615              	.L75:
 616 02fe C046     		.align	2
 617              	.L74:
 618 0300 00000000 		.word	I2C_1_customIntrHandler
 619 0304 8C0E2440 		.word	1076104844
 620 0308 880E2440 		.word	1076104840
 621 030c 00000000 		.word	I2C_1_state
 622 0310 0C0F2440 		.word	1076104972
 623 0314 00000000 		.word	I2C_1_mstrStatus
 624 0318 000F2440 		.word	1076104960
 625 031c 00002440 		.word	1076101120
 626 0320 60002440 		.word	1076101216
 627 0324 FF5FFFFF 		.word	-40961
 628 0328 FFFCFFFF 		.word	-769
 629 032c FFFEFFFF 		.word	-257
 630 0330 C80F2440 		.word	1076105160
 631 0334 880F2440 		.word	1076105096
 632 0338 00000000 		.word	I2C_1_mstrControl
 633 033c 00000000 		.word	I2C_1_mstrWrBufSize
 634 0340 CC0F2440 		.word	1076105164
 635 0344 00000000 		.word	I2C_1_mstrRdBufSize
 636 0348 08032440 		.word	1076101896
 637 034c 00000000 		.word	I2C_1_mstrRdBufIndex
 638 0350 00000000 		.word	I2C_1_mstrRdBufPtr
 639 0354 40032440 		.word	1076101952
 640 0358 68002440 		.word	1076101224
 641 035c ED0F0000 		.word	4077
 642 0360 C00F2440 		.word	1076105152
 643 0364 64002440 		.word	1076101220
 644 0368 8C0F2440 		.word	1076105100
 645 036c 08022440 		.word	1076101640
 646 0370 00000000 		.word	I2C_1_mstrWrBufIndexTmp
 647 0374 00000000 		.word	I2C_1_mstrWrBufPtr
 648 0378 40022440 		.word	1076101696
 649 037c 800F2440 		.word	1076105088
 650 0380 00000000 		.word	I2C_1_mstrWrBufIndex
 651 0384 04022440 		.word	1076101636
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 29


 652 0388 FFFFFEFF 		.word	-65537
 653              		.cfi_endproc
 654              	.LFE1:
 655              		.size	I2C_1_I2C_ISR, .-I2C_1_I2C_ISR
 656              		.text
 657              	.Letext0:
 658              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 659              		.file 3 "Generated_Source\\PSoC4\\I2C_1_PVT.h"
 660              		.file 4 "Generated_Source\\PSoC4\\I2C_1_I2C_PVT.h"
 661              		.section	.debug_info,"",%progbits
 662              	.Ldebug_info0:
 663 0000 89010000 		.4byte	0x189
 664 0004 0400     		.2byte	0x4
 665 0006 00000000 		.4byte	.Ldebug_abbrev0
 666 000a 04       		.byte	0x4
 667 000b 01       		.uleb128 0x1
 668 000c 79000000 		.4byte	.LASF31
 669 0010 01       		.byte	0x1
 670 0011 1A010000 		.4byte	.LASF32
 671 0015 5B020000 		.4byte	.LASF33
 672 0019 00000000 		.4byte	.Ldebug_ranges0+0
 673 001d 00000000 		.4byte	0
 674 0021 00000000 		.4byte	.Ldebug_line0
 675 0025 02       		.uleb128 0x2
 676 0026 01       		.byte	0x1
 677 0027 06       		.byte	0x6
 678 0028 B1020000 		.4byte	.LASF0
 679 002c 02       		.uleb128 0x2
 680 002d 01       		.byte	0x1
 681 002e 08       		.byte	0x8
 682 002f 41010000 		.4byte	.LASF1
 683 0033 02       		.uleb128 0x2
 684 0034 02       		.byte	0x2
 685 0035 05       		.byte	0x5
 686 0036 1B020000 		.4byte	.LASF2
 687 003a 02       		.uleb128 0x2
 688 003b 02       		.byte	0x2
 689 003c 07       		.byte	0x7
 690 003d 40000000 		.4byte	.LASF3
 691 0041 02       		.uleb128 0x2
 692 0042 04       		.byte	0x4
 693 0043 05       		.byte	0x5
 694 0044 52020000 		.4byte	.LASF4
 695 0048 02       		.uleb128 0x2
 696 0049 04       		.byte	0x4
 697 004a 07       		.byte	0x7
 698 004b 4F010000 		.4byte	.LASF5
 699 004f 02       		.uleb128 0x2
 700 0050 08       		.byte	0x8
 701 0051 05       		.byte	0x5
 702 0052 F5010000 		.4byte	.LASF6
 703 0056 02       		.uleb128 0x2
 704 0057 08       		.byte	0x8
 705 0058 07       		.byte	0x7
 706 0059 B7010000 		.4byte	.LASF7
 707 005d 03       		.uleb128 0x3
 708 005e 04       		.byte	0x4
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 30


 709 005f 05       		.byte	0x5
 710 0060 696E7400 		.ascii	"int\000"
 711 0064 02       		.uleb128 0x2
 712 0065 04       		.byte	0x4
 713 0066 07       		.byte	0x7
 714 0067 AA010000 		.4byte	.LASF8
 715 006b 04       		.uleb128 0x4
 716 006c 6B010000 		.4byte	.LASF9
 717 0070 02       		.byte	0x2
 718 0071 B901     		.2byte	0x1b9
 719 0073 2C000000 		.4byte	0x2c
 720 0077 04       		.uleb128 0x4
 721 0078 90010000 		.4byte	.LASF10
 722 007c 02       		.byte	0x2
 723 007d BA01     		.2byte	0x1ba
 724 007f 3A000000 		.4byte	0x3a
 725 0083 04       		.uleb128 0x4
 726 0084 97010000 		.4byte	.LASF11
 727 0088 02       		.byte	0x2
 728 0089 BB01     		.2byte	0x1bb
 729 008b 48000000 		.4byte	0x48
 730 008f 02       		.uleb128 0x2
 731 0090 04       		.byte	0x4
 732 0091 04       		.byte	0x4
 733 0092 73000000 		.4byte	.LASF12
 734 0096 02       		.uleb128 0x2
 735 0097 08       		.byte	0x8
 736 0098 04       		.byte	0x4
 737 0099 71010000 		.4byte	.LASF13
 738 009d 02       		.uleb128 0x2
 739 009e 01       		.byte	0x1
 740 009f 08       		.byte	0x8
 741 00a0 03020000 		.4byte	.LASF14
 742 00a4 05       		.uleb128 0x5
 743 00a5 6B000000 		.4byte	0x6b
 744 00a9 05       		.uleb128 0x5
 745 00aa 77000000 		.4byte	0x77
 746 00ae 04       		.uleb128 0x4
 747 00af 00000000 		.4byte	.LASF15
 748 00b3 02       		.byte	0x2
 749 00b4 6502     		.2byte	0x265
 750 00b6 BA000000 		.4byte	0xba
 751 00ba 05       		.uleb128 0x5
 752 00bb 83000000 		.4byte	0x83
 753 00bf 04       		.uleb128 0x4
 754 00c0 DF010000 		.4byte	.LASF16
 755 00c4 02       		.byte	0x2
 756 00c5 7502     		.2byte	0x275
 757 00c7 CB000000 		.4byte	0xcb
 758 00cb 06       		.uleb128 0x6
 759 00cc 04       		.byte	0x4
 760 00cd D1000000 		.4byte	0xd1
 761 00d1 07       		.uleb128 0x7
 762 00d2 02       		.uleb128 0x2
 763 00d3 04       		.byte	0x4
 764 00d4 07       		.byte	0x7
 765 00d5 EC010000 		.4byte	.LASF17
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 31


 766 00d9 08       		.uleb128 0x8
 767 00da D1020000 		.4byte	.LASF34
 768 00de 01       		.byte	0x1
 769 00df 1F       		.byte	0x1f
 770 00e0 00000000 		.4byte	.LFB1
 771 00e4 8C030000 		.4byte	.LFE1-.LFB1
 772 00e8 01       		.uleb128 0x1
 773 00e9 9C       		.byte	0x9c
 774 00ea 0D010000 		.4byte	0x10d
 775 00ee 09       		.uleb128 0x9
 776 00ef 61010000 		.4byte	.LASF18
 777 00f3 01       		.byte	0x1
 778 00f4 21       		.byte	0x21
 779 00f5 83000000 		.4byte	0x83
 780 00f9 00000000 		.4byte	.LLST0
 781 00fd 09       		.uleb128 0x9
 782 00fe 53000000 		.4byte	.LASF19
 783 0102 01       		.byte	0x1
 784 0103 22       		.byte	0x22
 785 0104 83000000 		.4byte	0x83
 786 0108 54000000 		.4byte	.LLST1
 787 010c 00       		.byte	0
 788 010d 0A       		.uleb128 0xa
 789 010e 25020000 		.4byte	.LASF20
 790 0112 03       		.byte	0x3
 791 0113 3B       		.byte	0x3b
 792 0114 BF000000 		.4byte	0xbf
 793 0118 0A       		.uleb128 0xa
 794 0119 9E010000 		.4byte	.LASF21
 795 011d 04       		.byte	0x4
 796 011e 1E       		.byte	0x1e
 797 011f A4000000 		.4byte	0xa4
 798 0123 0A       		.uleb128 0xa
 799 0124 CE010000 		.4byte	.LASF22
 800 0128 04       		.byte	0x4
 801 0129 31       		.byte	0x31
 802 012a A9000000 		.4byte	0xa9
 803 012e 0A       		.uleb128 0xa
 804 012f 1B000000 		.4byte	.LASF23
 805 0133 04       		.byte	0x4
 806 0134 32       		.byte	0x32
 807 0135 A4000000 		.4byte	0xa4
 808 0139 0A       		.uleb128 0xa
 809 013a 08020000 		.4byte	.LASF24
 810 013e 04       		.byte	0x4
 811 013f 35       		.byte	0x35
 812 0140 44010000 		.4byte	0x144
 813 0144 06       		.uleb128 0x6
 814 0145 04       		.byte	0x4
 815 0146 A4000000 		.4byte	0xa4
 816 014a 0A       		.uleb128 0xa
 817 014b BD020000 		.4byte	.LASF25
 818 014f 04       		.byte	0x4
 819 0150 36       		.byte	0x36
 820 0151 BA000000 		.4byte	0xba
 821 0155 0A       		.uleb128 0xa
 822 0156 06000000 		.4byte	.LASF26
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 32


 823 015a 04       		.byte	0x4
 824 015b 37       		.byte	0x37
 825 015c BA000000 		.4byte	0xba
 826 0160 0A       		.uleb128 0xa
 827 0161 2D000000 		.4byte	.LASF27
 828 0165 04       		.byte	0x4
 829 0166 3A       		.byte	0x3a
 830 0167 44010000 		.4byte	0x144
 831 016b 0A       		.uleb128 0xa
 832 016c 5F000000 		.4byte	.LASF28
 833 0170 04       		.byte	0x4
 834 0171 3B       		.byte	0x3b
 835 0172 BA000000 		.4byte	0xba
 836 0176 0A       		.uleb128 0xa
 837 0177 3D020000 		.4byte	.LASF29
 838 017b 04       		.byte	0x4
 839 017c 3C       		.byte	0x3c
 840 017d BA000000 		.4byte	0xba
 841 0181 0A       		.uleb128 0xa
 842 0182 78010000 		.4byte	.LASF30
 843 0186 04       		.byte	0x4
 844 0187 3D       		.byte	0x3d
 845 0188 BA000000 		.4byte	0xba
 846 018c 00       		.byte	0
 847              		.section	.debug_abbrev,"",%progbits
 848              	.Ldebug_abbrev0:
 849 0000 01       		.uleb128 0x1
 850 0001 11       		.uleb128 0x11
 851 0002 01       		.byte	0x1
 852 0003 25       		.uleb128 0x25
 853 0004 0E       		.uleb128 0xe
 854 0005 13       		.uleb128 0x13
 855 0006 0B       		.uleb128 0xb
 856 0007 03       		.uleb128 0x3
 857 0008 0E       		.uleb128 0xe
 858 0009 1B       		.uleb128 0x1b
 859 000a 0E       		.uleb128 0xe
 860 000b 55       		.uleb128 0x55
 861 000c 17       		.uleb128 0x17
 862 000d 11       		.uleb128 0x11
 863 000e 01       		.uleb128 0x1
 864 000f 10       		.uleb128 0x10
 865 0010 17       		.uleb128 0x17
 866 0011 00       		.byte	0
 867 0012 00       		.byte	0
 868 0013 02       		.uleb128 0x2
 869 0014 24       		.uleb128 0x24
 870 0015 00       		.byte	0
 871 0016 0B       		.uleb128 0xb
 872 0017 0B       		.uleb128 0xb
 873 0018 3E       		.uleb128 0x3e
 874 0019 0B       		.uleb128 0xb
 875 001a 03       		.uleb128 0x3
 876 001b 0E       		.uleb128 0xe
 877 001c 00       		.byte	0
 878 001d 00       		.byte	0
 879 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 33


 880 001f 24       		.uleb128 0x24
 881 0020 00       		.byte	0
 882 0021 0B       		.uleb128 0xb
 883 0022 0B       		.uleb128 0xb
 884 0023 3E       		.uleb128 0x3e
 885 0024 0B       		.uleb128 0xb
 886 0025 03       		.uleb128 0x3
 887 0026 08       		.uleb128 0x8
 888 0027 00       		.byte	0
 889 0028 00       		.byte	0
 890 0029 04       		.uleb128 0x4
 891 002a 16       		.uleb128 0x16
 892 002b 00       		.byte	0
 893 002c 03       		.uleb128 0x3
 894 002d 0E       		.uleb128 0xe
 895 002e 3A       		.uleb128 0x3a
 896 002f 0B       		.uleb128 0xb
 897 0030 3B       		.uleb128 0x3b
 898 0031 05       		.uleb128 0x5
 899 0032 49       		.uleb128 0x49
 900 0033 13       		.uleb128 0x13
 901 0034 00       		.byte	0
 902 0035 00       		.byte	0
 903 0036 05       		.uleb128 0x5
 904 0037 35       		.uleb128 0x35
 905 0038 00       		.byte	0
 906 0039 49       		.uleb128 0x49
 907 003a 13       		.uleb128 0x13
 908 003b 00       		.byte	0
 909 003c 00       		.byte	0
 910 003d 06       		.uleb128 0x6
 911 003e 0F       		.uleb128 0xf
 912 003f 00       		.byte	0
 913 0040 0B       		.uleb128 0xb
 914 0041 0B       		.uleb128 0xb
 915 0042 49       		.uleb128 0x49
 916 0043 13       		.uleb128 0x13
 917 0044 00       		.byte	0
 918 0045 00       		.byte	0
 919 0046 07       		.uleb128 0x7
 920 0047 15       		.uleb128 0x15
 921 0048 00       		.byte	0
 922 0049 27       		.uleb128 0x27
 923 004a 19       		.uleb128 0x19
 924 004b 00       		.byte	0
 925 004c 00       		.byte	0
 926 004d 08       		.uleb128 0x8
 927 004e 2E       		.uleb128 0x2e
 928 004f 01       		.byte	0x1
 929 0050 3F       		.uleb128 0x3f
 930 0051 19       		.uleb128 0x19
 931 0052 03       		.uleb128 0x3
 932 0053 0E       		.uleb128 0xe
 933 0054 3A       		.uleb128 0x3a
 934 0055 0B       		.uleb128 0xb
 935 0056 3B       		.uleb128 0x3b
 936 0057 0B       		.uleb128 0xb
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 34


 937 0058 27       		.uleb128 0x27
 938 0059 19       		.uleb128 0x19
 939 005a 11       		.uleb128 0x11
 940 005b 01       		.uleb128 0x1
 941 005c 12       		.uleb128 0x12
 942 005d 06       		.uleb128 0x6
 943 005e 40       		.uleb128 0x40
 944 005f 18       		.uleb128 0x18
 945 0060 9642     		.uleb128 0x2116
 946 0062 19       		.uleb128 0x19
 947 0063 01       		.uleb128 0x1
 948 0064 13       		.uleb128 0x13
 949 0065 00       		.byte	0
 950 0066 00       		.byte	0
 951 0067 09       		.uleb128 0x9
 952 0068 34       		.uleb128 0x34
 953 0069 00       		.byte	0
 954 006a 03       		.uleb128 0x3
 955 006b 0E       		.uleb128 0xe
 956 006c 3A       		.uleb128 0x3a
 957 006d 0B       		.uleb128 0xb
 958 006e 3B       		.uleb128 0x3b
 959 006f 0B       		.uleb128 0xb
 960 0070 49       		.uleb128 0x49
 961 0071 13       		.uleb128 0x13
 962 0072 02       		.uleb128 0x2
 963 0073 17       		.uleb128 0x17
 964 0074 00       		.byte	0
 965 0075 00       		.byte	0
 966 0076 0A       		.uleb128 0xa
 967 0077 34       		.uleb128 0x34
 968 0078 00       		.byte	0
 969 0079 03       		.uleb128 0x3
 970 007a 0E       		.uleb128 0xe
 971 007b 3A       		.uleb128 0x3a
 972 007c 0B       		.uleb128 0xb
 973 007d 3B       		.uleb128 0x3b
 974 007e 0B       		.uleb128 0xb
 975 007f 49       		.uleb128 0x49
 976 0080 13       		.uleb128 0x13
 977 0081 3F       		.uleb128 0x3f
 978 0082 19       		.uleb128 0x19
 979 0083 3C       		.uleb128 0x3c
 980 0084 19       		.uleb128 0x19
 981 0085 00       		.byte	0
 982 0086 00       		.byte	0
 983 0087 00       		.byte	0
 984              		.section	.debug_loc,"",%progbits
 985              	.Ldebug_loc0:
 986              	.LLST0:
 987 0000 8A010000 		.4byte	.LVL16
 988 0004 9C010000 		.4byte	.LVL17
 989 0008 0100     		.2byte	0x1
 990 000a 54       		.byte	0x54
 991 000b 9C010000 		.4byte	.LVL17
 992 000f A0010000 		.4byte	.LVL18
 993 0013 0300     		.2byte	0x3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 35


 994 0015 74       		.byte	0x74
 995 0016 78       		.sleb128 -8
 996 0017 9F       		.byte	0x9f
 997 0018 A0010000 		.4byte	.LVL18
 998 001c A2010000 		.4byte	.LVL19
 999 0020 0200     		.2byte	0x2
 1000 0022 38       		.byte	0x38
 1001 0023 9F       		.byte	0x9f
 1002 0024 A2010000 		.4byte	.LVL19
 1003 0028 C2010000 		.4byte	.LVL21
 1004 002c 0100     		.2byte	0x1
 1005 002e 54       		.byte	0x54
 1006 002f F6020000 		.4byte	.LVL31
 1007 0033 F8020000 		.4byte	.LVL32
 1008 0037 0100     		.2byte	0x1
 1009 0039 54       		.byte	0x54
 1010 003a F8020000 		.4byte	.LVL32
 1011 003e FA020000 		.4byte	.LVL33
 1012 0042 0800     		.2byte	0x8
 1013 0044 72       		.byte	0x72
 1014 0045 00       		.sleb128 0
 1015 0046 70       		.byte	0x70
 1016 0047 00       		.sleb128 0
 1017 0048 4F       		.byte	0x4f
 1018 0049 1A       		.byte	0x1a
 1019 004a 1C       		.byte	0x1c
 1020 004b 9F       		.byte	0x9f
 1021 004c 00000000 		.4byte	0
 1022 0050 00000000 		.4byte	0
 1023              	.LLST1:
 1024 0054 00000000 		.4byte	.LVL0
 1025 0058 46000000 		.4byte	.LVL2
 1026 005c 0200     		.2byte	0x2
 1027 005e 30       		.byte	0x30
 1028 005f 9F       		.byte	0x9f
 1029 0060 46000000 		.4byte	.LVL2
 1030 0064 56000000 		.4byte	.LVL3
 1031 0068 0200     		.2byte	0x2
 1032 006a 31       		.byte	0x31
 1033 006b 9F       		.byte	0x9f
 1034 006c 6E000000 		.4byte	.LVL4
 1035 0070 82000000 		.4byte	.LVL5
 1036 0074 0100     		.2byte	0x1
 1037 0076 51       		.byte	0x51
 1038 0077 A6000000 		.4byte	.LVL6
 1039 007b B0000000 		.4byte	.LVL7
 1040 007f 0100     		.2byte	0x1
 1041 0081 51       		.byte	0x51
 1042 0082 D8000000 		.4byte	.LVL8
 1043 0086 EA000000 		.4byte	.LVL9
 1044 008a 0100     		.2byte	0x1
 1045 008c 51       		.byte	0x51
 1046 008d F6000000 		.4byte	.LVL10
 1047 0091 FE000000 		.4byte	.LVL11
 1048 0095 0200     		.2byte	0x2
 1049 0097 31       		.byte	0x31
 1050 0098 9F       		.byte	0x9f
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 36


 1051 0099 34010000 		.4byte	.LVL12
 1052 009d 46010000 		.4byte	.LVL13
 1053 00a1 0200     		.2byte	0x2
 1054 00a3 30       		.byte	0x30
 1055 00a4 9F       		.byte	0x9f
 1056 00a5 46010000 		.4byte	.LVL13
 1057 00a9 48010000 		.4byte	.LVL14
 1058 00ad 0200     		.2byte	0x2
 1059 00af 31       		.byte	0x31
 1060 00b0 9F       		.byte	0x9f
 1061 00b1 48010000 		.4byte	.LVL14
 1062 00b5 66010000 		.4byte	.LVL15
 1063 00b9 0100     		.2byte	0x1
 1064 00bb 51       		.byte	0x51
 1065 00bc A0010000 		.4byte	.LVL18
 1066 00c0 A2010000 		.4byte	.LVL19
 1067 00c4 0200     		.2byte	0x2
 1068 00c6 31       		.byte	0x31
 1069 00c7 9F       		.byte	0x9f
 1070 00c8 A2010000 		.4byte	.LVL19
 1071 00cc C2010000 		.4byte	.LVL21
 1072 00d0 0100     		.2byte	0x1
 1073 00d2 51       		.byte	0x51
 1074 00d3 F2010000 		.4byte	.LVL22
 1075 00d7 00020000 		.4byte	.LVL24
 1076 00db 0100     		.2byte	0x1
 1077 00dd 51       		.byte	0x51
 1078 00de 90020000 		.4byte	.LVL25
 1079 00e2 94020000 		.4byte	.LVL26
 1080 00e6 0200     		.2byte	0x2
 1081 00e8 31       		.byte	0x31
 1082 00e9 9F       		.byte	0x9f
 1083 00ea 94020000 		.4byte	.LVL26
 1084 00ee 9A020000 		.4byte	.LVL27
 1085 00f2 0100     		.2byte	0x1
 1086 00f4 51       		.byte	0x51
 1087 00f5 DC020000 		.4byte	.LVL28
 1088 00f9 DE020000 		.4byte	.LVL29
 1089 00fd 0200     		.2byte	0x2
 1090 00ff 31       		.byte	0x31
 1091 0100 9F       		.byte	0x9f
 1092 0101 F4020000 		.4byte	.LVL30
 1093 0105 F6020000 		.4byte	.LVL31
 1094 0109 0200     		.2byte	0x2
 1095 010b 31       		.byte	0x31
 1096 010c 9F       		.byte	0x9f
 1097 010d 00000000 		.4byte	0
 1098 0111 00000000 		.4byte	0
 1099              		.section	.debug_aranges,"",%progbits
 1100 0000 1C000000 		.4byte	0x1c
 1101 0004 0200     		.2byte	0x2
 1102 0006 00000000 		.4byte	.Ldebug_info0
 1103 000a 04       		.byte	0x4
 1104 000b 00       		.byte	0
 1105 000c 0000     		.2byte	0
 1106 000e 0000     		.2byte	0
 1107 0010 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 37


 1108 0014 8C030000 		.4byte	.LFE1-.LFB1
 1109 0018 00000000 		.4byte	0
 1110 001c 00000000 		.4byte	0
 1111              		.section	.debug_ranges,"",%progbits
 1112              	.Ldebug_ranges0:
 1113 0000 00000000 		.4byte	.LFB1
 1114 0004 8C030000 		.4byte	.LFE1
 1115 0008 00000000 		.4byte	0
 1116 000c 00000000 		.4byte	0
 1117              		.section	.debug_line,"",%progbits
 1118              	.Ldebug_line0:
 1119 0000 79010000 		.section	.debug_str,"MS",%progbits,1
 1119      02006C00 
 1119      00000201 
 1119      FB0E0D00 
 1119      01010101 
 1120              	.LASF15:
 1121 0000 72656733 		.ascii	"reg32\000"
 1121      3200
 1122              	.LASF26:
 1123 0006 4932435F 		.ascii	"I2C_1_mstrRdBufIndex\000"
 1123      315F6D73 
 1123      74725264 
 1123      42756649 
 1123      6E646578 
 1124              	.LASF23:
 1125 001b 4932435F 		.ascii	"I2C_1_mstrControl\000"
 1125      315F6D73 
 1125      7472436F 
 1125      6E74726F 
 1125      6C00
 1126              	.LASF27:
 1127 002d 4932435F 		.ascii	"I2C_1_mstrWrBufPtr\000"
 1127      315F6D73 
 1127      74725772 
 1127      42756650 
 1127      747200
 1128              	.LASF3:
 1129 0040 73686F72 		.ascii	"short unsigned int\000"
 1129      7420756E 
 1129      7369676E 
 1129      65642069 
 1129      6E7400
 1130              	.LASF19:
 1131 0053 656E6454 		.ascii	"endTransfer\000"
 1131      72616E73 
 1131      66657200 
 1132              	.LASF28:
 1133 005f 4932435F 		.ascii	"I2C_1_mstrWrBufSize\000"
 1133      315F6D73 
 1133      74725772 
 1133      42756653 
 1133      697A6500 
 1134              	.LASF12:
 1135 0073 666C6F61 		.ascii	"float\000"
 1135      7400
 1136              	.LASF31:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 38


 1137 0079 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1137      4320342E 
 1137      392E3320 
 1137      32303135 
 1137      30333033 
 1138 00ac 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1138      20726576 
 1138      6973696F 
 1138      6E203232 
 1138      31323230 
 1139 00df 32202D66 		.ascii	"2 -ffunction-sections -finline-functions -ffat-lto-"
 1139      66756E63 
 1139      74696F6E 
 1139      2D736563 
 1139      74696F6E 
 1140 0112 6F626A65 		.ascii	"objects\000"
 1140      63747300 
 1141              	.LASF32:
 1142 011a 47656E65 		.ascii	"Generated_Source\\PSoC4\\I2C_1_I2C_INT.c\000"
 1142      72617465 
 1142      645F536F 
 1142      75726365 
 1142      5C50536F 
 1143              	.LASF1:
 1144 0141 756E7369 		.ascii	"unsigned char\000"
 1144      676E6564 
 1144      20636861 
 1144      7200
 1145              	.LASF5:
 1146 014f 6C6F6E67 		.ascii	"long unsigned int\000"
 1146      20756E73 
 1146      69676E65 
 1146      6420696E 
 1146      7400
 1147              	.LASF18:
 1148 0161 64696666 		.ascii	"diffCount\000"
 1148      436F756E 
 1148      7400
 1149              	.LASF9:
 1150 016b 75696E74 		.ascii	"uint8\000"
 1150      3800
 1151              	.LASF13:
 1152 0171 646F7562 		.ascii	"double\000"
 1152      6C6500
 1153              	.LASF30:
 1154 0178 4932435F 		.ascii	"I2C_1_mstrWrBufIndexTmp\000"
 1154      315F6D73 
 1154      74725772 
 1154      42756649 
 1154      6E646578 
 1155              	.LASF10:
 1156 0190 75696E74 		.ascii	"uint16\000"
 1156      313600
 1157              	.LASF11:
 1158 0197 75696E74 		.ascii	"uint32\000"
 1158      333200
 1159              	.LASF21:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 39


 1160 019e 4932435F 		.ascii	"I2C_1_state\000"
 1160      315F7374 
 1160      61746500 
 1161              	.LASF8:
 1162 01aa 756E7369 		.ascii	"unsigned int\000"
 1162      676E6564 
 1162      20696E74 
 1162      00
 1163              	.LASF7:
 1164 01b7 6C6F6E67 		.ascii	"long long unsigned int\000"
 1164      206C6F6E 
 1164      6720756E 
 1164      7369676E 
 1164      65642069 
 1165              	.LASF22:
 1166 01ce 4932435F 		.ascii	"I2C_1_mstrStatus\000"
 1166      315F6D73 
 1166      74725374 
 1166      61747573 
 1166      00
 1167              	.LASF16:
 1168 01df 63796973 		.ascii	"cyisraddress\000"
 1168      72616464 
 1168      72657373 
 1168      00
 1169              	.LASF17:
 1170 01ec 73697A65 		.ascii	"sizetype\000"
 1170      74797065 
 1170      00
 1171              	.LASF6:
 1172 01f5 6C6F6E67 		.ascii	"long long int\000"
 1172      206C6F6E 
 1172      6720696E 
 1172      7400
 1173              	.LASF14:
 1174 0203 63686172 		.ascii	"char\000"
 1174      00
 1175              	.LASF24:
 1176 0208 4932435F 		.ascii	"I2C_1_mstrRdBufPtr\000"
 1176      315F6D73 
 1176      74725264 
 1176      42756650 
 1176      747200
 1177              	.LASF2:
 1178 021b 73686F72 		.ascii	"short int\000"
 1178      7420696E 
 1178      7400
 1179              	.LASF20:
 1180 0225 4932435F 		.ascii	"I2C_1_customIntrHandler\000"
 1180      315F6375 
 1180      73746F6D 
 1180      496E7472 
 1180      48616E64 
 1181              	.LASF29:
 1182 023d 4932435F 		.ascii	"I2C_1_mstrWrBufIndex\000"
 1182      315F6D73 
 1182      74725772 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\cc0wReN2.s 			page 40


 1182      42756649 
 1182      6E646578 
 1183              	.LASF4:
 1184 0252 6C6F6E67 		.ascii	"long int\000"
 1184      20696E74 
 1184      00
 1185              	.LASF33:
 1186 025b 433A5C55 		.ascii	"C:\\Users\\glenn\\OneDrive\\PSOC\\moisture_sensor_4"
 1186      73657273 
 1186      5C676C65 
 1186      6E6E5C4F 
 1186      6E654472 
 1187 0289 6D5C4D6F 		.ascii	"m\\Moisture_Sensor\\Moisture_Sensor.cydsn\000"
 1187      69737475 
 1187      72655F53 
 1187      656E736F 
 1187      725C4D6F 
 1188              	.LASF0:
 1189 02b1 7369676E 		.ascii	"signed char\000"
 1189      65642063 
 1189      68617200 
 1190              	.LASF25:
 1191 02bd 4932435F 		.ascii	"I2C_1_mstrRdBufSize\000"
 1191      315F6D73 
 1191      74725264 
 1191      42756653 
 1191      697A6500 
 1192              	.LASF34:
 1193 02d1 4932435F 		.ascii	"I2C_1_I2C_ISR\000"
 1193      315F4932 
 1193      435F4953 
 1193      5200
 1194              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
