ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CyLib.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	cydelayFreqHz
  18              		.data
  19              		.align	2
  20              		.type	cydelayFreqHz, %object
  21              		.size	cydelayFreqHz, 4
  22              	cydelayFreqHz:
  23 0000 005A6202 		.word	40000000
  24              		.global	cydelayFreqKhz
  25              		.align	2
  26              		.type	cydelayFreqKhz, %object
  27              		.size	cydelayFreqKhz, 4
  28              	cydelayFreqKhz:
  29 0004 409C0000 		.word	40000
  30              		.global	cydelayFreqMhz
  31              		.type	cydelayFreqMhz, %object
  32              		.size	cydelayFreqMhz, 1
  33              	cydelayFreqMhz:
  34 0008 28       		.byte	40
  35              		.global	cydelay32kMs
  36 0009 000000   		.align	2
  37              		.type	cydelay32kMs, %object
  38              		.size	cydelay32kMs, 4
  39              	cydelay32kMs:
  40 000c 0000204E 		.word	1310720000
  41              		.bss
  42              		.align	2
  43              	CySysTickCallbacks:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.global	CySysTickInitVar
  46              		.align	2
  47              		.type	CySysTickInitVar, %object
  48              		.size	CySysTickInitVar, 4
  49              	CySysTickInitVar:
  50 0014 00000000 		.space	4
  51              		.global	cyImoFreqMhz2Reg
  52              		.section	.rodata
  53              		.align	2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 2


  54              		.type	cyImoFreqMhz2Reg, %object
  55              		.size	cyImoFreqMhz2Reg, 46
  56              	cyImoFreqMhz2Reg:
  57 0000 03       		.byte	3
  58 0001 04       		.byte	4
  59 0002 05       		.byte	5
  60 0003 06       		.byte	6
  61 0004 07       		.byte	7
  62 0005 08       		.byte	8
  63 0006 09       		.byte	9
  64 0007 0A       		.byte	10
  65 0008 0B       		.byte	11
  66 0009 0C       		.byte	12
  67 000a 0E       		.byte	14
  68 000b 0F       		.byte	15
  69 000c 10       		.byte	16
  70 000d 11       		.byte	17
  71 000e 12       		.byte	18
  72 000f 13       		.byte	19
  73 0010 14       		.byte	20
  74 0011 15       		.byte	21
  75 0012 16       		.byte	22
  76 0013 17       		.byte	23
  77 0014 18       		.byte	24
  78 0015 19       		.byte	25
  79 0016 1B       		.byte	27
  80 0017 1C       		.byte	28
  81 0018 1D       		.byte	29
  82 0019 1E       		.byte	30
  83 001a 1F       		.byte	31
  84 001b 20       		.byte	32
  85 001c 21       		.byte	33
  86 001d 22       		.byte	34
  87 001e 23       		.byte	35
  88 001f 25       		.byte	37
  89 0020 26       		.byte	38
  90 0021 27       		.byte	39
  91 0022 28       		.byte	40
  92 0023 29       		.byte	41
  93 0024 2A       		.byte	42
  94 0025 2B       		.byte	43
  95 0026 2E       		.byte	46
  96 0027 2F       		.byte	47
  97 0028 30       		.byte	48
  98 0029 31       		.byte	49
  99 002a 32       		.byte	50
 100 002b 33       		.byte	51
 101 002c 34       		.byte	52
 102 002d 35       		.byte	53
 103              		.global	cyImoFreqMhz2DpllOffset
 104 002e 0000     		.align	2
 105              		.type	cyImoFreqMhz2DpllOffset, %object
 106              		.size	cyImoFreqMhz2DpllOffset, 23
 107              	cyImoFreqMhz2DpllOffset:
 108 0030 EE       		.byte	-18
 109 0031 DB       		.byte	-37
 110 0032 C9       		.byte	-55
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 3


 111 0033 B9       		.byte	-71
 112 0034 AA       		.byte	-86
 113 0035 9B       		.byte	-101
 114 0036 8E       		.byte	-114
 115 0037 82       		.byte	-126
 116 0038 76       		.byte	118
 117 0039 6B       		.byte	107
 118 003a 60       		.byte	96
 119 003b 56       		.byte	86
 120 003c 4D       		.byte	77
 121 003d 44       		.byte	68
 122 003e 3B       		.byte	59
 123 003f 33       		.byte	51
 124 0040 2C       		.byte	44
 125 0041 24       		.byte	36
 126 0042 1D       		.byte	29
 127 0043 17       		.byte	23
 128 0044 10       		.byte	16
 129 0045 0A       		.byte	10
 130 0046 04       		.byte	4
 131 0047 00       		.section	.text.CySysClkImoStart,"ax",%progbits
 132              		.align	2
 133              		.global	CySysClkImoStart
 134              		.code	16
 135              		.thumb_func
 136              		.type	CySysClkImoStart, %function
 137              	CySysClkImoStart:
 138              	.LFB1:
 139              		.file 1 "Generated_Source\\PSoC4\\CyLib.c"
   1:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:Generated_Source\PSoC4/CyLib.c **** * \version 5.40
   4:Generated_Source\PSoC4/CyLib.c **** *
   5:Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:Generated_Source\PSoC4/CyLib.c **** *
   8:Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:Generated_Source\PSoC4/CyLib.c **** *
  11:Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/CyLib.c **** 
  19:Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/CyLib.c **** 
  21:Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:Generated_Source\PSoC4/CyLib.c **** 
  26:Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 4


  29:Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
  31:Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:Generated_Source\PSoC4/CyLib.c **** 
  33:Generated_Source\PSoC4/CyLib.c **** 
  34:Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
  37:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  38:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  39:Generated_Source\PSoC4/CyLib.c **** #endif /* #if (CY_IP_SRSSV2 && CY_IP_PLL) */
  40:Generated_Source\PSoC4/CyLib.c **** 
  41:Generated_Source\PSoC4/CyLib.c **** 
  42:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  43:Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  44:Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  45:Generated_Source\PSoC4/CyLib.c **** *
  46:Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
  47:Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  48:Generated_Source\PSoC4/CyLib.c **** *
  49:Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  50:Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  51:Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  52:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  53:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  54:Generated_Source\PSoC4/CyLib.c **** 
  55:Generated_Source\PSoC4/CyLib.c **** 
  56:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
  57:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  58:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  59:Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  60:Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  61:Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  62:Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  63:Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  64:Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  65:Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  66:Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  67:Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  68:Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  69:Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  70:Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  71:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  72:Generated_Source\PSoC4/CyLib.c **** 
  73:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
  74:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between IMO frequency and WCO DPLL max offset steps */
  75:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2DpllOffset[CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_SIZE] = {
  76:Generated_Source\PSoC4/CyLib.c ****             /* 26 MHz */  238u, /* 27 MHz */  219u, /* 28 MHz */  201u, /* 29 MHz */  185u,
  77:Generated_Source\PSoC4/CyLib.c ****             /* 30 MHz */  170u, /* 31 MHz */  155u, /* 32 MHz */  142u, /* 33 MHz */  130u,
  78:Generated_Source\PSoC4/CyLib.c ****             /* 34 MHz */  118u, /* 35 MHz */  107u, /* 36 MHz */   96u, /* 37 MHz */  86u,
  79:Generated_Source\PSoC4/CyLib.c ****             /* 38 MHz */   77u, /* 39 MHz */   68u, /* 40 MHz */   59u, /* 41 MHz */  51u,
  80:Generated_Source\PSoC4/CyLib.c ****             /* 42 MHz */   44u, /* 43 MHz */   36u, /* 44 MHz */   29u, /* 45 MHz */  23u,
  81:Generated_Source\PSoC4/CyLib.c ****             /* 46 MHz */   16u, /* 47 MHz */   10u, /* 48 MHz */   4u };
  82:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
  83:Generated_Source\PSoC4/CyLib.c **** 
  84:Generated_Source\PSoC4/CyLib.c **** /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  85:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 5


  86:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
  87:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  88:Generated_Source\PSoC4/CyLib.c **** 
  89:Generated_Source\PSoC4/CyLib.c **** 
  90:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  91:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  92:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  93:Generated_Source\PSoC4/CyLib.c **** *
  94:Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  95:Generated_Source\PSoC4/CyLib.c **** *
  96:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
  97:Generated_Source\PSoC4/CyLib.c **** * this function will also enable WCO lock if selected in the Design Wide
  98:Generated_Source\PSoC4/CyLib.c **** * Resources tab.
  99:Generated_Source\PSoC4/CyLib.c **** *
 100:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L / devices, this function will also enable USB lock if selected
 101:Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
 102:Generated_Source\PSoC4/CyLib.c **** *
 103:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 104:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
 105:Generated_Source\PSoC4/CyLib.c **** {
 140              		.loc 1 105 0
 141              		.cfi_startproc
 142 0000 80B5     		push	{r7, lr}
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 00AF     		add	r7, sp, #0
 147              		.cfi_def_cfa_register 7
 106:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
 148              		.loc 1 106 0
 149 0004 044B     		ldr	r3, .L2
 150 0006 044A     		ldr	r2, .L2
 151 0008 1268     		ldr	r2, [r2]
 152 000a 8021     		mov	r1, #128
 153 000c 0906     		lsl	r1, r1, #24
 154 000e 0A43     		orr	r2, r1
 155 0010 1A60     		str	r2, [r3]
 107:Generated_Source\PSoC4/CyLib.c **** 
 108:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 109:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 110:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 111:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 112:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 113:Generated_Source\PSoC4/CyLib.c **** 
 114:Generated_Source\PSoC4/CyLib.c **** 
 115:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 116:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 117:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 118:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 119:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 120:Generated_Source\PSoC4/CyLib.c **** 
 121:Generated_Source\PSoC4/CyLib.c **** }
 156              		.loc 1 121 0
 157 0012 BD46     		mov	sp, r7
 158              		@ sp needed
 159 0014 80BD     		pop	{r7, pc}
 160              	.L3:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 6


 161 0016 C046     		.align	2
 162              	.L2:
 163 0018 08010B40 		.word	1074462984
 164              		.cfi_endproc
 165              	.LFE1:
 166              		.size	CySysClkImoStart, .-CySysClkImoStart
 167              		.section	.text.CySysClkImoStop,"ax",%progbits
 168              		.align	2
 169              		.global	CySysClkImoStop
 170              		.code	16
 171              		.thumb_func
 172              		.type	CySysClkImoStop, %function
 173              	CySysClkImoStop:
 174              	.LFB2:
 122:Generated_Source\PSoC4/CyLib.c **** 
 123:Generated_Source\PSoC4/CyLib.c **** 
 124:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 125:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
 126:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 127:Generated_Source\PSoC4/CyLib.c **** *
 128:Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 129:Generated_Source\PSoC4/CyLib.c **** *
 130:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC 4400 devices,
 131:Generated_Source\PSoC4/CyLib.c **** * this function will also disable WCO lock.
 132:Generated_Source\PSoC4/CyLib.c **** *
 133:Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 134:Generated_Source\PSoC4/CyLib.c **** *
 135:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 136:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 137:Generated_Source\PSoC4/CyLib.c **** {
 175              		.loc 1 137 0
 176              		.cfi_startproc
 177 0000 80B5     		push	{r7, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 00AF     		add	r7, sp, #0
 182              		.cfi_def_cfa_register 7
 138:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 139:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 183              		.loc 1 139 0
 184 0004 FFF7FEFF 		bl	CySysClkImoDisableWcoLock
 140:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 141:Generated_Source\PSoC4/CyLib.c **** 
 142:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 143:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 144:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 145:Generated_Source\PSoC4/CyLib.c **** 
 146:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
 185              		.loc 1 146 0
 186 0008 034B     		ldr	r3, .L5
 187 000a 034A     		ldr	r2, .L5
 188 000c 1268     		ldr	r2, [r2]
 189 000e 5200     		lsl	r2, r2, #1
 190 0010 5208     		lsr	r2, r2, #1
 191 0012 1A60     		str	r2, [r3]
 147:Generated_Source\PSoC4/CyLib.c **** }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 7


 192              		.loc 1 147 0
 193 0014 BD46     		mov	sp, r7
 194              		@ sp needed
 195 0016 80BD     		pop	{r7, pc}
 196              	.L6:
 197              		.align	2
 198              	.L5:
 199 0018 08010B40 		.word	1074462984
 200              		.cfi_endproc
 201              	.LFE2:
 202              		.size	CySysClkImoStop, .-CySysClkImoStop
 203              		.section	.text.CySysClkImoEnableWcoLock,"ax",%progbits
 204              		.align	2
 205              		.global	CySysClkImoEnableWcoLock
 206              		.code	16
 207              		.thumb_func
 208              		.type	CySysClkImoEnableWcoLock, %function
 209              	CySysClkImoEnableWcoLock:
 210              	.LFB3:
 148:Generated_Source\PSoC4/CyLib.c **** 
 149:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 150:Generated_Source\PSoC4/CyLib.c **** 
 151:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 152:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 153:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 154:Generated_Source\PSoC4/CyLib.c ****     *
 155:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 156:Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 157:Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 158:Generated_Source\PSoC4/CyLib.c ****     *
 159:Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 160:Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 161:Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 162:Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 163:Generated_Source\PSoC4/CyLib.c ****     * should be called.
 164:Generated_Source\PSoC4/CyLib.c ****     *
 165:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 166:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 167:Generated_Source\PSoC4/CyLib.c ****     *
 168:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 169:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 170:Generated_Source\PSoC4/CyLib.c ****     *
 171:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 172:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 173:Generated_Source\PSoC4/CyLib.c ****     {
 211              		.loc 1 173 0
 212              		.cfi_startproc
 213 0000 90B5     		push	{r4, r7, lr}
 214              		.cfi_def_cfa_offset 12
 215              		.cfi_offset 4, -12
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 87B0     		sub	sp, sp, #28
 219              		.cfi_def_cfa_offset 40
 220 0004 00AF     		add	r7, sp, #0
 221              		.cfi_def_cfa_register 7
 174:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 8


 175:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 176:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 177:Generated_Source\PSoC4/CyLib.c **** 
 178:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 179:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 180:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 181:Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 222              		.loc 1 181 0
 223 0006 0023     		mov	r3, #0
 224 0008 BB60     		str	r3, [r7, #8]
 182:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 183:Generated_Source\PSoC4/CyLib.c **** 
 184:Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 225              		.loc 1 184 0
 226 000a FFF7FEFF 		bl	CySysClkWcoEnabled
 227 000e 031E     		sub	r3, r0, #0
 228 0010 00D1     		bne	.LCB79
 229 0012 7FE0     		b	.L7	@long jump
 230              	.LCB79:
 185:Generated_Source\PSoC4/CyLib.c ****         {
 186:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 231              		.loc 1 186 0
 232 0014 FC1D     		add	r4, r7, #7
 233 0016 FFF7FEFF 		bl	CyEnterCriticalSection
 234 001a 031C     		mov	r3, r0
 235 001c 2370     		strb	r3, [r4]
 187:Generated_Source\PSoC4/CyLib.c **** 
 188:Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 189:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 190:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 191:Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 192:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 193:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 194:Generated_Source\PSoC4/CyLib.c **** 
 195:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 196:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 197:Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 236              		.loc 1 197 0
 237 001e 0323     		mov	r3, #3
 238 0020 3B61     		str	r3, [r7, #16]
 198:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 239              		.loc 1 198 0
 240 0022 0023     		mov	r3, #0
 241 0024 7B61     		str	r3, [r7, #20]
 242 0026 12E0     		b	.L9
 243              	.L12:
 199:Generated_Source\PSoC4/CyLib.c ****                 {
 200:Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 244              		.loc 1 200 0
 245 0028 3C4B     		ldr	r3, .L17
 246 002a 1B68     		ldr	r3, [r3]
 247 002c DBB2     		uxtb	r3, r3
 248 002e 1A1C     		mov	r2, r3
 249 0030 3F23     		mov	r3, #63
 250 0032 1340     		and	r3, r2
 251 0034 3A49     		ldr	r1, .L17+4
 252 0036 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 9


 253 0038 8A18     		add	r2, r1, r2
 254 003a 1278     		ldrb	r2, [r2]
 255 003c 9342     		cmp	r3, r2
 256 003e 03D1     		bne	.L10
 201:Generated_Source\PSoC4/CyLib.c ****                     {
 202:Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 257              		.loc 1 202 0
 258 0040 7B69     		ldr	r3, [r7, #20]
 259 0042 0333     		add	r3, r3, #3
 260 0044 3B61     		str	r3, [r7, #16]
 203:Generated_Source\PSoC4/CyLib.c ****                         break;
 261              		.loc 1 203 0
 262 0046 05E0     		b	.L11
 263              	.L10:
 198:Generated_Source\PSoC4/CyLib.c ****                 {
 264              		.loc 1 198 0 discriminator 2
 265 0048 7B69     		ldr	r3, [r7, #20]
 266 004a 0133     		add	r3, r3, #1
 267 004c 7B61     		str	r3, [r7, #20]
 268              	.L9:
 198:Generated_Source\PSoC4/CyLib.c ****                 {
 269              		.loc 1 198 0 is_stmt 0 discriminator 1
 270 004e 7B69     		ldr	r3, [r7, #20]
 271 0050 2D2B     		cmp	r3, #45
 272 0052 E9D9     		bls	.L12
 273              	.L11:
 204:Generated_Source\PSoC4/CyLib.c ****                     }
 205:Generated_Source\PSoC4/CyLib.c ****                 }
 206:Generated_Source\PSoC4/CyLib.c ****             #else
 207:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 208:Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 209:Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 210:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 211:Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 212:Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 213:Generated_Source\PSoC4/CyLib.c ****                 #else
 214:Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 215:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
 216:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 217:Generated_Source\PSoC4/CyLib.c **** 
 218:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 219:Generated_Source\PSoC4/CyLib.c **** 
 220:Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 221:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 222:Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 274              		.loc 1 222 0 is_stmt 1
 275 0054 334B     		ldr	r3, .L17+8
 276 0056 1B68     		ldr	r3, [r3]
 277 0058 1F22     		mov	r2, #31
 278 005a 1340     		and	r3, r2
 279 005c 07D1     		bne	.L13
 223:Generated_Source\PSoC4/CyLib.c ****                 {
 224:Generated_Source\PSoC4/CyLib.c **** 			         CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 280              		.loc 1 224 0
 281 005e 314B     		ldr	r3, .L17+8
 282 0060 304A     		ldr	r2, .L17+8
 283 0062 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 10


 284 0064 1F21     		mov	r1, #31
 285 0066 8A43     		bic	r2, r1
 286 0068 0C21     		mov	r1, #12
 287 006a 0A43     		orr	r2, r1
 288 006c 1A60     		str	r2, [r3]
 289              	.L13:
 225:Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 226:Generated_Source\PSoC4/CyLib.c ****                 }
 227:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 228:Generated_Source\PSoC4/CyLib.c **** 
 229:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
 290              		.loc 1 229 0
 291 006e 2E4B     		ldr	r3, .L17+12
 292 0070 1B68     		ldr	r3, [r3]
 293 0072 2E4A     		ldr	r2, .L17+16
 294 0074 1340     		and	r3, r2
 295 0076 FB60     		str	r3, [r7, #12]
 230:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 231:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 232:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 233:Generated_Source\PSoC4/CyLib.c **** 
 234:Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 235:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 296              		.loc 1 235 0
 297 0078 3B69     		ldr	r3, [r7, #16]
 298 007a 2D4A     		ldr	r2, .L17+20
 299 007c 5343     		mul	r3, r2
 300 007e 8022     		mov	r2, #128
 301 0080 D201     		lsl	r2, r2, #7
 302 0082 9446     		mov	ip, r2
 303 0084 6344     		add	r3, r3, ip
 304 0086 DB0B     		lsr	r3, r3, #15
 305 0088 013B     		sub	r3, r3, #1
 306 008a 5B05     		lsl	r3, r3, #21
 307 008c 5B0D     		lsr	r3, r3, #21
 308 008e FA68     		ldr	r2, [r7, #12]
 309 0090 1343     		orr	r3, r2
 310 0092 FB60     		str	r3, [r7, #12]
 236:Generated_Source\PSoC4/CyLib.c **** 
 237:Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 238:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 311              		.loc 1 238 0
 312 0094 FB68     		ldr	r3, [r7, #12]
 313 0096 A022     		mov	r2, #160
 314 0098 5203     		lsl	r2, r2, #13
 315 009a 1343     		orr	r3, r2
 316 009c FB60     		str	r3, [r7, #12]
 239:Generated_Source\PSoC4/CyLib.c **** 
 240:Generated_Source\PSoC4/CyLib.c ****             /* Set maximum allowed IMO offset */
 241:Generated_Source\PSoC4/CyLib.c ****             if (freq < CY_SYS_CLK_IMO_FREQ_WCO_DPLL_SAFE_POINT)
 317              		.loc 1 241 0
 318 009e 3B69     		ldr	r3, [r7, #16]
 319 00a0 192B     		cmp	r3, #25
 320 00a2 05D8     		bhi	.L14
 242:Generated_Source\PSoC4/CyLib.c ****             {
 243:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << CY_SYS_CLK_WCO_CONFIG_DPLL_LF
 321              		.loc 1 243 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 11


 322 00a4 FB68     		ldr	r3, [r7, #12]
 323 00a6 FF22     		mov	r2, #255
 324 00a8 9205     		lsl	r2, r2, #22
 325 00aa 1343     		orr	r3, r2
 326 00ac FB60     		str	r3, [r7, #12]
 327 00ae 16E0     		b	.L15
 328              	.L14:
 244:Generated_Source\PSoC4/CyLib.c ****             }
 245:Generated_Source\PSoC4/CyLib.c ****             else
 246:Generated_Source\PSoC4/CyLib.c ****             {
 247:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) +
 329              		.loc 1 247 0
 330 00b0 3B69     		ldr	r3, [r7, #16]
 331 00b2 204A     		ldr	r2, .L17+24
 332 00b4 9446     		mov	ip, r2
 333 00b6 6344     		add	r3, r3, ip
 334 00b8 1B78     		ldrb	r3, [r3]
 335 00ba DBB2     		uxtb	r3, r3
 336 00bc 191C     		mov	r1, r3
 248:Generated_Source\PSoC4/CyLib.c ****                     cyImoFreqMhz2DpllOffset[freq - CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET];
 337              		.loc 1 248 0
 338 00be 3B69     		ldr	r3, [r7, #16]
 339 00c0 1A3B     		sub	r3, r3, #26
 340 00c2 1D4A     		ldr	r2, .L17+28
 341 00c4 D35C     		ldrb	r3, [r2, r3]
 247:Generated_Source\PSoC4/CyLib.c ****                     cyImoFreqMhz2DpllOffset[freq - CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET];
 342              		.loc 1 247 0
 343 00c6 CB18     		add	r3, r1, r3
 344 00c8 BB60     		str	r3, [r7, #8]
 249:Generated_Source\PSoC4/CyLib.c **** 
 250:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (lfLimit > CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX) ?
 345              		.loc 1 250 0
 346 00ca BB68     		ldr	r3, [r7, #8]
 347 00cc FF2B     		cmp	r3, #255
 348 00ce 00D9     		bls	.L16
 349 00d0 FF23     		mov	r3, #255
 350              	.L16:
 351 00d2 BB60     		str	r3, [r7, #8]
 251:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX : lfLimit;
 252:Generated_Source\PSoC4/CyLib.c **** 
 253:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT);
 352              		.loc 1 253 0
 353 00d4 BB68     		ldr	r3, [r7, #8]
 354 00d6 9B05     		lsl	r3, r3, #22
 355 00d8 FA68     		ldr	r2, [r7, #12]
 356 00da 1343     		orr	r3, r2
 357 00dc FB60     		str	r3, [r7, #12]
 358              	.L15:
 254:Generated_Source\PSoC4/CyLib.c ****             }
 255:Generated_Source\PSoC4/CyLib.c **** 
 256:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 359              		.loc 1 256 0
 360 00de 124B     		ldr	r3, .L17+12
 361 00e0 FA68     		ldr	r2, [r7, #12]
 362 00e2 1A60     		str	r2, [r3]
 257:Generated_Source\PSoC4/CyLib.c **** 
 258:Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 12


 363              		.loc 1 258 0
 364 00e4 154B     		ldr	r3, .L17+32
 365 00e6 1B68     		ldr	r3, [r3]
 366 00e8 3B60     		str	r3, [r7]
 259:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 367              		.loc 1 259 0
 368 00ea 3020     		mov	r0, #48
 369 00ec FFF7FEFF 		bl	CySysFlashSetWaitCycles
 260:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 370              		.loc 1 260 0
 371 00f0 134B     		ldr	r3, .L17+36
 372 00f2 134A     		ldr	r2, .L17+36
 373 00f4 1268     		ldr	r2, [r2]
 374 00f6 8021     		mov	r1, #128
 375 00f8 C905     		lsl	r1, r1, #23
 376 00fa 0A43     		orr	r2, r1
 377 00fc 1A60     		str	r2, [r3]
 261:Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_IMO_TIMEOUT_MS);
 378              		.loc 1 261 0
 379 00fe 1420     		mov	r0, #20
 380 0100 FFF7FEFF 		bl	CyDelay
 262:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
 381              		.loc 1 262 0
 382 0104 0D4B     		ldr	r3, .L17+32
 383 0106 3A68     		ldr	r2, [r7]
 384 0108 1A60     		str	r2, [r3]
 263:Generated_Source\PSoC4/CyLib.c **** 
 264:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 385              		.loc 1 264 0
 386 010a FB1D     		add	r3, r7, #7
 387 010c 1B78     		ldrb	r3, [r3]
 388 010e 181C     		mov	r0, r3
 389 0110 FFF7FEFF 		bl	CyExitCriticalSection
 390              	.L7:
 265:Generated_Source\PSoC4/CyLib.c ****         }
 266:Generated_Source\PSoC4/CyLib.c ****     }
 391              		.loc 1 266 0
 392 0114 BD46     		mov	sp, r7
 393 0116 07B0     		add	sp, sp, #28
 394              		@ sp needed
 395 0118 90BD     		pop	{r4, r7, pc}
 396              	.L18:
 397 011a C046     		.align	2
 398              	.L17:
 399 011c 2CFF0B40 		.word	1074528044
 400 0120 00000000 		.word	cyImoFreqMhz2Reg
 401 0124 34FF0B40 		.word	1074528052
 402 0128 08002240 		.word	1075970056
 403 012c 00F800C0 		.word	-1073678336
 404 0130 40420F00 		.word	1000000
 405 0134 CDF1FF0F 		.word	268431821
 406 0138 00000000 		.word	cyImoFreqMhz2DpllOffset
 407 013c 30001040 		.word	1074790448
 408 0140 00002240 		.word	1075970048
 409              		.cfi_endproc
 410              	.LFE3:
 411              		.size	CySysClkImoEnableWcoLock, .-CySysClkImoEnableWcoLock
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 13


 412              		.section	.text.CySysClkImoDisableWcoLock,"ax",%progbits
 413              		.align	2
 414              		.global	CySysClkImoDisableWcoLock
 415              		.code	16
 416              		.thumb_func
 417              		.type	CySysClkImoDisableWcoLock, %function
 418              	CySysClkImoDisableWcoLock:
 419              	.LFB4:
 267:Generated_Source\PSoC4/CyLib.c **** 
 268:Generated_Source\PSoC4/CyLib.c **** 
 269:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 270:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 271:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 272:Generated_Source\PSoC4/CyLib.c ****     *
 273:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 274:Generated_Source\PSoC4/CyLib.c ****     *
 275:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 276:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 277:Generated_Source\PSoC4/CyLib.c ****     *
 278:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 279:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 280:Generated_Source\PSoC4/CyLib.c ****     *
 281:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 282:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 283:Generated_Source\PSoC4/CyLib.c ****     {
 420              		.loc 1 283 0
 421              		.cfi_startproc
 422 0000 80B5     		push	{r7, lr}
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 7, -8
 425              		.cfi_offset 14, -4
 426 0002 00AF     		add	r7, sp, #0
 427              		.cfi_def_cfa_register 7
 284:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 428              		.loc 1 284 0
 429 0004 034B     		ldr	r3, .L20
 430 0006 034A     		ldr	r2, .L20
 431 0008 1268     		ldr	r2, [r2]
 432 000a 0349     		ldr	r1, .L20+4
 433 000c 0A40     		and	r2, r1
 434 000e 1A60     		str	r2, [r3]
 285:Generated_Source\PSoC4/CyLib.c ****     }
 435              		.loc 1 285 0
 436 0010 BD46     		mov	sp, r7
 437              		@ sp needed
 438 0012 80BD     		pop	{r7, pc}
 439              	.L21:
 440              		.align	2
 441              	.L20:
 442 0014 00002240 		.word	1075970048
 443 0018 FFFFFFBF 		.word	-1073741825
 444              		.cfi_endproc
 445              	.LFE4:
 446              		.size	CySysClkImoDisableWcoLock, .-CySysClkImoDisableWcoLock
 447              		.section	.text.CySysClkImoGetWcoLock,"ax",%progbits
 448              		.align	2
 449              		.global	CySysClkImoGetWcoLock
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 14


 450              		.code	16
 451              		.thumb_func
 452              		.type	CySysClkImoGetWcoLock, %function
 453              	CySysClkImoGetWcoLock:
 454              	.LFB5:
 286:Generated_Source\PSoC4/CyLib.c **** 
 287:Generated_Source\PSoC4/CyLib.c **** 
 288:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 289:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 290:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 291:Generated_Source\PSoC4/CyLib.c ****     *
 292:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 293:Generated_Source\PSoC4/CyLib.c ****     *
 294:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 295:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC 4400 / PSoC 4200L.
 296:Generated_Source\PSoC4/CyLib.c ****     *
 297:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 298:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 299:Generated_Source\PSoC4/CyLib.c ****     *
 300:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 301:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 302:Generated_Source\PSoC4/CyLib.c ****     {
 455              		.loc 1 302 0
 456              		.cfi_startproc
 457 0000 80B5     		push	{r7, lr}
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 7, -8
 460              		.cfi_offset 14, -4
 461 0002 00AF     		add	r7, sp, #0
 462              		.cfi_def_cfa_register 7
 303:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 463              		.loc 1 303 0
 464 0004 054B     		ldr	r3, .L26
 465 0006 1A68     		ldr	r2, [r3]
 466 0008 8023     		mov	r3, #128
 467 000a DB05     		lsl	r3, r3, #23
 468 000c 1340     		and	r3, r2
 304:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 469              		.loc 1 304 0
 470 000e 01D0     		beq	.L23
 471              		.loc 1 304 0 is_stmt 0 discriminator 1
 472 0010 0123     		mov	r3, #1
 473 0012 00E0     		b	.L24
 474              	.L23:
 475              		.loc 1 304 0 discriminator 2
 476 0014 0023     		mov	r3, #0
 477              	.L24:
 305:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 306:Generated_Source\PSoC4/CyLib.c ****     }
 478              		.loc 1 306 0 is_stmt 1
 479 0016 181C     		mov	r0, r3
 480 0018 BD46     		mov	sp, r7
 481              		@ sp needed
 482 001a 80BD     		pop	{r7, pc}
 483              	.L27:
 484              		.align	2
 485              	.L26:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 15


 486 001c 00002240 		.word	1075970048
 487              		.cfi_endproc
 488              	.LFE5:
 489              		.size	CySysClkImoGetWcoLock, .-CySysClkImoGetWcoLock
 490              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
 491              		.align	2
 492              		.global	CySysClkWriteHfclkDirect
 493              		.code	16
 494              		.thumb_func
 495              		.type	CySysClkWriteHfclkDirect, %function
 496              	CySysClkWriteHfclkDirect:
 497              	.LFB6:
 307:Generated_Source\PSoC4/CyLib.c **** 
 308:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 309:Generated_Source\PSoC4/CyLib.c **** 
 310:Generated_Source\PSoC4/CyLib.c **** 
 311:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 312:Generated_Source\PSoC4/CyLib.c **** 
 313:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 314:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 315:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 316:Generated_Source\PSoC4/CyLib.c ****     *
 317:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 318:Generated_Source\PSoC4/CyLib.c ****     *
 319:Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
 320:Generated_Source\PSoC4/CyLib.c ****     *
 321:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 322:Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 323:Generated_Source\PSoC4/CyLib.c ****     *
 324:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 325:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 326:Generated_Source\PSoC4/CyLib.c ****     *
 327:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 328:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 329:Generated_Source\PSoC4/CyLib.c ****     {
 330:Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 331:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 332:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 333:Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
 334:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 335:Generated_Source\PSoC4/CyLib.c **** 
 336:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 337:Generated_Source\PSoC4/CyLib.c ****             /* Save CY_SYS_CLK_IMO_TRIM4_REG and set IMO gain for USB lock */
 338:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_MASK;
 339:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 340:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 341:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 342:Generated_Source\PSoC4/CyLib.c **** 
 343:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 344:Generated_Source\PSoC4/CyLib.c ****     }
 345:Generated_Source\PSoC4/CyLib.c **** 
 346:Generated_Source\PSoC4/CyLib.c **** 
 347:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 348:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 349:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 350:Generated_Source\PSoC4/CyLib.c ****     *
 351:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 16


 352:Generated_Source\PSoC4/CyLib.c ****     *
 353:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 354:Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 355:Generated_Source\PSoC4/CyLib.c ****     *
 356:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 357:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 358:Generated_Source\PSoC4/CyLib.c ****     *
 359:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 360:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 361:Generated_Source\PSoC4/CyLib.c ****     {
 362:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 363:Generated_Source\PSoC4/CyLib.c **** 
 364:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 365:Generated_Source\PSoC4/CyLib.c ****             /* Restore CY_SYS_CLK_IMO_TRIM4_REG */
 366:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 367:Generated_Source\PSoC4/CyLib.c ****                                     CySysClkImoTrim4;
 368:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 369:Generated_Source\PSoC4/CyLib.c ****     }
 370:Generated_Source\PSoC4/CyLib.c **** 
 371:Generated_Source\PSoC4/CyLib.c **** 
 372:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 373:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 374:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 375:Generated_Source\PSoC4/CyLib.c ****     *
 376:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
 377:Generated_Source\PSoC4/CyLib.c ****     *
 378:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 379:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 380:Generated_Source\PSoC4/CyLib.c ****     *
 381:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 382:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 383:Generated_Source\PSoC4/CyLib.c ****     *
 384:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 385:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 386:Generated_Source\PSoC4/CyLib.c ****     {
 387:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 388:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 389:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 390:Generated_Source\PSoC4/CyLib.c ****     }
 391:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 392:Generated_Source\PSoC4/CyLib.c **** 
 393:Generated_Source\PSoC4/CyLib.c **** 
 394:Generated_Source\PSoC4/CyLib.c **** 
 395:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 396:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 397:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 398:Generated_Source\PSoC4/CyLib.c **** *
 399:Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
 400:Generated_Source\PSoC4/CyLib.c **** *
 401:Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 402:Generated_Source\PSoC4/CyLib.c **** *
 403:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 404:Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 405:Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 406:Generated_Source\PSoC4/CyLib.c **** *
 407:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 408:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 17


 409:Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 410:Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
 411:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 412:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 413:Generated_Source\PSoC4/CyLib.c **** *
 414:Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 415:Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 416:Generated_Source\PSoC4/CyLib.c **** *
 417:Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 418:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 419:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 420:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 421:Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L.
 422:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L.
 423:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 424:Generated_Source\PSoC4/CyLib.c **** *
 425:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 426:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 427:Generated_Source\PSoC4/CyLib.c **** {
 498              		.loc 1 427 0
 499              		.cfi_startproc
 500 0000 90B5     		push	{r4, r7, lr}
 501              		.cfi_def_cfa_offset 12
 502              		.cfi_offset 4, -12
 503              		.cfi_offset 7, -8
 504              		.cfi_offset 14, -4
 505 0002 85B0     		sub	sp, sp, #20
 506              		.cfi_def_cfa_offset 32
 507 0004 00AF     		add	r7, sp, #0
 508              		.cfi_def_cfa_register 7
 509 0006 7860     		str	r0, [r7, #4]
 428:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 429:Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 430:Generated_Source\PSoC4/CyLib.c **** 
 431:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 510              		.loc 1 431 0
 511 0008 0F23     		mov	r3, #15
 512 000a FC18     		add	r4, r7, r3
 513 000c FFF7FEFF 		bl	CyEnterCriticalSection
 514 0010 031C     		mov	r3, r0
 515 0012 2370     		strb	r3, [r4]
 432:Generated_Source\PSoC4/CyLib.c **** 
 433:Generated_Source\PSoC4/CyLib.c **** 
 434:Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 516              		.loc 1 434 0
 517 0014 0B4B     		ldr	r3, .L29
 518 0016 1B68     		ldr	r3, [r3]
 519 0018 0722     		mov	r2, #7
 520 001a 9343     		bic	r3, r2
 521 001c BB60     		str	r3, [r7, #8]
 435:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 436:Generated_Source\PSoC4/CyLib.c **** 
 437:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 438:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 439:Generated_Source\PSoC4/CyLib.c ****     {
 440:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 441:Generated_Source\PSoC4/CyLib.c ****     }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 18


 442:Generated_Source\PSoC4/CyLib.c ****     else
 443:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 444:Generated_Source\PSoC4/CyLib.c ****     {
 445:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 522              		.loc 1 445 0
 523 001e 7B68     		ldr	r3, [r7, #4]
 524 0020 0722     		mov	r2, #7
 525 0022 1340     		and	r3, r2
 526 0024 BA68     		ldr	r2, [r7, #8]
 527 0026 1343     		orr	r3, r2
 528 0028 BB60     		str	r3, [r7, #8]
 446:Generated_Source\PSoC4/CyLib.c ****     }
 447:Generated_Source\PSoC4/CyLib.c **** 
 448:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 529              		.loc 1 448 0
 530 002a 064B     		ldr	r3, .L29
 531 002c BA68     		ldr	r2, [r7, #8]
 532 002e 1A60     		str	r2, [r3]
 449:Generated_Source\PSoC4/CyLib.c **** 
 450:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 533              		.loc 1 450 0
 534 0030 0F23     		mov	r3, #15
 535 0032 FB18     		add	r3, r7, r3
 536 0034 1B78     		ldrb	r3, [r3]
 537 0036 181C     		mov	r0, r3
 538 0038 FFF7FEFF 		bl	CyExitCriticalSection
 451:Generated_Source\PSoC4/CyLib.c **** }
 539              		.loc 1 451 0
 540 003c BD46     		mov	sp, r7
 541 003e 05B0     		add	sp, sp, #20
 542              		@ sp needed
 543 0040 90BD     		pop	{r4, r7, pc}
 544              	.L30:
 545 0042 C046     		.align	2
 546              	.L29:
 547 0044 00010B40 		.word	1074462976
 548              		.cfi_endproc
 549              	.LFE6:
 550              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 551              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 552              		.align	2
 553              		.global	CySysClkGetSysclkSource
 554              		.code	16
 555              		.thumb_func
 556              		.type	CySysClkGetSysclkSource, %function
 557              	CySysClkGetSysclkSource:
 558              	.LFB7:
 452:Generated_Source\PSoC4/CyLib.c **** 
 453:Generated_Source\PSoC4/CyLib.c **** 
 454:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 455:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 456:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 457:Generated_Source\PSoC4/CyLib.c **** *
 458:Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
 459:Generated_Source\PSoC4/CyLib.c **** *
 460:Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 461:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 19


 462:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 463:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 464:Generated_Source\PSoC4/CyLib.c **** {
 559              		.loc 1 464 0
 560              		.cfi_startproc
 561 0000 90B5     		push	{r4, r7, lr}
 562              		.cfi_def_cfa_offset 12
 563              		.cfi_offset 4, -12
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 83B0     		sub	sp, sp, #12
 567              		.cfi_def_cfa_offset 24
 568 0004 00AF     		add	r7, sp, #0
 569              		.cfi_def_cfa_register 7
 465:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 466:Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 467:Generated_Source\PSoC4/CyLib.c **** 
 468:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 570              		.loc 1 468 0
 571 0006 FC1D     		add	r4, r7, #7
 572 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 573 000c 031C     		mov	r3, r0
 574 000e 2370     		strb	r3, [r4]
 469:Generated_Source\PSoC4/CyLib.c **** 
 470:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 471:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 472:Generated_Source\PSoC4/CyLib.c ****     {
 473:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 474:Generated_Source\PSoC4/CyLib.c ****     }
 475:Generated_Source\PSoC4/CyLib.c ****     else
 476:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 477:Generated_Source\PSoC4/CyLib.c ****     {
 478:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 575              		.loc 1 478 0
 576 0010 074B     		ldr	r3, .L33
 577 0012 1B68     		ldr	r3, [r3]
 578 0014 0722     		mov	r2, #7
 579 0016 1340     		and	r3, r2
 580 0018 3B60     		str	r3, [r7]
 479:Generated_Source\PSoC4/CyLib.c ****     }
 480:Generated_Source\PSoC4/CyLib.c **** 
 481:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 581              		.loc 1 481 0
 582 001a FB1D     		add	r3, r7, #7
 583 001c 1B78     		ldrb	r3, [r3]
 584 001e 181C     		mov	r0, r3
 585 0020 FFF7FEFF 		bl	CyExitCriticalSection
 482:Generated_Source\PSoC4/CyLib.c **** 
 483:Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 586              		.loc 1 483 0
 587 0024 3B68     		ldr	r3, [r7]
 484:Generated_Source\PSoC4/CyLib.c **** }
 588              		.loc 1 484 0
 589 0026 181C     		mov	r0, r3
 590 0028 BD46     		mov	sp, r7
 591 002a 03B0     		add	sp, sp, #12
 592              		@ sp needed
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 20


 593 002c 90BD     		pop	{r4, r7, pc}
 594              	.L34:
 595 002e C046     		.align	2
 596              	.L33:
 597 0030 00010B40 		.word	1074462976
 598              		.cfi_endproc
 599              	.LFE7:
 600              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 601              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 602              		.align	2
 603              		.global	CySysClkWriteSysclkDiv
 604              		.code	16
 605              		.thumb_func
 606              		.type	CySysClkWriteSysclkDiv, %function
 607              	CySysClkWriteSysclkDiv:
 608              	.LFB8:
 485:Generated_Source\PSoC4/CyLib.c **** 
 486:Generated_Source\PSoC4/CyLib.c **** 
 487:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 488:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 489:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 490:Generated_Source\PSoC4/CyLib.c **** *
 491:Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 492:Generated_Source\PSoC4/CyLib.c **** *
 493:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 494:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 495:Generated_Source\PSoC4/CyLib.c **** *
 496:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 497:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 498:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 499:Generated_Source\PSoC4/CyLib.c **** *
 500:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 501:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 502:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 503:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 504:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 505:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 506:Generated_Source\PSoC4/CyLib.c **** *
 507:Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 508:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 509:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 510:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 511:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 512:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 513:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
 514:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 515:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 516:Generated_Source\PSoC4/CyLib.c **** *
 517:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 518:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 519:Generated_Source\PSoC4/CyLib.c **** {
 609              		.loc 1 519 0
 610              		.cfi_startproc
 611 0000 90B5     		push	{r4, r7, lr}
 612              		.cfi_def_cfa_offset 12
 613              		.cfi_offset 4, -12
 614              		.cfi_offset 7, -8
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 21


 615              		.cfi_offset 14, -4
 616 0002 85B0     		sub	sp, sp, #20
 617              		.cfi_def_cfa_offset 32
 618 0004 00AF     		add	r7, sp, #0
 619              		.cfi_def_cfa_register 7
 620 0006 7860     		str	r0, [r7, #4]
 520:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 521:Generated_Source\PSoC4/CyLib.c **** 
 522:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 621              		.loc 1 522 0
 622 0008 0F23     		mov	r3, #15
 623 000a FC18     		add	r4, r7, r3
 624 000c FFF7FEFF 		bl	CyEnterCriticalSection
 625 0010 031C     		mov	r3, r0
 626 0012 2370     		strb	r3, [r4]
 523:Generated_Source\PSoC4/CyLib.c **** 
 524:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 627              		.loc 1 524 0
 628 0014 094B     		ldr	r3, .L36
 629 0016 7A68     		ldr	r2, [r7, #4]
 630 0018 0721     		mov	r1, #7
 631 001a 0A40     		and	r2, r1
 632 001c D104     		lsl	r1, r2, #19
 525:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 526:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 633              		.loc 1 526 0
 634 001e 074A     		ldr	r2, .L36
 635 0020 1268     		ldr	r2, [r2]
 636 0022 0748     		ldr	r0, .L36+4
 637 0024 0240     		and	r2, r0
 525:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 638              		.loc 1 525 0
 639 0026 0A43     		orr	r2, r1
 524:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 640              		.loc 1 524 0
 641 0028 1A60     		str	r2, [r3]
 527:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 528:Generated_Source\PSoC4/CyLib.c **** 
 529:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 642              		.loc 1 529 0
 643 002a 0F23     		mov	r3, #15
 644 002c FB18     		add	r3, r7, r3
 645 002e 1B78     		ldrb	r3, [r3]
 646 0030 181C     		mov	r0, r3
 647 0032 FFF7FEFF 		bl	CyExitCriticalSection
 530:Generated_Source\PSoC4/CyLib.c **** }
 648              		.loc 1 530 0
 649 0036 BD46     		mov	sp, r7
 650 0038 05B0     		add	sp, sp, #20
 651              		@ sp needed
 652 003a 90BD     		pop	{r4, r7, pc}
 653              	.L37:
 654              		.align	2
 655              	.L36:
 656 003c 00010B40 		.word	1074462976
 657 0040 FFFFC7FF 		.word	-3670017
 658              		.cfi_endproc
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 22


 659              	.LFE8:
 660              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 661              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 662              		.align	2
 663              		.global	CySysClkWriteImoFreq
 664              		.code	16
 665              		.thumb_func
 666              		.type	CySysClkWriteImoFreq, %function
 667              	CySysClkWriteImoFreq:
 668              	.LFB9:
 531:Generated_Source\PSoC4/CyLib.c **** 
 532:Generated_Source\PSoC4/CyLib.c **** 
 533:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 534:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 535:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 536:Generated_Source\PSoC4/CyLib.c **** *
 537:Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 538:Generated_Source\PSoC4/CyLib.c **** *
 539:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 540:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 541:Generated_Source\PSoC4/CyLib.c **** *
 542:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 543:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 544:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 545:Generated_Source\PSoC4/CyLib.c **** *
 546:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 547:Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 548:Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 549:Generated_Source\PSoC4/CyLib.c **** *
 550:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
 551:Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 552:Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 553:Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 554:Generated_Source\PSoC4/CyLib.c **** *
 555:Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
 556:Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 557:Generated_Source\PSoC4/CyLib.c **** *
 558:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 559:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 560:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 561:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 562:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 563:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 564:Generated_Source\PSoC4/CyLib.c **** *
 565:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 566:Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 567:Generated_Source\PSoC4/CyLib.c **** * the System clock.
 568:Generated_Source\PSoC4/CyLib.c **** *
 569:Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 570:Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 571:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC 4400: Valid range [24-48] with step size equals
 572:Generated_Source\PSoC4/CyLib.c **** * 4.
 573:Generated_Source\PSoC4/CyLib.c **** *
 574:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 575:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 576:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 577:Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 23


 669              		.loc 1 577 0
 670              		.cfi_startproc
 671 0000 90B5     		push	{r4, r7, lr}
 672              		.cfi_def_cfa_offset 12
 673              		.cfi_offset 4, -12
 674              		.cfi_offset 7, -8
 675              		.cfi_offset 14, -4
 676 0002 8BB0     		sub	sp, sp, #44
 677              		.cfi_def_cfa_offset 56
 678 0004 00AF     		add	r7, sp, #0
 679              		.cfi_def_cfa_register 7
 680 0006 7860     		str	r0, [r7, #4]
 578:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 579:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 580:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 581:Generated_Source\PSoC4/CyLib.c ****         #else
 582:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 583:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 584:Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 585:Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
 586:Generated_Source\PSoC4/CyLib.c ****             uint8  imoTrim1Value;
 587:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 588:Generated_Source\PSoC4/CyLib.c **** 
 589:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 590:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 681              		.loc 1 590 0
 682 0008 0023     		mov	r3, #0
 683 000a 7B62     		str	r3, [r7, #36]
 591:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 592:Generated_Source\PSoC4/CyLib.c **** 
 593:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 594:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 595:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 596:Generated_Source\PSoC4/CyLib.c **** 
 597:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 598:Generated_Source\PSoC4/CyLib.c **** 
 599:Generated_Source\PSoC4/CyLib.c **** 
 600:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 684              		.loc 1 600 0
 685 000c 2323     		mov	r3, #35
 686 000e FC18     		add	r4, r7, r3
 687 0010 FFF7FEFF 		bl	CyEnterCriticalSection
 688 0014 031C     		mov	r3, r0
 689 0016 2370     		strb	r3, [r4]
 601:Generated_Source\PSoC4/CyLib.c **** 
 602:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 603:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 690              		.loc 1 603 0
 691 0018 FFF7FEFF 		bl	CySysClkImoGetWcoLock
 692 001c 031E     		sub	r3, r0, #0
 693 001e 03D0     		beq	.L39
 604:Generated_Source\PSoC4/CyLib.c ****             {
 605:Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 694              		.loc 1 605 0
 695 0020 0123     		mov	r3, #1
 696 0022 7B62     		str	r3, [r7, #36]
 606:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 24


 697              		.loc 1 606 0
 698 0024 FFF7FEFF 		bl	CySysClkImoDisableWcoLock
 699              	.L39:
 607:Generated_Source\PSoC4/CyLib.c ****             }
 608:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 609:Generated_Source\PSoC4/CyLib.c **** 
 610:Generated_Source\PSoC4/CyLib.c **** 
 611:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 612:Generated_Source\PSoC4/CyLib.c **** 
 613:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 614:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 615:Generated_Source\PSoC4/CyLib.c ****                 {
 616:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 617:Generated_Source\PSoC4/CyLib.c **** 
 618:Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 619:Generated_Source\PSoC4/CyLib.c ****                 {
 620:Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 621:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
 622:Generated_Source\PSoC4/CyLib.c ****                 }
 623:Generated_Source\PSoC4/CyLib.c **** 
 624:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 625:Generated_Source\PSoC4/CyLib.c ****                 }
 626:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 627:Generated_Source\PSoC4/CyLib.c **** 
 628:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 629:Generated_Source\PSoC4/CyLib.c **** 
 630:Generated_Source\PSoC4/CyLib.c **** 
 631:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 632:Generated_Source\PSoC4/CyLib.c **** 
 633:Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 634:Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
 700              		.loc 1 634 0
 701 0028 1B4B     		ldr	r3, .L41
 702 002a 1A68     		ldr	r2, [r3]
 703 002c 0823     		mov	r3, #8
 704 002e FB18     		add	r3, r7, r3
 705 0030 1A60     		str	r2, [r3]
 635:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 706              		.loc 1 635 0
 707 0032 1A4B     		ldr	r3, .L41+4
 708 0034 1A68     		ldr	r2, [r3]
 709 0036 0823     		mov	r3, #8
 710 0038 FB18     		add	r3, r7, r3
 711 003a 5A60     		str	r2, [r3, #4]
 636:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 712              		.loc 1 636 0
 713 003c 7B68     		ldr	r3, [r7, #4]
 714 003e 033B     		sub	r3, r3, #3
 715 0040 174A     		ldr	r2, .L41+8
 716 0042 D35C     		ldrb	r3, [r2, r3]
 717 0044 1A1C     		mov	r2, r3
 718 0046 0823     		mov	r3, #8
 719 0048 FB18     		add	r3, r7, r3
 720 004a 9A60     		str	r2, [r3, #8]
 637:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 721              		.loc 1 637 0
 722 004c 154B     		ldr	r3, .L41+12
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 25


 723 004e 1A68     		ldr	r2, [r3]
 724 0050 0823     		mov	r3, #8
 725 0052 FB18     		add	r3, r7, r3
 726 0054 DA60     		str	r2, [r3, #12]
 638:Generated_Source\PSoC4/CyLib.c **** 
 639:Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 727              		.loc 1 639 0
 728 0056 1823     		mov	r3, #24
 729 0058 FB18     		add	r3, r7, r3
 730 005a 134A     		ldr	r2, .L41+16
 731 005c 1A60     		str	r2, [r3]
 640:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 641:Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 642:Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 732              		.loc 1 642 0
 733 005e 0823     		mov	r3, #8
 734 0060 FA18     		add	r2, r7, r3
 735 0062 1823     		mov	r3, #24
 736 0064 FB18     		add	r3, r7, r3
 737 0066 5A60     		str	r2, [r3, #4]
 643:Generated_Source\PSoC4/CyLib.c **** 
 644:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 738              		.loc 1 644 0
 739 0068 104B     		ldr	r3, .L41+20
 740 006a 1822     		mov	r2, #24
 741 006c BA18     		add	r2, r7, r2
 742 006e 1A60     		str	r2, [r3]
 645:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 743              		.loc 1 645 0
 744 0070 0F4B     		ldr	r3, .L41+24
 745 0072 104A     		ldr	r2, .L41+28
 746 0074 1A60     		str	r2, [r3]
 646:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 747              		.loc 1 646 0
 748 0076 0D4B     		ldr	r3, .L41+20
 749 0078 1B68     		ldr	r3, [r3]
 647:Generated_Source\PSoC4/CyLib.c **** 
 648:Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 649:Generated_Source\PSoC4/CyLib.c **** 
 650:Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 651:Generated_Source\PSoC4/CyLib.c ****         {
 652:Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 653:Generated_Source\PSoC4/CyLib.c ****             {
 654:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 655:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 656:Generated_Source\PSoC4/CyLib.c ****             }
 657:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 658:Generated_Source\PSoC4/CyLib.c ****             {
 659:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 660:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
 661:Generated_Source\PSoC4/CyLib.c ****             }
 662:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 663:Generated_Source\PSoC4/CyLib.c ****             {
 664:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 665:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
 666:Generated_Source\PSoC4/CyLib.c ****             }
 667:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 26


 668:Generated_Source\PSoC4/CyLib.c ****             {
 669:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 670:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 671:Generated_Source\PSoC4/CyLib.c ****             }
 672:Generated_Source\PSoC4/CyLib.c ****             else
 673:Generated_Source\PSoC4/CyLib.c ****             {
 674:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 675:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 676:Generated_Source\PSoC4/CyLib.c ****             }
 677:Generated_Source\PSoC4/CyLib.c **** 
 678:Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 679:Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 680:Generated_Source\PSoC4/CyLib.c **** 
 681:Generated_Source\PSoC4/CyLib.c **** 
 682:Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 683:Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 684:Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 685:Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
 686:Generated_Source\PSoC4/CyLib.c ****             *
 687:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 688:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 689:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 690:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 691:Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
 692:Generated_Source\PSoC4/CyLib.c ****             {
 693:Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 694:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 695:Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 696:Generated_Source\PSoC4/CyLib.c **** 
 697:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 698:Generated_Source\PSoC4/CyLib.c **** 
 699:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 700:Generated_Source\PSoC4/CyLib.c ****             }
 701:Generated_Source\PSoC4/CyLib.c ****             else
 702:Generated_Source\PSoC4/CyLib.c ****             {
 703:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 704:Generated_Source\PSoC4/CyLib.c ****             }
 705:Generated_Source\PSoC4/CyLib.c **** 
 706:Generated_Source\PSoC4/CyLib.c **** 
 707:Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 708:Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 709:Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 710:Generated_Source\PSoC4/CyLib.c ****             *
 711:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 712:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 713:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 714:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 715:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 716:Generated_Source\PSoC4/CyLib.c ****             {
 717:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 718:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 719:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 720:Generated_Source\PSoC4/CyLib.c ****             }
 721:Generated_Source\PSoC4/CyLib.c **** 
 722:Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 723:Generated_Source\PSoC4/CyLib.c **** 
 724:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 27


 725:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 726:Generated_Source\PSoC4/CyLib.c ****                 {
 727:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 728:Generated_Source\PSoC4/CyLib.c ****                 }
 729:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 730:Generated_Source\PSoC4/CyLib.c ****                 {
 731:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 732:Generated_Source\PSoC4/CyLib.c ****                 }
 733:Generated_Source\PSoC4/CyLib.c ****                 else
 734:Generated_Source\PSoC4/CyLib.c ****                 {
 735:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE
 736:Generated_Source\PSoC4/CyLib.c ****                 }
 737:Generated_Source\PSoC4/CyLib.c ****             #else
 738:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFF
 739:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 740:Generated_Source\PSoC4/CyLib.c **** 
 741:Generated_Source\PSoC4/CyLib.c **** 
 742:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 743:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 744:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 745:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 746:Generated_Source\PSoC4/CyLib.c **** 
 747:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 748:Generated_Source\PSoC4/CyLib.c ****             {
 749:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 750:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 751:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 752:Generated_Source\PSoC4/CyLib.c ****             }
 753:Generated_Source\PSoC4/CyLib.c ****         }
 754:Generated_Source\PSoC4/CyLib.c ****         else
 755:Generated_Source\PSoC4/CyLib.c ****         {
 756:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 757:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 758:Generated_Source\PSoC4/CyLib.c ****         }
 759:Generated_Source\PSoC4/CyLib.c **** 
 760:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
 761:Generated_Source\PSoC4/CyLib.c **** 
 762:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 763:Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 750              		.loc 1 763 0
 751 007a 7B6A     		ldr	r3, [r7, #36]
 752 007c 012B     		cmp	r3, #1
 753 007e 01D1     		bne	.L40
 764:Generated_Source\PSoC4/CyLib.c ****             {
 765:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 754              		.loc 1 765 0
 755 0080 FFF7FEFF 		bl	CySysClkImoEnableWcoLock
 756              	.L40:
 766:Generated_Source\PSoC4/CyLib.c ****             }
 767:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 768:Generated_Source\PSoC4/CyLib.c **** 
 769:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 770:Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 771:Generated_Source\PSoC4/CyLib.c ****             {
 772:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 773:Generated_Source\PSoC4/CyLib.c ****             }
 774:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 28


 775:Generated_Source\PSoC4/CyLib.c **** 
 776:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 757              		.loc 1 776 0
 758 0084 2323     		mov	r3, #35
 759 0086 FB18     		add	r3, r7, r3
 760 0088 1B78     		ldrb	r3, [r3]
 761 008a 181C     		mov	r0, r3
 762 008c FFF7FEFF 		bl	CyExitCriticalSection
 777:Generated_Source\PSoC4/CyLib.c ****     }
 763              		.loc 1 777 0
 764 0090 BD46     		mov	sp, r7
 765 0092 0BB0     		add	sp, sp, #44
 766              		@ sp needed
 767 0094 90BD     		pop	{r4, r7, pc}
 768              	.L42:
 769 0096 C046     		.align	2
 770              	.L41:
 771 0098 08010B40 		.word	1074462984
 772 009c 00010B40 		.word	1074462976
 773 00a0 00000000 		.word	cyImoFreqMhz2Reg
 774 00a4 30001040 		.word	1074790448
 775 00a8 B6EA0000 		.word	60086
 776 00ac 08001040 		.word	1074790408
 777 00b0 04001040 		.word	1074790404
 778 00b4 17000080 		.word	-2147483625
 779              		.cfi_endproc
 780              	.LFE9:
 781              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 782              		.section	.text.CySysLvdEnable,"ax",%progbits
 783              		.align	2
 784              		.global	CySysLvdEnable
 785              		.code	16
 786              		.thumb_func
 787              		.type	CySysLvdEnable, %function
 788              	CySysLvdEnable:
 789              	.LFB10:
 778:Generated_Source\PSoC4/CyLib.c **** 
 779:Generated_Source\PSoC4/CyLib.c **** #else
 780:Generated_Source\PSoC4/CyLib.c **** 
 781:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 782:Generated_Source\PSoC4/CyLib.c ****     {
 783:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 784:Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
 785:Generated_Source\PSoC4/CyLib.c **** 
 786:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 787:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 788:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */        
 789:Generated_Source\PSoC4/CyLib.c ****         
 790:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 791:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 792:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 793:Generated_Source\PSoC4/CyLib.c **** 
 794:Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
 795:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
 796:Generated_Source\PSoC4/CyLib.c ****         #else
 797:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
 798:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 29


 799:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 800:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
 801:Generated_Source\PSoC4/CyLib.c ****         {
 802:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 803:Generated_Source\PSoC4/CyLib.c **** 
 804:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 805:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
 806:Generated_Source\PSoC4/CyLib.c ****                 {
 807:Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
 808:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
 809:Generated_Source\PSoC4/CyLib.c ****                 }
 810:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 811:Generated_Source\PSoC4/CyLib.c **** 
 812:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 813:Generated_Source\PSoC4/CyLib.c **** 
 814:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 815:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
 816:Generated_Source\PSoC4/CyLib.c ****                     {
 817:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 818:Generated_Source\PSoC4/CyLib.c **** 
 819:Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
 820:Generated_Source\PSoC4/CyLib.c ****                     {
 821:Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
 822:Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
 823:Generated_Source\PSoC4/CyLib.c ****                     }
 824:Generated_Source\PSoC4/CyLib.c **** 
 825:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 826:Generated_Source\PSoC4/CyLib.c ****                     }
 827:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 828:Generated_Source\PSoC4/CyLib.c **** 
 829:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 830:Generated_Source\PSoC4/CyLib.c **** 
 831:Generated_Source\PSoC4/CyLib.c **** 
 832:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
 833:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
 834:Generated_Source\PSoC4/CyLib.c **** 
 835:Generated_Source\PSoC4/CyLib.c **** 
 836:Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
 837:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 838:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 839:Generated_Source\PSoC4/CyLib.c ****                 {
 840:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 841:Generated_Source\PSoC4/CyLib.c ****                 }
 842:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 843:Generated_Source\PSoC4/CyLib.c ****                 {
 844:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 845:Generated_Source\PSoC4/CyLib.c ****                 }
 846:Generated_Source\PSoC4/CyLib.c ****                 else
 847:Generated_Source\PSoC4/CyLib.c ****                 {
 848:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
 849:Generated_Source\PSoC4/CyLib.c ****                 }
 850:Generated_Source\PSoC4/CyLib.c ****             #else
 851:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 852:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 853:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
 854:Generated_Source\PSoC4/CyLib.c **** 
 855:Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 30


 856:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
 857:Generated_Source\PSoC4/CyLib.c **** 
 858:Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
 859:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
 860:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
 861:Generated_Source\PSoC4/CyLib.c **** 
 862:Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 863:Generated_Source\PSoC4/CyLib.c **** 
 864:Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
 865:Generated_Source\PSoC4/CyLib.c ****             {
 866:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 867:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 868:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
 869:Generated_Source\PSoC4/CyLib.c **** 
 870:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
 871:Generated_Source\PSoC4/CyLib.c **** 
 872:Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
 873:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
 874:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
 875:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
 876:Generated_Source\PSoC4/CyLib.c ****             }
 877:Generated_Source\PSoC4/CyLib.c **** 
 878:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 879:Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
 880:Generated_Source\PSoC4/CyLib.c ****                 {
 881:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
 882:Generated_Source\PSoC4/CyLib.c ****                 }
 883:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 884:Generated_Source\PSoC4/CyLib.c ****         
 885:Generated_Source\PSoC4/CyLib.c ****         
 886:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 887:Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
 888:Generated_Source\PSoC4/CyLib.c ****                 {
 889:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
 890:Generated_Source\PSoC4/CyLib.c ****                 }
 891:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 892:Generated_Source\PSoC4/CyLib.c **** 
 893:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 894:Generated_Source\PSoC4/CyLib.c ****         }
 895:Generated_Source\PSoC4/CyLib.c ****         else
 896:Generated_Source\PSoC4/CyLib.c ****         {
 897:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 898:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 899:Generated_Source\PSoC4/CyLib.c ****         }
 900:Generated_Source\PSoC4/CyLib.c ****     }
 901:Generated_Source\PSoC4/CyLib.c **** 
 902:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
 903:Generated_Source\PSoC4/CyLib.c **** 
 904:Generated_Source\PSoC4/CyLib.c **** 
 905:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
 906:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 907:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
 908:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 909:Generated_Source\PSoC4/CyLib.c ****     *
 910:Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
 911:Generated_Source\PSoC4/CyLib.c ****     *
 912:Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 31


 913:Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
 914:Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
 915:Generated_Source\PSoC4/CyLib.c ****     *
 916:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 917:Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 918:Generated_Source\PSoC4/CyLib.c ****     *
 919:Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
 920:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 921:Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
 922:Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
 923:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 924:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
 925:Generated_Source\PSoC4/CyLib.c ****     *
 926:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
 927:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
 928:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
 929:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
 930:Generated_Source\PSoC4/CyLib.c ****     *
 931:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 932:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
 933:Generated_Source\PSoC4/CyLib.c ****     {
 934:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 935:Generated_Source\PSoC4/CyLib.c **** 
 936:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 937:Generated_Source\PSoC4/CyLib.c **** 
 938:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
 939:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
 940:Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
 941:Generated_Source\PSoC4/CyLib.c **** 
 942:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 943:Generated_Source\PSoC4/CyLib.c ****     }
 944:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
 945:Generated_Source\PSoC4/CyLib.c **** 
 946:Generated_Source\PSoC4/CyLib.c **** 
 947:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
 948:Generated_Source\PSoC4/CyLib.c **** 
 949:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 950:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
 951:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 952:Generated_Source\PSoC4/CyLib.c ****     *
 953:Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
 954:Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
 955:Generated_Source\PSoC4/CyLib.c ****     *
 956:Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
 957:Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
 958:Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
 959:Generated_Source\PSoC4/CyLib.c ****     * called.
 960:Generated_Source\PSoC4/CyLib.c ****     *
 961:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
 962:Generated_Source\PSoC4/CyLib.c ****     *
 963:Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
 964:Generated_Source\PSoC4/CyLib.c ****     *
 965:Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
 966:Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
 967:Generated_Source\PSoC4/CyLib.c ****     *
 968:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
 969:Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 32


 970:Generated_Source\PSoC4/CyLib.c ****     *
 971:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
 972:Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
 973:Generated_Source\PSoC4/CyLib.c ****     * is returned.
 974:Generated_Source\PSoC4/CyLib.c ****     *
 975:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
 976:Generated_Source\PSoC4/CyLib.c ****     *
 977:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 978:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
 979:Generated_Source\PSoC4/CyLib.c ****     {
 980:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
 981:Generated_Source\PSoC4/CyLib.c **** 
 982:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
 983:Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
 984:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
 985:Generated_Source\PSoC4/CyLib.c **** 
 986:Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
 987:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
 988:Generated_Source\PSoC4/CyLib.c **** 
 989:Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
 990:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
 991:Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_WCO_SRSSV2 */
 992:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
 993:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
 994:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
 995:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
 996:Generated_Source\PSoC4/CyLib.c **** 
 997:Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
 998:Generated_Source\PSoC4/CyLib.c ****         {
 999:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
1000:Generated_Source\PSoC4/CyLib.c **** 
1001:Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
1002:Generated_Source\PSoC4/CyLib.c ****             {
1003:Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
1004:Generated_Source\PSoC4/CyLib.c **** 
1005:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
1006:Generated_Source\PSoC4/CyLib.c ****                 {
1007:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
1008:Generated_Source\PSoC4/CyLib.c ****                     break;
1009:Generated_Source\PSoC4/CyLib.c ****                 }
1010:Generated_Source\PSoC4/CyLib.c ****             }
1011:Generated_Source\PSoC4/CyLib.c **** 
1012:Generated_Source\PSoC4/CyLib.c ****         }
1013:Generated_Source\PSoC4/CyLib.c **** 
1014:Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
1015:Generated_Source\PSoC4/CyLib.c ****     }
1016:Generated_Source\PSoC4/CyLib.c **** 
1017:Generated_Source\PSoC4/CyLib.c **** 
1018:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1019:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1020:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1021:Generated_Source\PSoC4/CyLib.c ****     *
1022:Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1023:Generated_Source\PSoC4/CyLib.c ****     *
1024:Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1025:Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1026:Generated_Source\PSoC4/CyLib.c ****     * functioning.
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 33


1027:Generated_Source\PSoC4/CyLib.c ****     *
1028:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1029:Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1030:Generated_Source\PSoC4/CyLib.c ****     {
1031:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1032:Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1033:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1034:Generated_Source\PSoC4/CyLib.c **** 
1035:Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1036:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1037:Generated_Source\PSoC4/CyLib.c ****         #else
1038:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1039:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1040:Generated_Source\PSoC4/CyLib.c ****     }
1041:Generated_Source\PSoC4/CyLib.c **** 
1042:Generated_Source\PSoC4/CyLib.c **** 
1043:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1044:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1045:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1046:Generated_Source\PSoC4/CyLib.c ****     *
1047:Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1048:Generated_Source\PSoC4/CyLib.c ****     *
1049:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
1050:Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1051:Generated_Source\PSoC4/CyLib.c ****     *
1052:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, the error status bit is the WATCHDOG_ERROR bit in
1053:Generated_Source\PSoC4/CyLib.c ****     * ECO_STATUS register.
1054:Generated_Source\PSoC4/CyLib.c ****     *
1055:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1056:Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1057:Generated_Source\PSoC4/CyLib.c ****     *
1058:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L: Non-zero indicates that ECO is running.
1059:Generated_Source\PSoC4/CyLib.c ****     *
1060:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1061:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1062:Generated_Source\PSoC4/CyLib.c ****     {
1063:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1064:Generated_Source\PSoC4/CyLib.c **** 
1065:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1066:Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
1067:Generated_Source\PSoC4/CyLib.c ****         #else
1068:Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1069:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1070:Generated_Source\PSoC4/CyLib.c **** 
1071:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1072:Generated_Source\PSoC4/CyLib.c ****     }
1073:Generated_Source\PSoC4/CyLib.c **** 
1074:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS)
1075:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1076:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1077:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1078:Generated_Source\PSoC4/CyLib.c ****         *
1079:Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1080:Generated_Source\PSoC4/CyLib.c ****         *
1081:Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1082:Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1083:Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 34


1084:Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1085:Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1086:Generated_Source\PSoC4/CyLib.c ****         *
1087:Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1088:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1089:Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1090:Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1091:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1092:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1093:Generated_Source\PSoC4/CyLib.c ****         *
1094:Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1095:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1096:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1097:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1098:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
1099:Generated_Source\PSoC4/CyLib.c ****         *
1100:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1101:Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1102:Generated_Source\PSoC4/CyLib.c ****         {
1103:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1104:Generated_Source\PSoC4/CyLib.c **** 
1105:Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
1106:Generated_Source\PSoC4/CyLib.c ****             {
1107:Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
1108:Generated_Source\PSoC4/CyLib.c **** 
1109:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
1110:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
1111:Generated_Source\PSoC4/CyLib.c **** 
1112:Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
1113:Generated_Source\PSoC4/CyLib.c ****             }
1114:Generated_Source\PSoC4/CyLib.c ****             else
1115:Generated_Source\PSoC4/CyLib.c ****             {
1116:Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1117:Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
1118:Generated_Source\PSoC4/CyLib.c ****             }
1119:Generated_Source\PSoC4/CyLib.c ****         }
1120:Generated_Source\PSoC4/CyLib.c **** 
1121:Generated_Source\PSoC4/CyLib.c ****     #else
1122:Generated_Source\PSoC4/CyLib.c **** 
1123:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1124:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1125:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1126:Generated_Source\PSoC4/CyLib.c ****         *
1127:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1128:Generated_Source\PSoC4/CyLib.c ****         * 4200L devices only.
1129:Generated_Source\PSoC4/CyLib.c ****         *
1130:Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1131:Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1132:Generated_Source\PSoC4/CyLib.c ****         *
1133:Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1134:Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1135:Generated_Source\PSoC4/CyLib.c ****         *
1136:Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1137:Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
1138:Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1139:Generated_Source\PSoC4/CyLib.c ****         *
1140:Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 35


1141:Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1142:Generated_Source\PSoC4/CyLib.c ****         *
1143:Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1144:Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
1145:Generated_Source\PSoC4/CyLib.c ****         *
1146:Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1147:Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1148:Generated_Source\PSoC4/CyLib.c ****         *
1149:Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1150:Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1151:Generated_Source\PSoC4/CyLib.c ****         *
1152:Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
1153:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1154:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1155:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
1156:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1157:Generated_Source\PSoC4/CyLib.c ****         *
1158:Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1159:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
1160:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1161:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1162:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1163:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1164:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1165:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1166:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1167:Generated_Source\PSoC4/CyLib.c ****         *
1168:Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1169:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1170:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1171:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1172:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1173:Generated_Source\PSoC4/CyLib.c ****         *
1174:Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1175:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1176:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1177:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1178:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
1179:Generated_Source\PSoC4/CyLib.c ****         *
1180:Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1181:Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1182:Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1183:Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1184:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1185:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1186:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1187:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1188:Generated_Source\PSoC4/CyLib.c ****         *
1189:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1190:Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1191:Generated_Source\PSoC4/CyLib.c ****         {
1192:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1193:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1194:Generated_Source\PSoC4/CyLib.c **** 
1195:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1196:Generated_Source\PSoC4/CyLib.c **** 
1197:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 36


1198:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1199:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1200:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1201:Generated_Source\PSoC4/CyLib.c **** 
1202:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1203:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1204:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1205:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1206:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1207:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1208:Generated_Source\PSoC4/CyLib.c **** 
1209:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
1210:Generated_Source\PSoC4/CyLib.c **** 
1211:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1212:Generated_Source\PSoC4/CyLib.c ****         }
1213:Generated_Source\PSoC4/CyLib.c **** 
1214:Generated_Source\PSoC4/CyLib.c **** 
1215:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1216:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
1217:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1218:Generated_Source\PSoC4/CyLib.c ****         *
1219:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1220:Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1221:Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1222:Generated_Source\PSoC4/CyLib.c ****         *
1223:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L devices only.
1224:Generated_Source\PSoC4/CyLib.c ****         *
1225:Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1226:Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1227:Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1228:Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1229:Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1230:Generated_Source\PSoC4/CyLib.c ****         *
1231:Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1232:Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1233:Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1234:Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1235:Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
1236:Generated_Source\PSoC4/CyLib.c ****         *
1237:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1238:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1239:Generated_Source\PSoC4/CyLib.c ****         *
1240:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1241:Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1242:Generated_Source\PSoC4/CyLib.c ****         {
1243:Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1244:Generated_Source\PSoC4/CyLib.c **** 
1245:Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1246:Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1247:Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1248:Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1249:Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
1250:Generated_Source\PSoC4/CyLib.c **** 
1251:Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1252:Generated_Source\PSoC4/CyLib.c **** 
1253:Generated_Source\PSoC4/CyLib.c **** 
1254:Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 37


1255:Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1256:Generated_Source\PSoC4/CyLib.c ****             {
1257:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1258:Generated_Source\PSoC4/CyLib.c ****             }
1259:Generated_Source\PSoC4/CyLib.c ****             else
1260:Generated_Source\PSoC4/CyLib.c ****             {
1261:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1262:Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1263:Generated_Source\PSoC4/CyLib.c **** 
1264:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1265:Generated_Source\PSoC4/CyLib.c ****                 {
1266:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
1267:Generated_Source\PSoC4/CyLib.c ****                 }
1268:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1269:Generated_Source\PSoC4/CyLib.c ****                 {
1270:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1271:Generated_Source\PSoC4/CyLib.c ****                 }
1272:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1273:Generated_Source\PSoC4/CyLib.c ****                 {
1274:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1275:Generated_Source\PSoC4/CyLib.c ****                 }
1276:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1277:Generated_Source\PSoC4/CyLib.c ****                 {
1278:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1279:Generated_Source\PSoC4/CyLib.c ****                 }
1280:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1281:Generated_Source\PSoC4/CyLib.c ****                 {
1282:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1283:Generated_Source\PSoC4/CyLib.c ****                 }
1284:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1285:Generated_Source\PSoC4/CyLib.c ****                 {
1286:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1287:Generated_Source\PSoC4/CyLib.c ****                 }
1288:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1289:Generated_Source\PSoC4/CyLib.c ****                 {
1290:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1291:Generated_Source\PSoC4/CyLib.c ****                 }
1292:Generated_Source\PSoC4/CyLib.c ****                 else
1293:Generated_Source\PSoC4/CyLib.c ****                 {
1294:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1295:Generated_Source\PSoC4/CyLib.c ****                 }
1296:Generated_Source\PSoC4/CyLib.c **** 
1297:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1298:Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1299:Generated_Source\PSoC4/CyLib.c **** 
1300:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1301:Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1302:Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1303:Generated_Source\PSoC4/CyLib.c ****                 {
1304:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1305:Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1306:Generated_Source\PSoC4/CyLib.c ****                 }
1307:Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
1308:Generated_Source\PSoC4/CyLib.c ****                 {
1309:Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1310:Generated_Source\PSoC4/CyLib.c ****                 }
1311:Generated_Source\PSoC4/CyLib.c ****                 else
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 38


1312:Generated_Source\PSoC4/CyLib.c ****                 {
1313:Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1314:Generated_Source\PSoC4/CyLib.c ****                 }
1315:Generated_Source\PSoC4/CyLib.c **** 
1316:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1317:Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1318:Generated_Source\PSoC4/CyLib.c ****                 {
1319:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1320:Generated_Source\PSoC4/CyLib.c ****                 }
1321:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1322:Generated_Source\PSoC4/CyLib.c ****                 {
1323:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
1324:Generated_Source\PSoC4/CyLib.c ****                 }
1325:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1326:Generated_Source\PSoC4/CyLib.c ****                 {
1327:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1328:Generated_Source\PSoC4/CyLib.c ****                 }
1329:Generated_Source\PSoC4/CyLib.c ****                 else
1330:Generated_Source\PSoC4/CyLib.c ****                 {
1331:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1332:Generated_Source\PSoC4/CyLib.c ****                 }
1333:Generated_Source\PSoC4/CyLib.c **** 
1334:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1335:Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1336:Generated_Source\PSoC4/CyLib.c **** 
1337:Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1338:Generated_Source\PSoC4/CyLib.c **** 
1339:Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1340:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1341:Generated_Source\PSoC4/CyLib.c ****                 {
1342:Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1343:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1344:Generated_Source\PSoC4/CyLib.c ****                 }
1345:Generated_Source\PSoC4/CyLib.c ****                 else
1346:Generated_Source\PSoC4/CyLib.c ****                 {
1347:Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1348:Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1349:Generated_Source\PSoC4/CyLib.c ****                     */
1350:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1351:Generated_Source\PSoC4/CyLib.c ****                 }
1352:Generated_Source\PSoC4/CyLib.c ****             }
1353:Generated_Source\PSoC4/CyLib.c **** 
1354:Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1355:Generated_Source\PSoC4/CyLib.c ****         }
1356:Generated_Source\PSoC4/CyLib.c **** 
1357:Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1358:Generated_Source\PSoC4/CyLib.c **** 
1359:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1360:Generated_Source\PSoC4/CyLib.c **** 
1361:Generated_Source\PSoC4/CyLib.c **** 
1362:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
1363:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1364:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
1365:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1366:Generated_Source\PSoC4/CyLib.c ****     *
1367:Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1368:Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 39


1369:Generated_Source\PSoC4/CyLib.c ****     *
1370:Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1371:Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1372:Generated_Source\PSoC4/CyLib.c ****     *
1373:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1374:Generated_Source\PSoC4/CyLib.c ****     *
1375:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1376:Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1377:Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1
1378:Generated_Source\PSoC4/CyLib.c ****     *
1379:Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1380:Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
1381:Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1382:Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1383:Generated_Source\PSoC4/CyLib.c ****     *
1384:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1385:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1386:Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1387:Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
1388:Generated_Source\PSoC4/CyLib.c ****     * still be used.
1389:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1390:Generated_Source\PSoC4/CyLib.c ****     *
1391:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1392:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1393:Generated_Source\PSoC4/CyLib.c ****     {
1394:Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1395:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1396:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1397:Generated_Source\PSoC4/CyLib.c **** 
1398:Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1399:Generated_Source\PSoC4/CyLib.c ****         {
1400:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1401:Generated_Source\PSoC4/CyLib.c **** 
1402:Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1403:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1404:Generated_Source\PSoC4/CyLib.c **** 
1405:Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1406:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
1407:Generated_Source\PSoC4/CyLib.c **** 
1408:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1409:Generated_Source\PSoC4/CyLib.c **** 
1410:Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1411:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1412:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1413:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1414:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1415:Generated_Source\PSoC4/CyLib.c **** 
1416:Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1417:Generated_Source\PSoC4/CyLib.c ****             {
1418:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1419:Generated_Source\PSoC4/CyLib.c **** 
1420:Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
1421:Generated_Source\PSoC4/CyLib.c ****                 {
1422:Generated_Source\PSoC4/CyLib.c **** 
1423:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1424:Generated_Source\PSoC4/CyLib.c ****                     {
1425:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 40


1426:Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1427:Generated_Source\PSoC4/CyLib.c ****                         break;
1428:Generated_Source\PSoC4/CyLib.c ****                     }
1429:Generated_Source\PSoC4/CyLib.c **** 
1430:Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1431:Generated_Source\PSoC4/CyLib.c ****                     counts--;
1432:Generated_Source\PSoC4/CyLib.c ****                 }
1433:Generated_Source\PSoC4/CyLib.c ****             }
1434:Generated_Source\PSoC4/CyLib.c ****         }
1435:Generated_Source\PSoC4/CyLib.c ****         else
1436:Generated_Source\PSoC4/CyLib.c ****         {
1437:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
1438:Generated_Source\PSoC4/CyLib.c ****         }
1439:Generated_Source\PSoC4/CyLib.c **** 
1440:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1441:Generated_Source\PSoC4/CyLib.c ****     }
1442:Generated_Source\PSoC4/CyLib.c **** 
1443:Generated_Source\PSoC4/CyLib.c **** 
1444:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1445:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1446:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1447:Generated_Source\PSoC4/CyLib.c ****     *
1448:Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1449:Generated_Source\PSoC4/CyLib.c ****     *
1450:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1451:Generated_Source\PSoC4/CyLib.c ****     *
1452:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1453:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1454:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1455:Generated_Source\PSoC4/CyLib.c ****     *
1456:Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1457:Generated_Source\PSoC4/CyLib.c ****     *
1458:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1459:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1460:Generated_Source\PSoC4/CyLib.c ****     {
1461:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1462:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1463:Generated_Source\PSoC4/CyLib.c **** 
1464:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1465:Generated_Source\PSoC4/CyLib.c **** 
1466:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1467:Generated_Source\PSoC4/CyLib.c **** 
1468:Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1469:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1470:Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1471:Generated_Source\PSoC4/CyLib.c ****         {
1472:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1473:Generated_Source\PSoC4/CyLib.c ****         }
1474:Generated_Source\PSoC4/CyLib.c **** 
1475:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1476:Generated_Source\PSoC4/CyLib.c **** 
1477:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1478:Generated_Source\PSoC4/CyLib.c ****     }
1479:Generated_Source\PSoC4/CyLib.c **** 
1480:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1481:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1482:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 41


1483:Generated_Source\PSoC4/CyLib.c ****     *
1484:Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1485:Generated_Source\PSoC4/CyLib.c ****     *
1486:Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
1487:Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1488:Generated_Source\PSoC4/CyLib.c ****     *
1489:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1490:Generated_Source\PSoC4/CyLib.c ****     *
1491:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1492:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1493:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1494:Generated_Source\PSoC4/CyLib.c ****     *
1495:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1496:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1497:Generated_Source\PSoC4/CyLib.c ****     {
1498:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1499:Generated_Source\PSoC4/CyLib.c **** 
1500:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1501:Generated_Source\PSoC4/CyLib.c ****         {
1502:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1503:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1504:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1505:Generated_Source\PSoC4/CyLib.c ****         }
1506:Generated_Source\PSoC4/CyLib.c ****     }
1507:Generated_Source\PSoC4/CyLib.c **** 
1508:Generated_Source\PSoC4/CyLib.c **** 
1509:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1510:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1511:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1512:Generated_Source\PSoC4/CyLib.c ****     *
1513:Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1514:Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1515:Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1516:Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1517:Generated_Source\PSoC4/CyLib.c ****     *
1518:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1519:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1520:Generated_Source\PSoC4/CyLib.c ****     *
1521:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1522:Generated_Source\PSoC4/CyLib.c ****     *
1523:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1524:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1525:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1526:Generated_Source\PSoC4/CyLib.c ****     *
1527:Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1528:Generated_Source\PSoC4/CyLib.c ****     * divider.
1529:Generated_Source\PSoC4/CyLib.c ****     *
1530:Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1531:Generated_Source\PSoC4/CyLib.c ****     *
1532:Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1533:Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1534:Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
1535:Generated_Source\PSoC4/CyLib.c ****     *
1536:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1537:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1538:Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1539:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 42


1540:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1541:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1542:Generated_Source\PSoC4/CyLib.c ****     {
1543:Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
1544:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1545:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1546:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1547:Generated_Source\PSoC4/CyLib.c **** 
1548:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1549:Generated_Source\PSoC4/CyLib.c **** 
1550:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1551:Generated_Source\PSoC4/CyLib.c **** 
1552:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1553:Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1554:Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
1555:Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1556:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1557:Generated_Source\PSoC4/CyLib.c ****         {
1558:Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
1559:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1560:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1561:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1562:Generated_Source\PSoC4/CyLib.c **** 
1563:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1564:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1565:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1566:Generated_Source\PSoC4/CyLib.c **** 
1567:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1568:Generated_Source\PSoC4/CyLib.c **** 
1569:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1570:Generated_Source\PSoC4/CyLib.c ****         }
1571:Generated_Source\PSoC4/CyLib.c **** 
1572:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1573:Generated_Source\PSoC4/CyLib.c **** 
1574:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1575:Generated_Source\PSoC4/CyLib.c ****     }
1576:Generated_Source\PSoC4/CyLib.c **** 
1577:Generated_Source\PSoC4/CyLib.c **** 
1578:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1579:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1580:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1581:Generated_Source\PSoC4/CyLib.c ****     *
1582:Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1583:Generated_Source\PSoC4/CyLib.c ****     *
1584:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1585:Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1586:Generated_Source\PSoC4/CyLib.c ****     *
1587:Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may 
1588:Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from 
1589:Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of 
1590:Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1591:Generated_Source\PSoC4/CyLib.c ****     *
1592:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1593:Generated_Source\PSoC4/CyLib.c ****     *
1594:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1595:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1596:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 43


1597:Generated_Source\PSoC4/CyLib.c ****     *
1598:Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1599:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1600:Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
1601:Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1602:Generated_Source\PSoC4/CyLib.c ****     *
1603:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1604:Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1605:Generated_Source\PSoC4/CyLib.c ****     *
1606:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1607:Generated_Source\PSoC4/CyLib.c ****     *
1608:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1609:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1610:Generated_Source\PSoC4/CyLib.c ****     {
1611:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1612:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1613:Generated_Source\PSoC4/CyLib.c **** 
1614:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1615:Generated_Source\PSoC4/CyLib.c **** 
1616:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1617:Generated_Source\PSoC4/CyLib.c ****         {
1618:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1619:Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1620:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1621:Generated_Source\PSoC4/CyLib.c ****         }
1622:Generated_Source\PSoC4/CyLib.c **** 
1623:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1624:Generated_Source\PSoC4/CyLib.c ****     }
1625:Generated_Source\PSoC4/CyLib.c **** 
1626:Generated_Source\PSoC4/CyLib.c **** 
1627:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1628:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1629:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1630:Generated_Source\PSoC4/CyLib.c ****     *
1631:Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1632:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1633:Generated_Source\PSoC4/CyLib.c ****     *
1634:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1635:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1636:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1637:Generated_Source\PSoC4/CyLib.c ****     *
1638:Generated_Source\PSoC4/CyLib.c ****     *  \param bypass: Bypass mode.
1639:Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1640:Generated_Source\PSoC4/CyLib.c ****     *
1641:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1642:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1643:Generated_Source\PSoC4/CyLib.c ****     {
1644:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1645:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1646:Generated_Source\PSoC4/CyLib.c **** 
1647:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1648:Generated_Source\PSoC4/CyLib.c **** 
1649:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1650:Generated_Source\PSoC4/CyLib.c **** 
1651:Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1652:Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1653:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 44


1654:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1655:Generated_Source\PSoC4/CyLib.c **** 
1656:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1657:Generated_Source\PSoC4/CyLib.c ****     }
1658:Generated_Source\PSoC4/CyLib.c **** 
1659:Generated_Source\PSoC4/CyLib.c **** 
1660:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1661:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1662:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1663:Generated_Source\PSoC4/CyLib.c ****     *
1664:Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1665:Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
1666:Generated_Source\PSoC4/CyLib.c ****     *
1667:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1668:Generated_Source\PSoC4/CyLib.c ****     *
1669:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1670:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1671:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1672:Generated_Source\PSoC4/CyLib.c ****     *
1673:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1674:Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1675:Generated_Source\PSoC4/CyLib.c ****     *
1676:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1677:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
1678:Generated_Source\PSoC4/CyLib.c ****     {
1679:Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
1680:Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
1681:Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_LOCKED;
1682:Generated_Source\PSoC4/CyLib.c **** 
1683:Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
1684:Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
1685:Generated_Source\PSoC4/CyLib.c **** 
1686:Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
1687:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll)) ||
1688:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll)))
1689:Generated_Source\PSoC4/CyLib.c ****         {
1690:Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
1691:Generated_Source\PSoC4/CyLib.c ****         }
1692:Generated_Source\PSoC4/CyLib.c **** 
1693:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1694:Generated_Source\PSoC4/CyLib.c ****     }
1695:Generated_Source\PSoC4/CyLib.c **** 
1696:Generated_Source\PSoC4/CyLib.c **** 
1697:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1698:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
1699:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1700:Generated_Source\PSoC4/CyLib.c ****     *
1701:Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
1702:Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
1703:Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
1704:Generated_Source\PSoC4/CyLib.c ****     *  this API.
1705:Generated_Source\PSoC4/CyLib.c ****     *
1706:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1707:Generated_Source\PSoC4/CyLib.c ****     *
1708:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1709:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1710:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 45


1711:Generated_Source\PSoC4/CyLib.c ****     *
1712:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
1713:Generated_Source\PSoC4/CyLib.c ****     *
1714:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1715:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
1716:Generated_Source\PSoC4/CyLib.c ****     {
1717:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
1718:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1719:Generated_Source\PSoC4/CyLib.c **** 
1720:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1721:Generated_Source\PSoC4/CyLib.c **** 
1722:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
1723:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
1724:Generated_Source\PSoC4/CyLib.c **** 
1725:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1726:Generated_Source\PSoC4/CyLib.c **** 
1727:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1728:Generated_Source\PSoC4/CyLib.c ****     }
1729:Generated_Source\PSoC4/CyLib.c **** 
1730:Generated_Source\PSoC4/CyLib.c **** 
1731:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1732:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
1733:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1734:Generated_Source\PSoC4/CyLib.c ****     *
1735:Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
1736:Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
1737:Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
1738:Generated_Source\PSoC4/CyLib.c ****     *
1739:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1740:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1741:Generated_Source\PSoC4/CyLib.c ****     *
1742:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L devices.
1743:Generated_Source\PSoC4/CyLib.c ****     *
1744:Generated_Source\PSoC4/CyLib.c ****     * \param pll:
1745:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1746:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1747:Generated_Source\PSoC4/CyLib.c ****     *
1748:Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
1749:Generated_Source\PSoC4/CyLib.c ****     *
1750:Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
1751:Generated_Source\PSoC4/CyLib.c ****     *
1752:Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
1753:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
1754:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
1755:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
1756:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
1757:Generated_Source\PSoC4/CyLib.c ****     *
1758:Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
1759:Generated_Source\PSoC4/CyLib.c ****     *
1760:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
1761:Generated_Source\PSoC4/CyLib.c ****     * frequency.
1762:Generated_Source\PSoC4/CyLib.c ****     *
1763:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
1764:Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
1765:Generated_Source\PSoC4/CyLib.c ****     *
1766:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1767:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 46


1768:Generated_Source\PSoC4/CyLib.c ****     {
1769:Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
1770:Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
1771:Generated_Source\PSoC4/CyLib.c **** 
1772:Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
1773:Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
1774:Generated_Source\PSoC4/CyLib.c **** 
1775:Generated_Source\PSoC4/CyLib.c ****         uint32 q;
1776:Generated_Source\PSoC4/CyLib.c ****         uint32 p;
1777:Generated_Source\PSoC4/CyLib.c **** 
1778:Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
1779:Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
1780:Generated_Source\PSoC4/CyLib.c **** 
1781:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1782:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1783:Generated_Source\PSoC4/CyLib.c **** 
1784:Generated_Source\PSoC4/CyLib.c **** 
1785:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1786:Generated_Source\PSoC4/CyLib.c **** 
1787:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1788:Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
1789:Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
1790:Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
1791:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1792:Generated_Source\PSoC4/CyLib.c ****         {
1793:Generated_Source\PSoC4/CyLib.c **** 
1794:Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
1795:Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
1796:Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
1797:Generated_Source\PSoC4/CyLib.c **** 
1798:Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
1799:Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
1800:Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
1801:Generated_Source\PSoC4/CyLib.c **** 
1802:Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
1803:Generated_Source\PSoC4/CyLib.c ****             {
1804:Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
1805:Generated_Source\PSoC4/CyLib.c ****                 {
1806:Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
1807:Generated_Source\PSoC4/CyLib.c **** 
1808:Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
1809:Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
1810:Generated_Source\PSoC4/CyLib.c **** 
1811:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
1812:Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
1813:Generated_Source\PSoC4/CyLib.c **** 
1814:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
1815:Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
1816:Generated_Source\PSoC4/CyLib.c **** 
1817:Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
1818:Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
1819:Generated_Source\PSoC4/CyLib.c ****                     {
1820:Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
1821:Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
1822:Generated_Source\PSoC4/CyLib.c ****                         break;
1823:Generated_Source\PSoC4/CyLib.c ****                     }
1824:Generated_Source\PSoC4/CyLib.c ****                 }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 47


1825:Generated_Source\PSoC4/CyLib.c **** 
1826:Generated_Source\PSoC4/CyLib.c **** 
1827:Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
1828:Generated_Source\PSoC4/CyLib.c ****                 {
1829:Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
1830:Generated_Source\PSoC4/CyLib.c ****                     {
1831:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
1832:Generated_Source\PSoC4/CyLib.c ****                     }
1833:Generated_Source\PSoC4/CyLib.c ****                 }
1834:Generated_Source\PSoC4/CyLib.c ****             }
1835:Generated_Source\PSoC4/CyLib.c **** 
1836:Generated_Source\PSoC4/CyLib.c ****         }
1837:Generated_Source\PSoC4/CyLib.c **** 
1838:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1839:Generated_Source\PSoC4/CyLib.c ****     }
1840:Generated_Source\PSoC4/CyLib.c **** 
1841:Generated_Source\PSoC4/CyLib.c **** 
1842:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1843:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
1844:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1845:Generated_Source\PSoC4/CyLib.c ****     *
1846:Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
1847:Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
1848:Generated_Source\PSoC4/CyLib.c ****     *
1849:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1850:Generated_Source\PSoC4/CyLib.c ****     *
1851:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1852:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1853:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1
1854:Generated_Source\PSoC4/CyLib.c ****     *
1855:Generated_Source\PSoC4/CyLib.c ****     * \param source:
1856:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
1857:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock
1858:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
1859:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0]
1860:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1]
1861:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2]
1862:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3]
1863:Generated_Source\PSoC4/CyLib.c ****     *
1864:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1865:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
1866:Generated_Source\PSoC4/CyLib.c ****     {
1867:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1868:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1869:Generated_Source\PSoC4/CyLib.c **** 
1870:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1871:Generated_Source\PSoC4/CyLib.c **** 
1872:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1873:Generated_Source\PSoC4/CyLib.c ****         {
1874:Generated_Source\PSoC4/CyLib.c ****             regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
1875:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MASK(pl
1876:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG = regTmp;
1877:Generated_Source\PSoC4/CyLib.c ****         }
1878:Generated_Source\PSoC4/CyLib.c **** 
1879:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1880:Generated_Source\PSoC4/CyLib.c ****     }
1881:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 48


1882:Generated_Source\PSoC4/CyLib.c **** 
1883:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1884:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
1885:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1886:Generated_Source\PSoC4/CyLib.c ****     *
1887:Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
1888:Generated_Source\PSoC4/CyLib.c ****     *
1889:Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
1890:Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
1891:Generated_Source\PSoC4/CyLib.c ****     *
1892:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L devices.
1893:Generated_Source\PSoC4/CyLib.c ****     *
1894:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1895:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1896:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1
1897:Generated_Source\PSoC4/CyLib.c ****     *
1898:Generated_Source\PSoC4/CyLib.c ****     * \param divider:
1899:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
1900:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
1901:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
1902:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
1903:Generated_Source\PSoC4/CyLib.c ****     *
1904:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
1905:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
1906:Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
1907:Generated_Source\PSoC4/CyLib.c ****     *
1908:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1909:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
1910:Generated_Source\PSoC4/CyLib.c ****     {
1911:Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
1912:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1913:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1914:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1915:Generated_Source\PSoC4/CyLib.c **** 
1916:Generated_Source\PSoC4/CyLib.c **** 
1917:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1918:Generated_Source\PSoC4/CyLib.c **** 
1919:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1920:Generated_Source\PSoC4/CyLib.c **** 
1921:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
1922:Generated_Source\PSoC4/CyLib.c ****         {
1923:Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
1924:Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
1925:Generated_Source\PSoC4/CyLib.c **** 
1926:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
1927:Generated_Source\PSoC4/CyLib.c **** 
1928:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1929:Generated_Source\PSoC4/CyLib.c ****         }
1930:Generated_Source\PSoC4/CyLib.c **** 
1931:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1932:Generated_Source\PSoC4/CyLib.c **** 
1933:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1934:Generated_Source\PSoC4/CyLib.c ****     }
1935:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
1936:Generated_Source\PSoC4/CyLib.c **** 
1937:Generated_Source\PSoC4/CyLib.c **** 
1938:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 49


1939:Generated_Source\PSoC4/CyLib.c **** 
1940:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1941:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
1942:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1943:Generated_Source\PSoC4/CyLib.c ****     *
1944:Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
1945:Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
1946:Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
1947:Generated_Source\PSoC4/CyLib.c ****     *
1948:Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
1949:Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
1950:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
1951:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
1952:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
1953:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
1954:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
1955:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
1956:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
1957:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
1958:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
1959:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
1960:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
1961:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
1962:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
1963:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
1964:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
1965:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
1966:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
1967:Generated_Source\PSoC4/CyLib.c ****     *
1968:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1969:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
1970:Generated_Source\PSoC4/CyLib.c ****     {
 790              		.loc 1 1970 0
 791              		.cfi_startproc
 792 0000 80B5     		push	{r7, lr}
 793              		.cfi_def_cfa_offset 8
 794              		.cfi_offset 7, -8
 795              		.cfi_offset 14, -4
 796 0002 82B0     		sub	sp, sp, #8
 797              		.cfi_def_cfa_offset 16
 798 0004 00AF     		add	r7, sp, #0
 799              		.cfi_def_cfa_register 7
 800 0006 7860     		str	r0, [r7, #4]
1971:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
1972:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
 801              		.loc 1 1972 0
 802 0008 134B     		ldr	r3, .L44
 803 000a 134A     		ldr	r2, .L44
 804 000c 1268     		ldr	r2, [r2]
 805 000e 0221     		mov	r1, #2
 806 0010 8A43     		bic	r2, r1
 807 0012 1A60     		str	r2, [r3]
1973:Generated_Source\PSoC4/CyLib.c **** 
1974:Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
1975:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
 808              		.loc 1 1975 0
 809 0014 114B     		ldr	r3, .L44+4
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 50


 810 0016 114A     		ldr	r2, .L44+4
 811 0018 1268     		ldr	r2, [r2]
 812 001a 1E21     		mov	r1, #30
 813 001c 8A43     		bic	r2, r1
 814 001e 111C     		mov	r1, r2
1976:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 815              		.loc 1 1976 0
 816 0020 7A68     		ldr	r2, [r7, #4]
 817 0022 5200     		lsl	r2, r2, #1
 818 0024 1E20     		mov	r0, #30
 819 0026 0240     		and	r2, r0
1975:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
 820              		.loc 1 1975 0
 821 0028 0A43     		orr	r2, r1
 822 002a 1A60     		str	r2, [r3]
1977:Generated_Source\PSoC4/CyLib.c **** 
1978:Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
1979:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 823              		.loc 1 1979 0
 824 002c 0B4B     		ldr	r3, .L44+4
 825 002e 0B4A     		ldr	r2, .L44+4
 826 0030 1268     		ldr	r2, [r2]
 827 0032 0121     		mov	r1, #1
 828 0034 0A43     		orr	r2, r1
 829 0036 1A60     		str	r2, [r3]
1980:Generated_Source\PSoC4/CyLib.c **** 
1981:Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
1982:Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
 830              		.loc 1 1982 0
 831 0038 FA23     		mov	r3, #250
 832 003a 9B00     		lsl	r3, r3, #2
 833 003c 181C     		mov	r0, r3
 834 003e FFF7FEFF 		bl	CyDelayUs
1983:Generated_Source\PSoC4/CyLib.c **** 
1984:Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
1985:Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
 835              		.loc 1 1985 0
 836 0042 FFF7FEFF 		bl	CySysLvdClearInterrupt
1986:Generated_Source\PSoC4/CyLib.c **** 
1987:Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
1988:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
 837              		.loc 1 1988 0
 838 0046 044B     		ldr	r3, .L44
 839 0048 034A     		ldr	r2, .L44
 840 004a 1268     		ldr	r2, [r2]
 841 004c 0221     		mov	r1, #2
 842 004e 0A43     		orr	r2, r1
 843 0050 1A60     		str	r2, [r3]
1989:Generated_Source\PSoC4/CyLib.c ****     }
 844              		.loc 1 1989 0
 845 0052 BD46     		mov	sp, r7
 846 0054 02B0     		add	sp, sp, #8
 847              		@ sp needed
 848 0056 80BD     		pop	{r7, pc}
 849              	.L45:
 850              		.align	2
 851              	.L44:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 51


 852 0058 08000B40 		.word	1074462728
 853 005c 18000B40 		.word	1074462744
 854              		.cfi_endproc
 855              	.LFE10:
 856              		.size	CySysLvdEnable, .-CySysLvdEnable
 857              		.section	.text.CySysLvdDisable,"ax",%progbits
 858              		.align	2
 859              		.global	CySysLvdDisable
 860              		.code	16
 861              		.thumb_func
 862              		.type	CySysLvdDisable, %function
 863              	CySysLvdDisable:
 864              	.LFB11:
1990:Generated_Source\PSoC4/CyLib.c **** 
1991:Generated_Source\PSoC4/CyLib.c **** 
1992:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1993:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
1994:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1995:Generated_Source\PSoC4/CyLib.c ****     *
1996:Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
1997:Generated_Source\PSoC4/CyLib.c ****     *
1998:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1999:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2000:Generated_Source\PSoC4/CyLib.c ****     {
 865              		.loc 1 2000 0
 866              		.cfi_startproc
 867 0000 80B5     		push	{r7, lr}
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 7, -8
 870              		.cfi_offset 14, -4
 871 0002 00AF     		add	r7, sp, #0
 872              		.cfi_def_cfa_register 7
2001:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
 873              		.loc 1 2001 0
 874 0004 064B     		ldr	r3, .L47
 875 0006 064A     		ldr	r2, .L47
 876 0008 1268     		ldr	r2, [r2]
 877 000a 0221     		mov	r1, #2
 878 000c 8A43     		bic	r2, r1
 879 000e 1A60     		str	r2, [r3]
2002:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
 880              		.loc 1 2002 0
 881 0010 044B     		ldr	r3, .L47+4
 882 0012 044A     		ldr	r2, .L47+4
 883 0014 1268     		ldr	r2, [r2]
 884 0016 0121     		mov	r1, #1
 885 0018 8A43     		bic	r2, r1
 886 001a 1A60     		str	r2, [r3]
2003:Generated_Source\PSoC4/CyLib.c ****     }
 887              		.loc 1 2003 0
 888 001c BD46     		mov	sp, r7
 889              		@ sp needed
 890 001e 80BD     		pop	{r7, pc}
 891              	.L48:
 892              		.align	2
 893              	.L47:
 894 0020 08000B40 		.word	1074462728
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 52


 895 0024 18000B40 		.word	1074462744
 896              		.cfi_endproc
 897              	.LFE11:
 898              		.size	CySysLvdDisable, .-CySysLvdDisable
 899              		.section	.text.CySysLvdGetInterruptSource,"ax",%progbits
 900              		.align	2
 901              		.global	CySysLvdGetInterruptSource
 902              		.code	16
 903              		.thumb_func
 904              		.type	CySysLvdGetInterruptSource, %function
 905              	CySysLvdGetInterruptSource:
 906              	.LFB12:
2004:Generated_Source\PSoC4/CyLib.c **** 
2005:Generated_Source\PSoC4/CyLib.c **** 
2006:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2007:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2008:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2009:Generated_Source\PSoC4/CyLib.c ****     *
2010:Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
2011:Generated_Source\PSoC4/CyLib.c ****     *
2012:Generated_Source\PSoC4/CyLib.c ****     * \return
2013:Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2014:Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2015:Generated_Source\PSoC4/CyLib.c ****     *
2016:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2017:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2018:Generated_Source\PSoC4/CyLib.c ****     {
 907              		.loc 1 2018 0
 908              		.cfi_startproc
 909 0000 80B5     		push	{r7, lr}
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 7, -8
 912              		.cfi_offset 14, -4
 913 0002 00AF     		add	r7, sp, #0
 914              		.cfi_def_cfa_register 7
2019:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
 915              		.loc 1 2019 0
 916 0004 034B     		ldr	r3, .L51
 917 0006 1B68     		ldr	r3, [r3]
 918 0008 0222     		mov	r2, #2
 919 000a 1340     		and	r3, r2
2020:Generated_Source\PSoC4/CyLib.c ****     }
 920              		.loc 1 2020 0
 921 000c 181C     		mov	r0, r3
 922 000e BD46     		mov	sp, r7
 923              		@ sp needed
 924 0010 80BD     		pop	{r7, pc}
 925              	.L52:
 926 0012 C046     		.align	2
 927              	.L51:
 928 0014 04000B40 		.word	1074462724
 929              		.cfi_endproc
 930              	.LFE12:
 931              		.size	CySysLvdGetInterruptSource, .-CySysLvdGetInterruptSource
 932              		.section	.text.CySysLvdClearInterrupt,"ax",%progbits
 933              		.align	2
 934              		.global	CySysLvdClearInterrupt
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 53


 935              		.code	16
 936              		.thumb_func
 937              		.type	CySysLvdClearInterrupt, %function
 938              	CySysLvdClearInterrupt:
 939              	.LFB13:
2021:Generated_Source\PSoC4/CyLib.c **** 
2022:Generated_Source\PSoC4/CyLib.c **** 
2023:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2024:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2025:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2026:Generated_Source\PSoC4/CyLib.c ****     *
2027:Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
2028:Generated_Source\PSoC4/CyLib.c ****     *
2029:Generated_Source\PSoC4/CyLib.c ****     * \return
2030:Generated_Source\PSoC4/CyLib.c ****     *  None
2031:Generated_Source\PSoC4/CyLib.c ****     *
2032:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2033:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2034:Generated_Source\PSoC4/CyLib.c ****     {
 940              		.loc 1 2034 0
 941              		.cfi_startproc
 942 0000 80B5     		push	{r7, lr}
 943              		.cfi_def_cfa_offset 8
 944              		.cfi_offset 7, -8
 945              		.cfi_offset 14, -4
 946 0002 00AF     		add	r7, sp, #0
 947              		.cfi_def_cfa_register 7
2035:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
 948              		.loc 1 2035 0
 949 0004 024B     		ldr	r3, .L54
 950 0006 0222     		mov	r2, #2
 951 0008 1A60     		str	r2, [r3]
2036:Generated_Source\PSoC4/CyLib.c ****     }
 952              		.loc 1 2036 0
 953 000a BD46     		mov	sp, r7
 954              		@ sp needed
 955 000c 80BD     		pop	{r7, pc}
 956              	.L55:
 957 000e C046     		.align	2
 958              	.L54:
 959 0010 04000B40 		.word	1074462724
 960              		.cfi_endproc
 961              	.LFE13:
 962              		.size	CySysLvdClearInterrupt, .-CySysLvdClearInterrupt
 963              		.section	.text.CySysGetResetReason,"ax",%progbits
 964              		.align	2
 965              		.global	CySysGetResetReason
 966              		.code	16
 967              		.thumb_func
 968              		.type	CySysGetResetReason, %function
 969              	CySysGetResetReason:
 970              	.LFB14:
2037:Generated_Source\PSoC4/CyLib.c **** 
2038:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2039:Generated_Source\PSoC4/CyLib.c **** 
2040:Generated_Source\PSoC4/CyLib.c **** 
2041:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 54


2042:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2043:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2044:Generated_Source\PSoC4/CyLib.c **** *
2045:Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
2046:Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2047:Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2048:Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2049:Generated_Source\PSoC4/CyLib.c **** *
2050:Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2051:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2052:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2053:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
2054:Generated_Source\PSoC4/CyLib.c **** *
2055:Generated_Source\PSoC4/CyLib.c **** * \return
2056:Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2057:Generated_Source\PSoC4/CyLib.c **** *
2058:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2059:Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2060:Generated_Source\PSoC4/CyLib.c **** {
 971              		.loc 1 2060 0
 972              		.cfi_startproc
 973 0000 80B5     		push	{r7, lr}
 974              		.cfi_def_cfa_offset 8
 975              		.cfi_offset 7, -8
 976              		.cfi_offset 14, -4
 977 0002 84B0     		sub	sp, sp, #16
 978              		.cfi_def_cfa_offset 24
 979 0004 00AF     		add	r7, sp, #0
 980              		.cfi_def_cfa_register 7
 981 0006 7860     		str	r0, [r7, #4]
2061:Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2062:Generated_Source\PSoC4/CyLib.c **** 
2063:Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 982              		.loc 1 2063 0
 983 0008 7B68     		ldr	r3, [r7, #4]
 984 000a 1922     		mov	r2, #25
 985 000c 1340     		and	r3, r2
 986 000e 7B60     		str	r3, [r7, #4]
2064:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 987              		.loc 1 2064 0
 988 0010 064B     		ldr	r3, .L58
 989 0012 1B68     		ldr	r3, [r3]
 990 0014 1922     		mov	r2, #25
 991 0016 1340     		and	r3, r2
 992 0018 FB60     		str	r3, [r7, #12]
2065:Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2066:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
 993              		.loc 1 2066 0
 994 001a 044B     		ldr	r3, .L58
 995 001c 7A68     		ldr	r2, [r7, #4]
 996 001e 1A60     		str	r2, [r3]
2067:Generated_Source\PSoC4/CyLib.c **** 
2068:Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
 997              		.loc 1 2068 0
 998 0020 FB68     		ldr	r3, [r7, #12]
2069:Generated_Source\PSoC4/CyLib.c **** }
 999              		.loc 1 2069 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 55


 1000 0022 181C     		mov	r0, r3
 1001 0024 BD46     		mov	sp, r7
 1002 0026 04B0     		add	sp, sp, #16
 1003              		@ sp needed
 1004 0028 80BD     		pop	{r7, pc}
 1005              	.L59:
 1006 002a C046     		.align	2
 1007              	.L58:
 1008 002c 00030B40 		.word	1074463488
 1009              		.cfi_endproc
 1010              	.LFE14:
 1011              		.size	CySysGetResetReason, .-CySysGetResetReason
 1012              		.section	.text.CyDisableInts,"ax",%progbits
 1013              		.align	2
 1014              		.global	CyDisableInts
 1015              		.code	16
 1016              		.thumb_func
 1017              		.type	CyDisableInts, %function
 1018              	CyDisableInts:
 1019              	.LFB15:
2070:Generated_Source\PSoC4/CyLib.c **** 
2071:Generated_Source\PSoC4/CyLib.c **** 
2072:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2073:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2074:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2075:Generated_Source\PSoC4/CyLib.c **** *
2076:Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2077:Generated_Source\PSoC4/CyLib.c **** *
2078:Generated_Source\PSoC4/CyLib.c **** * \return
2079:Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2080:Generated_Source\PSoC4/CyLib.c **** *
2081:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2082:Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2083:Generated_Source\PSoC4/CyLib.c **** {
 1020              		.loc 1 2083 0
 1021              		.cfi_startproc
 1022 0000 80B5     		push	{r7, lr}
 1023              		.cfi_def_cfa_offset 8
 1024              		.cfi_offset 7, -8
 1025              		.cfi_offset 14, -4
 1026 0002 82B0     		sub	sp, sp, #8
 1027              		.cfi_def_cfa_offset 16
 1028 0004 00AF     		add	r7, sp, #0
 1029              		.cfi_def_cfa_register 7
2084:Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2085:Generated_Source\PSoC4/CyLib.c **** 
2086:Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2087:Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
 1030              		.loc 1 2087 0
 1031 0006 064B     		ldr	r3, .L62
 1032 0008 1B68     		ldr	r3, [r3]
 1033 000a 7B60     		str	r3, [r7, #4]
2088:Generated_Source\PSoC4/CyLib.c **** 
2089:Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2090:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 1034              		.loc 1 2090 0
 1035 000c 044B     		ldr	r3, .L62
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 56


 1036 000e 0122     		mov	r2, #1
 1037 0010 5242     		neg	r2, r2
 1038 0012 1A60     		str	r2, [r3]
2091:Generated_Source\PSoC4/CyLib.c **** 
2092:Generated_Source\PSoC4/CyLib.c ****     return (intState);
 1039              		.loc 1 2092 0
 1040 0014 7B68     		ldr	r3, [r7, #4]
2093:Generated_Source\PSoC4/CyLib.c **** }
 1041              		.loc 1 2093 0
 1042 0016 181C     		mov	r0, r3
 1043 0018 BD46     		mov	sp, r7
 1044 001a 02B0     		add	sp, sp, #8
 1045              		@ sp needed
 1046 001c 80BD     		pop	{r7, pc}
 1047              	.L63:
 1048 001e C046     		.align	2
 1049              	.L62:
 1050 0020 80E100E0 		.word	-536813184
 1051              		.cfi_endproc
 1052              	.LFE15:
 1053              		.size	CyDisableInts, .-CyDisableInts
 1054              		.section	.text.CyEnableInts,"ax",%progbits
 1055              		.align	2
 1056              		.global	CyEnableInts
 1057              		.code	16
 1058              		.thumb_func
 1059              		.type	CyEnableInts, %function
 1060              	CyEnableInts:
 1061              	.LFB16:
2094:Generated_Source\PSoC4/CyLib.c **** 
2095:Generated_Source\PSoC4/CyLib.c **** 
2096:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2097:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2098:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2099:Generated_Source\PSoC4/CyLib.c **** *
2100:Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2101:Generated_Source\PSoC4/CyLib.c **** *
2102:Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2103:Generated_Source\PSoC4/CyLib.c **** *
2104:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2105:Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2106:Generated_Source\PSoC4/CyLib.c **** {
 1062              		.loc 1 2106 0
 1063              		.cfi_startproc
 1064 0000 80B5     		push	{r7, lr}
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 7, -8
 1067              		.cfi_offset 14, -4
 1068 0002 82B0     		sub	sp, sp, #8
 1069              		.cfi_def_cfa_offset 16
 1070 0004 00AF     		add	r7, sp, #0
 1071              		.cfi_def_cfa_register 7
 1072 0006 7860     		str	r0, [r7, #4]
2107:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 1073              		.loc 1 2107 0
 1074 0008 024B     		ldr	r3, .L65
 1075 000a 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 57


 1076 000c 1A60     		str	r2, [r3]
2108:Generated_Source\PSoC4/CyLib.c **** }
 1077              		.loc 1 2108 0
 1078 000e BD46     		mov	sp, r7
 1079 0010 02B0     		add	sp, sp, #8
 1080              		@ sp needed
 1081 0012 80BD     		pop	{r7, pc}
 1082              	.L66:
 1083              		.align	2
 1084              	.L65:
 1085 0014 00E100E0 		.word	-536813312
 1086              		.cfi_endproc
 1087              	.LFE16:
 1088              		.size	CyEnableInts, .-CyEnableInts
 1089              		.section	.text.CyIntSetSysVector,"ax",%progbits
 1090              		.align	2
 1091              		.global	CyIntSetSysVector
 1092              		.code	16
 1093              		.thumb_func
 1094              		.type	CyIntSetSysVector, %function
 1095              	CyIntSetSysVector:
 1096              	.LFB17:
2109:Generated_Source\PSoC4/CyLib.c **** 
2110:Generated_Source\PSoC4/CyLib.c **** 
2111:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2112:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2113:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2114:Generated_Source\PSoC4/CyLib.c **** *
2115:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2116:Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2117:Generated_Source\PSoC4/CyLib.c **** *
2118:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2119:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2120:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2121:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2122:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2123:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2124:Generated_Source\PSoC4/CyLib.c **** *
2125:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2126:Generated_Source\PSoC4/CyLib.c **** *
2127:Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2128:Generated_Source\PSoC4/CyLib.c **** *
2129:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2130:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2131:Generated_Source\PSoC4/CyLib.c **** {
 1097              		.loc 1 2131 0
 1098              		.cfi_startproc
 1099 0000 80B5     		push	{r7, lr}
 1100              		.cfi_def_cfa_offset 8
 1101              		.cfi_offset 7, -8
 1102              		.cfi_offset 14, -4
 1103 0002 84B0     		sub	sp, sp, #16
 1104              		.cfi_def_cfa_offset 24
 1105 0004 00AF     		add	r7, sp, #0
 1106              		.cfi_def_cfa_register 7
 1107 0006 021C     		mov	r2, r0
 1108 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 58


 1109 000a FB1D     		add	r3, r7, #7
 1110 000c 1A70     		strb	r2, [r3]
2132:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2133:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1111              		.loc 1 2133 0
 1112 000e 8023     		mov	r3, #128
 1113 0010 9B05     		lsl	r3, r3, #22
 1114 0012 FB60     		str	r3, [r7, #12]
2134:Generated_Source\PSoC4/CyLib.c **** 
2135:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1115              		.loc 1 2135 0
 1116 0014 FB1D     		add	r3, r7, #7
 1117 0016 1B78     		ldrb	r3, [r3]
 1118 0018 0F2B     		cmp	r3, #15
 1119 001a 02D9     		bls	.L68
 1120              		.loc 1 2135 0 is_stmt 0 discriminator 1
 1121 001c 0020     		mov	r0, #0
 1122 001e FFF7FEFF 		bl	CyHalt
 1123              	.L68:
2136:Generated_Source\PSoC4/CyLib.c **** 
2137:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2138:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
 1124              		.loc 1 2138 0 is_stmt 1
 1125 0022 FB1D     		add	r3, r7, #7
 1126 0024 1B78     		ldrb	r3, [r3]
 1127 0026 9B00     		lsl	r3, r3, #2
 1128 0028 FA68     		ldr	r2, [r7, #12]
 1129 002a D318     		add	r3, r2, r3
 1130 002c 1B68     		ldr	r3, [r3]
 1131 002e BB60     		str	r3, [r7, #8]
2139:Generated_Source\PSoC4/CyLib.c **** 
2140:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2141:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
 1132              		.loc 1 2141 0
 1133 0030 FB1D     		add	r3, r7, #7
 1134 0032 1B78     		ldrb	r3, [r3]
 1135 0034 9B00     		lsl	r3, r3, #2
 1136 0036 FA68     		ldr	r2, [r7, #12]
 1137 0038 D318     		add	r3, r2, r3
 1138 003a 3A68     		ldr	r2, [r7]
 1139 003c 1A60     		str	r2, [r3]
2142:Generated_Source\PSoC4/CyLib.c **** 
2143:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1140              		.loc 1 2143 0
 1141 003e BB68     		ldr	r3, [r7, #8]
2144:Generated_Source\PSoC4/CyLib.c **** }
 1142              		.loc 1 2144 0
 1143 0040 181C     		mov	r0, r3
 1144 0042 BD46     		mov	sp, r7
 1145 0044 04B0     		add	sp, sp, #16
 1146              		@ sp needed
 1147 0046 80BD     		pop	{r7, pc}
 1148              		.cfi_endproc
 1149              	.LFE17:
 1150              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 1151              		.section	.text.CyIntGetSysVector,"ax",%progbits
 1152              		.align	2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 59


 1153              		.global	CyIntGetSysVector
 1154              		.code	16
 1155              		.thumb_func
 1156              		.type	CyIntGetSysVector, %function
 1157              	CyIntGetSysVector:
 1158              	.LFB18:
2145:Generated_Source\PSoC4/CyLib.c **** 
2146:Generated_Source\PSoC4/CyLib.c **** 
2147:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2148:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
2149:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2150:Generated_Source\PSoC4/CyLib.c **** *
2151:Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2152:Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2153:Generated_Source\PSoC4/CyLib.c **** *
2154:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2155:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2156:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2157:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2158:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2159:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2160:Generated_Source\PSoC4/CyLib.c **** *
2161:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2162:Generated_Source\PSoC4/CyLib.c **** *
2163:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2164:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2165:Generated_Source\PSoC4/CyLib.c **** {
 1159              		.loc 1 2165 0
 1160              		.cfi_startproc
 1161 0000 80B5     		push	{r7, lr}
 1162              		.cfi_def_cfa_offset 8
 1163              		.cfi_offset 7, -8
 1164              		.cfi_offset 14, -4
 1165 0002 84B0     		sub	sp, sp, #16
 1166              		.cfi_def_cfa_offset 24
 1167 0004 00AF     		add	r7, sp, #0
 1168              		.cfi_def_cfa_register 7
 1169 0006 021C     		mov	r2, r0
 1170 0008 FB1D     		add	r3, r7, #7
 1171 000a 1A70     		strb	r2, [r3]
2166:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1172              		.loc 1 2166 0
 1173 000c 8023     		mov	r3, #128
 1174 000e 9B05     		lsl	r3, r3, #22
 1175 0010 FB60     		str	r3, [r7, #12]
2167:Generated_Source\PSoC4/CyLib.c **** 
2168:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
 1176              		.loc 1 2168 0
 1177 0012 FB1D     		add	r3, r7, #7
 1178 0014 1B78     		ldrb	r3, [r3]
 1179 0016 0F2B     		cmp	r3, #15
 1180 0018 02D9     		bls	.L71
 1181              		.loc 1 2168 0 is_stmt 0 discriminator 1
 1182 001a 0020     		mov	r0, #0
 1183 001c FFF7FEFF 		bl	CyHalt
 1184              	.L71:
2169:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 60


2170:Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
 1185              		.loc 1 2170 0 is_stmt 1
 1186 0020 FB1D     		add	r3, r7, #7
 1187 0022 1B78     		ldrb	r3, [r3]
 1188 0024 9B00     		lsl	r3, r3, #2
 1189 0026 FA68     		ldr	r2, [r7, #12]
 1190 0028 D318     		add	r3, r2, r3
 1191 002a 1B68     		ldr	r3, [r3]
2171:Generated_Source\PSoC4/CyLib.c **** }
 1192              		.loc 1 2171 0
 1193 002c 181C     		mov	r0, r3
 1194 002e BD46     		mov	sp, r7
 1195 0030 04B0     		add	sp, sp, #16
 1196              		@ sp needed
 1197 0032 80BD     		pop	{r7, pc}
 1198              		.cfi_endproc
 1199              	.LFE18:
 1200              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 1201              		.section	.text.CyIntSetVector,"ax",%progbits
 1202              		.align	2
 1203              		.global	CyIntSetVector
 1204              		.code	16
 1205              		.thumb_func
 1206              		.type	CyIntSetVector, %function
 1207              	CyIntSetVector:
 1208              	.LFB19:
2172:Generated_Source\PSoC4/CyLib.c **** 
2173:Generated_Source\PSoC4/CyLib.c **** 
2174:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2175:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2176:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2177:Generated_Source\PSoC4/CyLib.c **** *
2178:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2179:Generated_Source\PSoC4/CyLib.c **** *
2180:Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2181:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2182:Generated_Source\PSoC4/CyLib.c **** *
2183:Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2184:Generated_Source\PSoC4/CyLib.c **** *
2185:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2186:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2187:Generated_Source\PSoC4/CyLib.c **** {
 1209              		.loc 1 2187 0
 1210              		.cfi_startproc
 1211 0000 80B5     		push	{r7, lr}
 1212              		.cfi_def_cfa_offset 8
 1213              		.cfi_offset 7, -8
 1214              		.cfi_offset 14, -4
 1215 0002 84B0     		sub	sp, sp, #16
 1216              		.cfi_def_cfa_offset 24
 1217 0004 00AF     		add	r7, sp, #0
 1218              		.cfi_def_cfa_register 7
 1219 0006 021C     		mov	r2, r0
 1220 0008 3960     		str	r1, [r7]
 1221 000a FB1D     		add	r3, r7, #7
 1222 000c 1A70     		strb	r2, [r3]
2188:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 61


2189:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1223              		.loc 1 2189 0
 1224 000e 8023     		mov	r3, #128
 1225 0010 9B05     		lsl	r3, r3, #22
 1226 0012 FB60     		str	r3, [r7, #12]
2190:Generated_Source\PSoC4/CyLib.c **** 
2191:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1227              		.loc 1 2191 0
 1228 0014 FB1D     		add	r3, r7, #7
 1229 0016 1B78     		ldrb	r3, [r3]
 1230 0018 1F2B     		cmp	r3, #31
 1231 001a 02D9     		bls	.L74
 1232              		.loc 1 2191 0 is_stmt 0 discriminator 1
 1233 001c 0020     		mov	r0, #0
 1234 001e FFF7FEFF 		bl	CyHalt
 1235              	.L74:
2192:Generated_Source\PSoC4/CyLib.c **** 
2193:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2194:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
 1236              		.loc 1 2194 0 is_stmt 1
 1237 0022 FB1D     		add	r3, r7, #7
 1238 0024 1B78     		ldrb	r3, [r3]
 1239 0026 1033     		add	r3, r3, #16
 1240 0028 9B00     		lsl	r3, r3, #2
 1241 002a FA68     		ldr	r2, [r7, #12]
 1242 002c D318     		add	r3, r2, r3
 1243 002e 1B68     		ldr	r3, [r3]
 1244 0030 BB60     		str	r3, [r7, #8]
2195:Generated_Source\PSoC4/CyLib.c **** 
2196:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2197:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
 1245              		.loc 1 2197 0
 1246 0032 FB1D     		add	r3, r7, #7
 1247 0034 1B78     		ldrb	r3, [r3]
 1248 0036 1033     		add	r3, r3, #16
 1249 0038 9B00     		lsl	r3, r3, #2
 1250 003a FA68     		ldr	r2, [r7, #12]
 1251 003c D318     		add	r3, r2, r3
 1252 003e 3A68     		ldr	r2, [r7]
 1253 0040 1A60     		str	r2, [r3]
2198:Generated_Source\PSoC4/CyLib.c **** 
2199:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
 1254              		.loc 1 2199 0
 1255 0042 BB68     		ldr	r3, [r7, #8]
2200:Generated_Source\PSoC4/CyLib.c **** }
 1256              		.loc 1 2200 0
 1257 0044 181C     		mov	r0, r3
 1258 0046 BD46     		mov	sp, r7
 1259 0048 04B0     		add	sp, sp, #16
 1260              		@ sp needed
 1261 004a 80BD     		pop	{r7, pc}
 1262              		.cfi_endproc
 1263              	.LFE19:
 1264              		.size	CyIntSetVector, .-CyIntSetVector
 1265              		.section	.text.CyIntGetVector,"ax",%progbits
 1266              		.align	2
 1267              		.global	CyIntGetVector
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 62


 1268              		.code	16
 1269              		.thumb_func
 1270              		.type	CyIntGetVector, %function
 1271              	CyIntGetVector:
 1272              	.LFB20:
2201:Generated_Source\PSoC4/CyLib.c **** 
2202:Generated_Source\PSoC4/CyLib.c **** 
2203:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2204:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2205:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2206:Generated_Source\PSoC4/CyLib.c **** *
2207:Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
2208:Generated_Source\PSoC4/CyLib.c **** *
2209:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2210:Generated_Source\PSoC4/CyLib.c **** *
2211:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2212:Generated_Source\PSoC4/CyLib.c **** *
2213:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2214:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
2215:Generated_Source\PSoC4/CyLib.c **** {
 1273              		.loc 1 2215 0
 1274              		.cfi_startproc
 1275 0000 80B5     		push	{r7, lr}
 1276              		.cfi_def_cfa_offset 8
 1277              		.cfi_offset 7, -8
 1278              		.cfi_offset 14, -4
 1279 0002 84B0     		sub	sp, sp, #16
 1280              		.cfi_def_cfa_offset 24
 1281 0004 00AF     		add	r7, sp, #0
 1282              		.cfi_def_cfa_register 7
 1283 0006 021C     		mov	r2, r0
 1284 0008 FB1D     		add	r3, r7, #7
 1285 000a 1A70     		strb	r2, [r3]
2216:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 1286              		.loc 1 2216 0
 1287 000c 8023     		mov	r3, #128
 1288 000e 9B05     		lsl	r3, r3, #22
 1289 0010 FB60     		str	r3, [r7, #12]
2217:Generated_Source\PSoC4/CyLib.c **** 
2218:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1290              		.loc 1 2218 0
 1291 0012 FB1D     		add	r3, r7, #7
 1292 0014 1B78     		ldrb	r3, [r3]
 1293 0016 1F2B     		cmp	r3, #31
 1294 0018 02D9     		bls	.L77
 1295              		.loc 1 2218 0 is_stmt 0 discriminator 1
 1296 001a 0020     		mov	r0, #0
 1297 001c FFF7FEFF 		bl	CyHalt
 1298              	.L77:
2219:Generated_Source\PSoC4/CyLib.c **** 
2220:Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
 1299              		.loc 1 2220 0 is_stmt 1
 1300 0020 FB1D     		add	r3, r7, #7
 1301 0022 1B78     		ldrb	r3, [r3]
 1302 0024 1033     		add	r3, r3, #16
 1303 0026 9B00     		lsl	r3, r3, #2
 1304 0028 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 63


 1305 002a D318     		add	r3, r2, r3
 1306 002c 1B68     		ldr	r3, [r3]
2221:Generated_Source\PSoC4/CyLib.c **** }
 1307              		.loc 1 2221 0
 1308 002e 181C     		mov	r0, r3
 1309 0030 BD46     		mov	sp, r7
 1310 0032 04B0     		add	sp, sp, #16
 1311              		@ sp needed
 1312 0034 80BD     		pop	{r7, pc}
 1313              		.cfi_endproc
 1314              	.LFE20:
 1315              		.size	CyIntGetVector, .-CyIntGetVector
 1316              		.section	.text.CyIntSetPriority,"ax",%progbits
 1317              		.align	2
 1318              		.global	CyIntSetPriority
 1319              		.code	16
 1320              		.thumb_func
 1321              		.type	CyIntSetPriority, %function
 1322              	CyIntSetPriority:
 1323              	.LFB21:
2222:Generated_Source\PSoC4/CyLib.c **** 
2223:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2224:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2225:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2226:Generated_Source\PSoC4/CyLib.c **** *
2227:Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2228:Generated_Source\PSoC4/CyLib.c **** *
2229:Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2230:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2231:Generated_Source\PSoC4/CyLib.c **** *
2232:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2233:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2234:Generated_Source\PSoC4/CyLib.c **** {
 1324              		.loc 1 2234 0
 1325              		.cfi_startproc
 1326 0000 90B5     		push	{r4, r7, lr}
 1327              		.cfi_def_cfa_offset 12
 1328              		.cfi_offset 4, -12
 1329              		.cfi_offset 7, -8
 1330              		.cfi_offset 14, -4
 1331 0002 87B0     		sub	sp, sp, #28
 1332              		.cfi_def_cfa_offset 40
 1333 0004 00AF     		add	r7, sp, #0
 1334              		.cfi_def_cfa_register 7
 1335 0006 021C     		mov	r2, r0
 1336 0008 FB1D     		add	r3, r7, #7
 1337 000a 1A70     		strb	r2, [r3]
 1338 000c BB1D     		add	r3, r7, #6
 1339 000e 0A1C     		add	r2, r1, #0
 1340 0010 1A70     		strb	r2, [r3]
2235:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2236:Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2237:Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2238:Generated_Source\PSoC4/CyLib.c **** 
2239:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
 1341              		.loc 1 2239 0
 1342 0012 BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 64


 1343 0014 1B78     		ldrb	r3, [r3]
 1344 0016 032B     		cmp	r3, #3
 1345 0018 02D9     		bls	.L80
 1346              		.loc 1 2239 0 is_stmt 0 discriminator 1
 1347 001a 0020     		mov	r0, #0
 1348 001c FFF7FEFF 		bl	CyHalt
 1349              	.L80:
2240:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1350              		.loc 1 2240 0 is_stmt 1
 1351 0020 FB1D     		add	r3, r7, #7
 1352 0022 1B78     		ldrb	r3, [r3]
 1353 0024 1F2B     		cmp	r3, #31
 1354 0026 02D9     		bls	.L81
 1355              		.loc 1 2240 0 is_stmt 0 discriminator 1
 1356 0028 0020     		mov	r0, #0
 1357 002a FFF7FEFF 		bl	CyHalt
 1358              	.L81:
2241:Generated_Source\PSoC4/CyLib.c **** 
2242:Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
 1359              		.loc 1 2242 0 is_stmt 1
 1360 002e FB1D     		add	r3, r7, #7
 1361 0030 1B78     		ldrb	r3, [r3]
 1362 0032 0322     		mov	r2, #3
 1363 0034 1340     		and	r3, r2
 1364 0036 DB00     		lsl	r3, r3, #3
 1365 0038 0633     		add	r3, r3, #6
 1366 003a 7B61     		str	r3, [r7, #20]
2243:Generated_Source\PSoC4/CyLib.c **** 
2244:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 1367              		.loc 1 2244 0
 1368 003c 1323     		mov	r3, #19
 1369 003e FC18     		add	r4, r7, r3
 1370 0040 FFF7FEFF 		bl	CyEnterCriticalSection
 1371 0044 031C     		mov	r3, r0
 1372 0046 2370     		strb	r3, [r4]
2245:Generated_Source\PSoC4/CyLib.c **** 
2246:Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
 1373              		.loc 1 2246 0
 1374 0048 FB1D     		add	r3, r7, #7
 1375 004a 1B78     		ldrb	r3, [r3]
 1376 004c 9B08     		lsr	r3, r3, #2
 1377 004e DBB2     		uxtb	r3, r3
 1378 0050 9B00     		lsl	r3, r3, #2
 1379 0052 144A     		ldr	r2, .L82
 1380 0054 9446     		mov	ip, r2
 1381 0056 6344     		add	r3, r3, ip
 1382 0058 1B68     		ldr	r3, [r3]
 1383 005a FB60     		str	r3, [r7, #12]
2247:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 1384              		.loc 1 2247 0
 1385 005c 7B69     		ldr	r3, [r7, #20]
 1386 005e 0322     		mov	r2, #3
 1387 0060 9A40     		lsl	r2, r2, r3
 1388 0062 131C     		mov	r3, r2
 1389 0064 DA43     		mvn	r2, r3
 1390 0066 FB68     		ldr	r3, [r7, #12]
 1391 0068 1340     		and	r3, r2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 65


 1392 006a FB60     		str	r3, [r7, #12]
2248:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 1393              		.loc 1 2248 0
 1394 006c BB1D     		add	r3, r7, #6
 1395 006e 1A78     		ldrb	r2, [r3]
 1396 0070 7B69     		ldr	r3, [r7, #20]
 1397 0072 9A40     		lsl	r2, r2, r3
 1398 0074 131C     		mov	r3, r2
 1399 0076 FA68     		ldr	r2, [r7, #12]
 1400 0078 1343     		orr	r3, r2
 1401 007a FB60     		str	r3, [r7, #12]
2249:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 1402              		.loc 1 2249 0
 1403 007c FB1D     		add	r3, r7, #7
 1404 007e 1B78     		ldrb	r3, [r3]
 1405 0080 9B08     		lsr	r3, r3, #2
 1406 0082 DBB2     		uxtb	r3, r3
 1407 0084 9B00     		lsl	r3, r3, #2
 1408 0086 074A     		ldr	r2, .L82
 1409 0088 9446     		mov	ip, r2
 1410 008a 6344     		add	r3, r3, ip
 1411 008c FA68     		ldr	r2, [r7, #12]
 1412 008e 1A60     		str	r2, [r3]
2250:Generated_Source\PSoC4/CyLib.c **** 
2251:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 1413              		.loc 1 2251 0
 1414 0090 1323     		mov	r3, #19
 1415 0092 FB18     		add	r3, r7, r3
 1416 0094 1B78     		ldrb	r3, [r3]
 1417 0096 181C     		mov	r0, r3
 1418 0098 FFF7FEFF 		bl	CyExitCriticalSection
2252:Generated_Source\PSoC4/CyLib.c **** }
 1419              		.loc 1 2252 0
 1420 009c BD46     		mov	sp, r7
 1421 009e 07B0     		add	sp, sp, #28
 1422              		@ sp needed
 1423 00a0 90BD     		pop	{r4, r7, pc}
 1424              	.L83:
 1425 00a2 C046     		.align	2
 1426              	.L82:
 1427 00a4 00E400E0 		.word	-536812544
 1428              		.cfi_endproc
 1429              	.LFE21:
 1430              		.size	CyIntSetPriority, .-CyIntSetPriority
 1431              		.section	.text.CyIntGetPriority,"ax",%progbits
 1432              		.align	2
 1433              		.global	CyIntGetPriority
 1434              		.code	16
 1435              		.thumb_func
 1436              		.type	CyIntGetPriority, %function
 1437              	CyIntGetPriority:
 1438              	.LFB22:
2253:Generated_Source\PSoC4/CyLib.c **** 
2254:Generated_Source\PSoC4/CyLib.c **** 
2255:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2256:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2257:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 66


2258:Generated_Source\PSoC4/CyLib.c **** *
2259:Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2260:Generated_Source\PSoC4/CyLib.c **** *
2261:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2262:Generated_Source\PSoC4/CyLib.c **** *
2263:Generated_Source\PSoC4/CyLib.c **** * \return
2264:Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2265:Generated_Source\PSoC4/CyLib.c **** *
2266:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2267:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2268:Generated_Source\PSoC4/CyLib.c **** {
 1439              		.loc 1 2268 0
 1440              		.cfi_startproc
 1441 0000 80B5     		push	{r7, lr}
 1442              		.cfi_def_cfa_offset 8
 1443              		.cfi_offset 7, -8
 1444              		.cfi_offset 14, -4
 1445 0002 84B0     		sub	sp, sp, #16
 1446              		.cfi_def_cfa_offset 24
 1447 0004 00AF     		add	r7, sp, #0
 1448              		.cfi_def_cfa_register 7
 1449 0006 021C     		mov	r2, r0
 1450 0008 FB1D     		add	r3, r7, #7
 1451 000a 1A70     		strb	r2, [r3]
2269:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2270:Generated_Source\PSoC4/CyLib.c **** 
2271:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 1452              		.loc 1 2271 0
 1453 000c FB1D     		add	r3, r7, #7
 1454 000e 1B78     		ldrb	r3, [r3]
 1455 0010 1F2B     		cmp	r3, #31
 1456 0012 02D9     		bls	.L85
 1457              		.loc 1 2271 0 is_stmt 0 discriminator 1
 1458 0014 0020     		mov	r0, #0
 1459 0016 FFF7FEFF 		bl	CyHalt
 1460              	.L85:
2272:Generated_Source\PSoC4/CyLib.c **** 
2273:Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
 1461              		.loc 1 2273 0 is_stmt 1
 1462 001a FB1D     		add	r3, r7, #7
 1463 001c 1B78     		ldrb	r3, [r3]
 1464 001e 9B08     		lsr	r3, r3, #2
 1465 0020 DBB2     		uxtb	r3, r3
 1466 0022 9B00     		lsl	r3, r3, #2
 1467 0024 0C4A     		ldr	r2, .L87
 1468 0026 9446     		mov	ip, r2
 1469 0028 6344     		add	r3, r3, ip
 1470 002a 1B68     		ldr	r3, [r3]
 1471 002c FA1D     		add	r2, r7, #7
 1472 002e 1278     		ldrb	r2, [r2]
 1473 0030 0321     		mov	r1, #3
 1474 0032 0A40     		and	r2, r1
 1475 0034 D200     		lsl	r2, r2, #3
 1476 0036 0632     		add	r2, r2, #6
 1477 0038 D340     		lsr	r3, r3, r2
 1478 003a 1A1C     		mov	r2, r3
 1479 003c 0F23     		mov	r3, #15
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 67


 1480 003e FB18     		add	r3, r7, r3
 1481 0040 1A70     		strb	r2, [r3]
2274:Generated_Source\PSoC4/CyLib.c **** 
2275:Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
 1482              		.loc 1 2275 0
 1483 0042 0F23     		mov	r3, #15
 1484 0044 FB18     		add	r3, r7, r3
 1485 0046 1B78     		ldrb	r3, [r3]
 1486 0048 0322     		mov	r2, #3
 1487 004a 1340     		and	r3, r2
 1488 004c DBB2     		uxtb	r3, r3
2276:Generated_Source\PSoC4/CyLib.c **** }
 1489              		.loc 1 2276 0
 1490 004e 181C     		mov	r0, r3
 1491 0050 BD46     		mov	sp, r7
 1492 0052 04B0     		add	sp, sp, #16
 1493              		@ sp needed
 1494 0054 80BD     		pop	{r7, pc}
 1495              	.L88:
 1496 0056 C046     		.align	2
 1497              	.L87:
 1498 0058 00E400E0 		.word	-536812544
 1499              		.cfi_endproc
 1500              	.LFE22:
 1501              		.size	CyIntGetPriority, .-CyIntGetPriority
 1502              		.section	.text.CyIntEnable,"ax",%progbits
 1503              		.align	2
 1504              		.global	CyIntEnable
 1505              		.code	16
 1506              		.thumb_func
 1507              		.type	CyIntEnable, %function
 1508              	CyIntEnable:
 1509              	.LFB23:
2277:Generated_Source\PSoC4/CyLib.c **** 
2278:Generated_Source\PSoC4/CyLib.c **** 
2279:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2280:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2281:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2282:Generated_Source\PSoC4/CyLib.c **** *
2283:Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2284:Generated_Source\PSoC4/CyLib.c **** *
2285:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2286:Generated_Source\PSoC4/CyLib.c **** *
2287:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2288:Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2289:Generated_Source\PSoC4/CyLib.c **** {
 1510              		.loc 1 2289 0
 1511              		.cfi_startproc
 1512 0000 80B5     		push	{r7, lr}
 1513              		.cfi_def_cfa_offset 8
 1514              		.cfi_offset 7, -8
 1515              		.cfi_offset 14, -4
 1516 0002 82B0     		sub	sp, sp, #8
 1517              		.cfi_def_cfa_offset 16
 1518 0004 00AF     		add	r7, sp, #0
 1519              		.cfi_def_cfa_register 7
 1520 0006 021C     		mov	r2, r0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 68


 1521 0008 FB1D     		add	r3, r7, #7
 1522 000a 1A70     		strb	r2, [r3]
2290:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1523              		.loc 1 2290 0
 1524 000c 054B     		ldr	r3, .L90
 1525 000e FA1D     		add	r2, r7, #7
 1526 0010 1278     		ldrb	r2, [r2]
 1527 0012 1F21     		mov	r1, #31
 1528 0014 0A40     		and	r2, r1
 1529 0016 0121     		mov	r1, #1
 1530 0018 9140     		lsl	r1, r1, r2
 1531 001a 0A1C     		mov	r2, r1
 1532 001c 1A60     		str	r2, [r3]
2291:Generated_Source\PSoC4/CyLib.c **** }
 1533              		.loc 1 2291 0
 1534 001e BD46     		mov	sp, r7
 1535 0020 02B0     		add	sp, sp, #8
 1536              		@ sp needed
 1537 0022 80BD     		pop	{r7, pc}
 1538              	.L91:
 1539              		.align	2
 1540              	.L90:
 1541 0024 00E100E0 		.word	-536813312
 1542              		.cfi_endproc
 1543              	.LFE23:
 1544              		.size	CyIntEnable, .-CyIntEnable
 1545              		.section	.text.CyIntGetState,"ax",%progbits
 1546              		.align	2
 1547              		.global	CyIntGetState
 1548              		.code	16
 1549              		.thumb_func
 1550              		.type	CyIntGetState, %function
 1551              	CyIntGetState:
 1552              	.LFB24:
2292:Generated_Source\PSoC4/CyLib.c **** 
2293:Generated_Source\PSoC4/CyLib.c **** 
2294:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2295:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
2296:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2297:Generated_Source\PSoC4/CyLib.c **** *
2298:Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2299:Generated_Source\PSoC4/CyLib.c **** *
2300:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2301:Generated_Source\PSoC4/CyLib.c **** *
2302:Generated_Source\PSoC4/CyLib.c **** * \return
2303:Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2304:Generated_Source\PSoC4/CyLib.c **** *
2305:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2306:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
2307:Generated_Source\PSoC4/CyLib.c **** {
 1553              		.loc 1 2307 0
 1554              		.cfi_startproc
 1555 0000 80B5     		push	{r7, lr}
 1556              		.cfi_def_cfa_offset 8
 1557              		.cfi_offset 7, -8
 1558              		.cfi_offset 14, -4
 1559 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 69


 1560              		.cfi_def_cfa_offset 16
 1561 0004 00AF     		add	r7, sp, #0
 1562              		.cfi_def_cfa_register 7
 1563 0006 021C     		mov	r2, r0
 1564 0008 FB1D     		add	r3, r7, #7
 1565 000a 1A70     		strb	r2, [r3]
2308:Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
2309:Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 1566              		.loc 1 2309 0
 1567 000c 074B     		ldr	r3, .L94
 1568 000e 1A68     		ldr	r2, [r3]
 1569 0010 FB1D     		add	r3, r7, #7
 1570 0012 1B78     		ldrb	r3, [r3]
 1571 0014 1F21     		mov	r1, #31
 1572 0016 0B40     		and	r3, r1
 1573 0018 DA40     		lsr	r2, r2, r3
 1574 001a 131C     		mov	r3, r2
 1575 001c DBB2     		uxtb	r3, r3
 1576 001e 0122     		mov	r2, #1
 1577 0020 1340     		and	r3, r2
 1578 0022 DBB2     		uxtb	r3, r3
2310:Generated_Source\PSoC4/CyLib.c **** }
 1579              		.loc 1 2310 0
 1580 0024 181C     		mov	r0, r3
 1581 0026 BD46     		mov	sp, r7
 1582 0028 02B0     		add	sp, sp, #8
 1583              		@ sp needed
 1584 002a 80BD     		pop	{r7, pc}
 1585              	.L95:
 1586              		.align	2
 1587              	.L94:
 1588 002c 00E100E0 		.word	-536813312
 1589              		.cfi_endproc
 1590              	.LFE24:
 1591              		.size	CyIntGetState, .-CyIntGetState
 1592              		.section	.text.CyIntDisable,"ax",%progbits
 1593              		.align	2
 1594              		.global	CyIntDisable
 1595              		.code	16
 1596              		.thumb_func
 1597              		.type	CyIntDisable, %function
 1598              	CyIntDisable:
 1599              	.LFB25:
2311:Generated_Source\PSoC4/CyLib.c **** 
2312:Generated_Source\PSoC4/CyLib.c **** 
2313:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2314:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
2315:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2316:Generated_Source\PSoC4/CyLib.c **** *
2317:Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
2318:Generated_Source\PSoC4/CyLib.c **** *
2319:Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
2320:Generated_Source\PSoC4/CyLib.c **** *
2321:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2322:Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
2323:Generated_Source\PSoC4/CyLib.c **** {
 1600              		.loc 1 2323 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 70


 1601              		.cfi_startproc
 1602 0000 80B5     		push	{r7, lr}
 1603              		.cfi_def_cfa_offset 8
 1604              		.cfi_offset 7, -8
 1605              		.cfi_offset 14, -4
 1606 0002 82B0     		sub	sp, sp, #8
 1607              		.cfi_def_cfa_offset 16
 1608 0004 00AF     		add	r7, sp, #0
 1609              		.cfi_def_cfa_register 7
 1610 0006 021C     		mov	r2, r0
 1611 0008 FB1D     		add	r3, r7, #7
 1612 000a 1A70     		strb	r2, [r3]
2324:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1613              		.loc 1 2324 0
 1614 000c 054B     		ldr	r3, .L97
 1615 000e FA1D     		add	r2, r7, #7
 1616 0010 1278     		ldrb	r2, [r2]
 1617 0012 1F21     		mov	r1, #31
 1618 0014 0A40     		and	r2, r1
 1619 0016 0121     		mov	r1, #1
 1620 0018 9140     		lsl	r1, r1, r2
 1621 001a 0A1C     		mov	r2, r1
 1622 001c 1A60     		str	r2, [r3]
2325:Generated_Source\PSoC4/CyLib.c **** }
 1623              		.loc 1 2325 0
 1624 001e BD46     		mov	sp, r7
 1625 0020 02B0     		add	sp, sp, #8
 1626              		@ sp needed
 1627 0022 80BD     		pop	{r7, pc}
 1628              	.L98:
 1629              		.align	2
 1630              	.L97:
 1631 0024 80E100E0 		.word	-536813184
 1632              		.cfi_endproc
 1633              	.LFE25:
 1634              		.size	CyIntDisable, .-CyIntDisable
 1635              		.section	.text.CyIntSetPending,"ax",%progbits
 1636              		.align	2
 1637              		.global	CyIntSetPending
 1638              		.code	16
 1639              		.thumb_func
 1640              		.type	CyIntSetPending, %function
 1641              	CyIntSetPending:
 1642              	.LFB26:
2326:Generated_Source\PSoC4/CyLib.c **** 
2327:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2328:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
2329:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2330:Generated_Source\PSoC4/CyLib.c **** *
2331:Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
2332:Generated_Source\PSoC4/CyLib.c **** *
2333:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2334:Generated_Source\PSoC4/CyLib.c **** *
2335:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2336:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
2337:Generated_Source\PSoC4/CyLib.c **** {
 1643              		.loc 1 2337 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 71


 1644              		.cfi_startproc
 1645 0000 80B5     		push	{r7, lr}
 1646              		.cfi_def_cfa_offset 8
 1647              		.cfi_offset 7, -8
 1648              		.cfi_offset 14, -4
 1649 0002 82B0     		sub	sp, sp, #8
 1650              		.cfi_def_cfa_offset 16
 1651 0004 00AF     		add	r7, sp, #0
 1652              		.cfi_def_cfa_register 7
 1653 0006 021C     		mov	r2, r0
 1654 0008 FB1D     		add	r3, r7, #7
 1655 000a 1A70     		strb	r2, [r3]
2338:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1656              		.loc 1 2338 0
 1657 000c 054B     		ldr	r3, .L100
 1658 000e FA1D     		add	r2, r7, #7
 1659 0010 1278     		ldrb	r2, [r2]
 1660 0012 1F21     		mov	r1, #31
 1661 0014 0A40     		and	r2, r1
 1662 0016 0121     		mov	r1, #1
 1663 0018 9140     		lsl	r1, r1, r2
 1664 001a 0A1C     		mov	r2, r1
 1665 001c 1A60     		str	r2, [r3]
2339:Generated_Source\PSoC4/CyLib.c **** }
 1666              		.loc 1 2339 0
 1667 001e BD46     		mov	sp, r7
 1668 0020 02B0     		add	sp, sp, #8
 1669              		@ sp needed
 1670 0022 80BD     		pop	{r7, pc}
 1671              	.L101:
 1672              		.align	2
 1673              	.L100:
 1674 0024 00E200E0 		.word	-536813056
 1675              		.cfi_endproc
 1676              	.LFE26:
 1677              		.size	CyIntSetPending, .-CyIntSetPending
 1678              		.section	.text.CyIntClearPending,"ax",%progbits
 1679              		.align	2
 1680              		.global	CyIntClearPending
 1681              		.code	16
 1682              		.thumb_func
 1683              		.type	CyIntClearPending, %function
 1684              	CyIntClearPending:
 1685              	.LFB27:
2340:Generated_Source\PSoC4/CyLib.c **** 
2341:Generated_Source\PSoC4/CyLib.c **** 
2342:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2343:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
2344:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2345:Generated_Source\PSoC4/CyLib.c **** *
2346:Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
2347:Generated_Source\PSoC4/CyLib.c **** *
2348:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2349:Generated_Source\PSoC4/CyLib.c **** *
2350:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2351:Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
2352:Generated_Source\PSoC4/CyLib.c **** {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 72


 1686              		.loc 1 2352 0
 1687              		.cfi_startproc
 1688 0000 80B5     		push	{r7, lr}
 1689              		.cfi_def_cfa_offset 8
 1690              		.cfi_offset 7, -8
 1691              		.cfi_offset 14, -4
 1692 0002 82B0     		sub	sp, sp, #8
 1693              		.cfi_def_cfa_offset 16
 1694 0004 00AF     		add	r7, sp, #0
 1695              		.cfi_def_cfa_register 7
 1696 0006 021C     		mov	r2, r0
 1697 0008 FB1D     		add	r3, r7, #7
 1698 000a 1A70     		strb	r2, [r3]
2353:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 1699              		.loc 1 2353 0
 1700 000c 054B     		ldr	r3, .L103
 1701 000e FA1D     		add	r2, r7, #7
 1702 0010 1278     		ldrb	r2, [r2]
 1703 0012 1F21     		mov	r1, #31
 1704 0014 0A40     		and	r2, r1
 1705 0016 0121     		mov	r1, #1
 1706 0018 9140     		lsl	r1, r1, r2
 1707 001a 0A1C     		mov	r2, r1
 1708 001c 1A60     		str	r2, [r3]
2354:Generated_Source\PSoC4/CyLib.c **** }
 1709              		.loc 1 2354 0
 1710 001e BD46     		mov	sp, r7
 1711 0020 02B0     		add	sp, sp, #8
 1712              		@ sp needed
 1713 0022 80BD     		pop	{r7, pc}
 1714              	.L104:
 1715              		.align	2
 1716              	.L103:
 1717 0024 80E200E0 		.word	-536812928
 1718              		.cfi_endproc
 1719              	.LFE27:
 1720              		.size	CyIntClearPending, .-CyIntClearPending
 1721              		.section	.text.CyHalt,"ax",%progbits
 1722              		.align	2
 1723              		.global	CyHalt
 1724              		.code	16
 1725              		.thumb_func
 1726              		.type	CyHalt, %function
 1727              	CyHalt:
 1728              	.LFB28:
2355:Generated_Source\PSoC4/CyLib.c **** 
2356:Generated_Source\PSoC4/CyLib.c **** 
2357:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2358:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
2359:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2360:Generated_Source\PSoC4/CyLib.c **** *
2361:Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
2362:Generated_Source\PSoC4/CyLib.c **** *
2363:Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
2364:Generated_Source\PSoC4/CyLib.c **** *
2365:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2366:Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 73


2367:Generated_Source\PSoC4/CyLib.c **** {
 1729              		.loc 1 2367 0
 1730              		.cfi_startproc
 1731 0000 80B5     		push	{r7, lr}
 1732              		.cfi_def_cfa_offset 8
 1733              		.cfi_offset 7, -8
 1734              		.cfi_offset 14, -4
 1735 0002 82B0     		sub	sp, sp, #8
 1736              		.cfi_def_cfa_offset 16
 1737 0004 00AF     		add	r7, sp, #0
 1738              		.cfi_def_cfa_register 7
 1739 0006 021C     		mov	r2, r0
 1740 0008 FB1D     		add	r3, r7, #7
 1741 000a 1A70     		strb	r2, [r3]
2368:Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
2369:Generated_Source\PSoC4/CyLib.c ****     {
2370:Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
2371:Generated_Source\PSoC4/CyLib.c ****     }
2372:Generated_Source\PSoC4/CyLib.c **** 
2373:Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
2374:Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
2375:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
2376:Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 1742              		.loc 1 2376 0
 1743              	@ 2376 "Generated_Source\PSoC4\CyLib.c" 1
 1744 000c 01BE     		    bkpt    1
 1745              	@ 0 "" 2
2377:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
2378:Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
2379:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
2380:Generated_Source\PSoC4/CyLib.c **** }
 1746              		.loc 1 2380 0
 1747              		.code	16
 1748 000e BD46     		mov	sp, r7
 1749 0010 02B0     		add	sp, sp, #8
 1750              		@ sp needed
 1751 0012 80BD     		pop	{r7, pc}
 1752              		.cfi_endproc
 1753              	.LFE28:
 1754              		.size	CyHalt, .-CyHalt
 1755              		.section	.text.CySoftwareReset,"ax",%progbits
 1756              		.align	2
 1757              		.global	CySoftwareReset
 1758              		.code	16
 1759              		.thumb_func
 1760              		.type	CySoftwareReset, %function
 1761              	CySoftwareReset:
 1762              	.LFB29:
2381:Generated_Source\PSoC4/CyLib.c **** 
2382:Generated_Source\PSoC4/CyLib.c **** 
2383:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2384:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
2385:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2386:Generated_Source\PSoC4/CyLib.c **** *
2387:Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
2388:Generated_Source\PSoC4/CyLib.c **** *
2389:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 74


2390:Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
2391:Generated_Source\PSoC4/CyLib.c **** {
 1763              		.loc 1 2391 0
 1764              		.cfi_startproc
 1765 0000 80B5     		push	{r7, lr}
 1766              		.cfi_def_cfa_offset 8
 1767              		.cfi_offset 7, -8
 1768              		.cfi_offset 14, -4
 1769 0002 00AF     		add	r7, sp, #0
 1770              		.cfi_def_cfa_register 7
2392:Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
2393:Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
2394:Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
2395:Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
2396:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1771              		.loc 1 2396 0
 1772 0004 044B     		ldr	r3, .L107
 1773 0006 044A     		ldr	r2, .L107
 1774 0008 1268     		ldr	r2, [r2]
 1775 000a 1204     		lsl	r2, r2, #16
 1776 000c 120C     		lsr	r2, r2, #16
2397:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1777              		.loc 1 2397 0
 1778 000e 0349     		ldr	r1, .L107+4
 1779 0010 0A43     		orr	r2, r1
2396:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1780              		.loc 1 2396 0
 1781 0012 1A60     		str	r2, [r3]
2398:Generated_Source\PSoC4/CyLib.c **** }
 1782              		.loc 1 2398 0
 1783 0014 BD46     		mov	sp, r7
 1784              		@ sp needed
 1785 0016 80BD     		pop	{r7, pc}
 1786              	.L108:
 1787              		.align	2
 1788              	.L107:
 1789 0018 0CED00E0 		.word	-536810228
 1790 001c 0400FA05 		.word	100270084
 1791              		.cfi_endproc
 1792              	.LFE29:
 1793              		.size	CySoftwareReset, .-CySoftwareReset
 1794              		.section	.text.CyDelay,"ax",%progbits
 1795              		.align	2
 1796              		.global	CyDelay
 1797              		.code	16
 1798              		.thumb_func
 1799              		.type	CyDelay, %function
 1800              	CyDelay:
 1801              	.LFB30:
2399:Generated_Source\PSoC4/CyLib.c **** 
2400:Generated_Source\PSoC4/CyLib.c **** 
2401:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2402:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
2403:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2404:Generated_Source\PSoC4/CyLib.c **** *
2405:Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
2406:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 75


2407:Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
2408:Generated_Source\PSoC4/CyLib.c **** *
2409:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2410:Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
2411:Generated_Source\PSoC4/CyLib.c **** {
 1802              		.loc 1 2411 0
 1803              		.cfi_startproc
 1804 0000 80B5     		push	{r7, lr}
 1805              		.cfi_def_cfa_offset 8
 1806              		.cfi_offset 7, -8
 1807              		.cfi_offset 14, -4
 1808 0002 82B0     		sub	sp, sp, #8
 1809              		.cfi_def_cfa_offset 16
 1810 0004 00AF     		add	r7, sp, #0
 1811              		.cfi_def_cfa_register 7
 1812 0006 7860     		str	r0, [r7, #4]
2412:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1813              		.loc 1 2412 0
 1814 0008 09E0     		b	.L110
 1815              	.L111:
2413:Generated_Source\PSoC4/CyLib.c ****     {
2414:Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
2415:Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
2416:Generated_Source\PSoC4/CyLib.c ****          */
2417:Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1816              		.loc 1 2417 0
 1817 000a 0C4B     		ldr	r3, .L112
 1818 000c 1B68     		ldr	r3, [r3]
 1819 000e 181C     		mov	r0, r3
 1820 0010 FFF7FEFF 		bl	CyDelayCycles
2418:Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1821              		.loc 1 2418 0
 1822 0014 7B68     		ldr	r3, [r7, #4]
 1823 0016 0A4A     		ldr	r2, .L112+4
 1824 0018 9446     		mov	ip, r2
 1825 001a 6344     		add	r3, r3, ip
 1826 001c 7B60     		str	r3, [r7, #4]
 1827              	.L110:
2412:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1828              		.loc 1 2412 0
 1829 001e 7A68     		ldr	r2, [r7, #4]
 1830 0020 8023     		mov	r3, #128
 1831 0022 1B02     		lsl	r3, r3, #8
 1832 0024 9A42     		cmp	r2, r3
 1833 0026 F0D8     		bhi	.L111
2419:Generated_Source\PSoC4/CyLib.c ****     }
2420:Generated_Source\PSoC4/CyLib.c **** 
2421:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 1834              		.loc 1 2421 0
 1835 0028 064B     		ldr	r3, .L112+8
 1836 002a 1B68     		ldr	r3, [r3]
 1837 002c 7A68     		ldr	r2, [r7, #4]
 1838 002e 5343     		mul	r3, r2
 1839 0030 181C     		mov	r0, r3
 1840 0032 FFF7FEFF 		bl	CyDelayCycles
2422:Generated_Source\PSoC4/CyLib.c **** }
 1841              		.loc 1 2422 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 76


 1842 0036 BD46     		mov	sp, r7
 1843 0038 02B0     		add	sp, sp, #8
 1844              		@ sp needed
 1845 003a 80BD     		pop	{r7, pc}
 1846              	.L113:
 1847              		.align	2
 1848              	.L112:
 1849 003c 00000000 		.word	cydelay32kMs
 1850 0040 0080FFFF 		.word	-32768
 1851 0044 00000000 		.word	cydelayFreqKhz
 1852              		.cfi_endproc
 1853              	.LFE30:
 1854              		.size	CyDelay, .-CyDelay
 1855              		.section	.text.CyDelayUs,"ax",%progbits
 1856              		.align	2
 1857              		.global	CyDelayUs
 1858              		.code	16
 1859              		.thumb_func
 1860              		.type	CyDelayUs, %function
 1861              	CyDelayUs:
 1862              	.LFB31:
2423:Generated_Source\PSoC4/CyLib.c **** 
2424:Generated_Source\PSoC4/CyLib.c **** 
2425:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2426:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
2427:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2428:Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
2429:Generated_Source\PSoC4/CyLib.c **** *
2430:Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
2431:Generated_Source\PSoC4/CyLib.c **** *
2432:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2433:Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
2434:Generated_Source\PSoC4/CyLib.c **** {
 1863              		.loc 1 2434 0
 1864              		.cfi_startproc
 1865 0000 80B5     		push	{r7, lr}
 1866              		.cfi_def_cfa_offset 8
 1867              		.cfi_offset 7, -8
 1868              		.cfi_offset 14, -4
 1869 0002 82B0     		sub	sp, sp, #8
 1870              		.cfi_def_cfa_offset 16
 1871 0004 00AF     		add	r7, sp, #0
 1872              		.cfi_def_cfa_register 7
 1873 0006 021C     		mov	r2, r0
 1874 0008 BB1D     		add	r3, r7, #6
 1875 000a 1A80     		strh	r2, [r3]
2435:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1876              		.loc 1 2435 0
 1877 000c BB1D     		add	r3, r7, #6
 1878 000e 1B88     		ldrh	r3, [r3]
 1879 0010 044A     		ldr	r2, .L115
 1880 0012 1278     		ldrb	r2, [r2]
 1881 0014 5343     		mul	r3, r2
 1882 0016 181C     		mov	r0, r3
 1883 0018 FFF7FEFF 		bl	CyDelayCycles
2436:Generated_Source\PSoC4/CyLib.c **** }
 1884              		.loc 1 2436 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 77


 1885 001c BD46     		mov	sp, r7
 1886 001e 02B0     		add	sp, sp, #8
 1887              		@ sp needed
 1888 0020 80BD     		pop	{r7, pc}
 1889              	.L116:
 1890 0022 C046     		.align	2
 1891              	.L115:
 1892 0024 00000000 		.word	cydelayFreqMhz
 1893              		.cfi_endproc
 1894              	.LFE31:
 1895              		.size	CyDelayUs, .-CyDelayUs
 1896              		.global	__aeabi_uidiv
 1897              		.section	.text.CyDelayFreq,"ax",%progbits
 1898              		.align	2
 1899              		.global	CyDelayFreq
 1900              		.code	16
 1901              		.thumb_func
 1902              		.type	CyDelayFreq, %function
 1903              	CyDelayFreq:
 1904              	.LFB32:
2437:Generated_Source\PSoC4/CyLib.c **** 
2438:Generated_Source\PSoC4/CyLib.c **** 
2439:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2440:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
2441:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2442:Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
2443:Generated_Source\PSoC4/CyLib.c **** *
2444:Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
2445:Generated_Source\PSoC4/CyLib.c **** *
2446:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2447:Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
2448:Generated_Source\PSoC4/CyLib.c **** {
 1905              		.loc 1 2448 0
 1906              		.cfi_startproc
 1907 0000 80B5     		push	{r7, lr}
 1908              		.cfi_def_cfa_offset 8
 1909              		.cfi_offset 7, -8
 1910              		.cfi_offset 14, -4
 1911 0002 82B0     		sub	sp, sp, #8
 1912              		.cfi_def_cfa_offset 16
 1913 0004 00AF     		add	r7, sp, #0
 1914              		.cfi_def_cfa_register 7
 1915 0006 7860     		str	r0, [r7, #4]
2449:Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 1916              		.loc 1 2449 0
 1917 0008 7B68     		ldr	r3, [r7, #4]
 1918 000a 002B     		cmp	r3, #0
 1919 000c 03D0     		beq	.L118
2450:Generated_Source\PSoC4/CyLib.c ****     {
2451:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 1920              		.loc 1 2451 0
 1921 000e 154B     		ldr	r3, .L120
 1922 0010 7A68     		ldr	r2, [r7, #4]
 1923 0012 1A60     		str	r2, [r3]
 1924 0014 02E0     		b	.L119
 1925              	.L118:
2452:Generated_Source\PSoC4/CyLib.c ****     }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 78


2453:Generated_Source\PSoC4/CyLib.c ****     else
2454:Generated_Source\PSoC4/CyLib.c ****     {
2455:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 1926              		.loc 1 2455 0
 1927 0016 134B     		ldr	r3, .L120
 1928 0018 134A     		ldr	r2, .L120+4
 1929 001a 1A60     		str	r2, [r3]
 1930              	.L119:
2456:Generated_Source\PSoC4/CyLib.c ****     }
2457:Generated_Source\PSoC4/CyLib.c **** 
2458:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 1931              		.loc 1 2458 0
 1932 001c 114B     		ldr	r3, .L120
 1933 001e 1B68     		ldr	r3, [r3]
 1934 0020 124A     		ldr	r2, .L120+8
 1935 0022 9446     		mov	ip, r2
 1936 0024 6344     		add	r3, r3, ip
 1937 0026 181C     		mov	r0, r3
 1938 0028 1149     		ldr	r1, .L120+12
 1939 002a FFF7FEFF 		bl	__aeabi_uidiv
 1940 002e 031C     		mov	r3, r0
 1941 0030 DAB2     		uxtb	r2, r3
 1942 0032 104B     		ldr	r3, .L120+16
 1943 0034 1A70     		strb	r2, [r3]
2459:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 1944              		.loc 1 2459 0
 1945 0036 0B4B     		ldr	r3, .L120
 1946 0038 1B68     		ldr	r3, [r3]
 1947 003a 0F4A     		ldr	r2, .L120+20
 1948 003c 9446     		mov	ip, r2
 1949 003e 6344     		add	r3, r3, ip
 1950 0040 181C     		mov	r0, r3
 1951 0042 FA23     		mov	r3, #250
 1952 0044 9900     		lsl	r1, r3, #2
 1953 0046 FFF7FEFF 		bl	__aeabi_uidiv
 1954 004a 031C     		mov	r3, r0
 1955 004c 1A1C     		mov	r2, r3
 1956 004e 0B4B     		ldr	r3, .L120+24
 1957 0050 1A60     		str	r2, [r3]
2460:Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 1958              		.loc 1 2460 0
 1959 0052 0A4B     		ldr	r3, .L120+24
 1960 0054 1B68     		ldr	r3, [r3]
 1961 0056 DA03     		lsl	r2, r3, #15
 1962 0058 094B     		ldr	r3, .L120+28
 1963 005a 1A60     		str	r2, [r3]
2461:Generated_Source\PSoC4/CyLib.c **** }
 1964              		.loc 1 2461 0
 1965 005c BD46     		mov	sp, r7
 1966 005e 02B0     		add	sp, sp, #8
 1967              		@ sp needed
 1968 0060 80BD     		pop	{r7, pc}
 1969              	.L121:
 1970 0062 C046     		.align	2
 1971              	.L120:
 1972 0064 00000000 		.word	cydelayFreqHz
 1973 0068 005A6202 		.word	40000000
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 79


 1974 006c 3F420F00 		.word	999999
 1975 0070 40420F00 		.word	1000000
 1976 0074 00000000 		.word	cydelayFreqMhz
 1977 0078 E7030000 		.word	999
 1978 007c 00000000 		.word	cydelayFreqKhz
 1979 0080 00000000 		.word	cydelay32kMs
 1980              		.cfi_endproc
 1981              	.LFE32:
 1982              		.size	CyDelayFreq, .-CyDelayFreq
 1983              		.section	.text.CySysTickStart,"ax",%progbits
 1984              		.align	2
 1985              		.global	CySysTickStart
 1986              		.code	16
 1987              		.thumb_func
 1988              		.type	CySysTickStart, %function
 1989              	CySysTickStart:
 1990              	.LFB33:
2462:Generated_Source\PSoC4/CyLib.c **** 
2463:Generated_Source\PSoC4/CyLib.c **** 
2464:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2465:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
2466:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2467:Generated_Source\PSoC4/CyLib.c **** *
2468:Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
2469:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
2470:Generated_Source\PSoC4/CyLib.c **** *
2471:Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default 
2472:Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact 
2473:Generated_Source\PSoC4/CyLib.c **** *  their functionality.
2474:Generated_Source\PSoC4/CyLib.c **** *
2475:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2476:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2477:Generated_Source\PSoC4/CyLib.c **** *
2478:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2479:Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
2480:Generated_Source\PSoC4/CyLib.c **** {
 1991              		.loc 1 2480 0
 1992              		.cfi_startproc
 1993 0000 80B5     		push	{r7, lr}
 1994              		.cfi_def_cfa_offset 8
 1995              		.cfi_offset 7, -8
 1996              		.cfi_offset 14, -4
 1997 0002 00AF     		add	r7, sp, #0
 1998              		.cfi_def_cfa_register 7
2481:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 1999              		.loc 1 2481 0
 2000 0004 064B     		ldr	r3, .L124
 2001 0006 1B68     		ldr	r3, [r3]
 2002 0008 002B     		cmp	r3, #0
 2003 000a 04D1     		bne	.L123
2482:Generated_Source\PSoC4/CyLib.c ****     {
2483:Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
 2004              		.loc 1 2483 0
 2005 000c FFF7FEFF 		bl	CySysTickInit
2484:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 2006              		.loc 1 2484 0
 2007 0010 034B     		ldr	r3, .L124
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 80


 2008 0012 0122     		mov	r2, #1
 2009 0014 1A60     		str	r2, [r3]
 2010              	.L123:
2485:Generated_Source\PSoC4/CyLib.c ****     }
2486:Generated_Source\PSoC4/CyLib.c **** 
2487:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
 2011              		.loc 1 2487 0
 2012 0016 FFF7FEFF 		bl	CySysTickEnable
2488:Generated_Source\PSoC4/CyLib.c **** }
 2013              		.loc 1 2488 0
 2014 001a BD46     		mov	sp, r7
 2015              		@ sp needed
 2016 001c 80BD     		pop	{r7, pc}
 2017              	.L125:
 2018 001e C046     		.align	2
 2019              	.L124:
 2020 0020 00000000 		.word	CySysTickInitVar
 2021              		.cfi_endproc
 2022              	.LFE33:
 2023              		.size	CySysTickStart, .-CySysTickStart
 2024              		.section	.text.CySysTickInit,"ax",%progbits
 2025              		.align	2
 2026              		.global	CySysTickInit
 2027              		.code	16
 2028              		.thumb_func
 2029              		.type	CySysTickInit, %function
 2030              	CySysTickInit:
 2031              	.LFB34:
2489:Generated_Source\PSoC4/CyLib.c **** 
2490:Generated_Source\PSoC4/CyLib.c **** 
2491:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2492:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
2493:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2494:Generated_Source\PSoC4/CyLib.c **** *
2495:Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
2496:Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
2497:Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
2498:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
2499:Generated_Source\PSoC4/CyLib.c **** *
2500:Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
2501:Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
2502:Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
2503:Generated_Source\PSoC4/CyLib.c **** *
2504:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2505:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2506:Generated_Source\PSoC4/CyLib.c **** *
2507:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2508:Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
2509:Generated_Source\PSoC4/CyLib.c **** {
 2032              		.loc 1 2509 0
 2033              		.cfi_startproc
 2034 0000 80B5     		push	{r7, lr}
 2035              		.cfi_def_cfa_offset 8
 2036              		.cfi_offset 7, -8
 2037              		.cfi_offset 14, -4
 2038 0002 82B0     		sub	sp, sp, #8
 2039              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 81


 2040 0004 00AF     		add	r7, sp, #0
 2041              		.cfi_def_cfa_register 7
2510:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2511:Generated_Source\PSoC4/CyLib.c **** 
2512:Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2042              		.loc 1 2512 0
 2043 0006 0023     		mov	r3, #0
 2044 0008 7B60     		str	r3, [r7, #4]
 2045 000a 07E0     		b	.L127
 2046              	.L128:
2513:Generated_Source\PSoC4/CyLib.c ****     {
2514:Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
 2047              		.loc 1 2514 0 discriminator 3
 2048 000c 124B     		ldr	r3, .L129
 2049 000e 7A68     		ldr	r2, [r7, #4]
 2050 0010 9200     		lsl	r2, r2, #2
 2051 0012 0021     		mov	r1, #0
 2052 0014 D150     		str	r1, [r2, r3]
2512:Generated_Source\PSoC4/CyLib.c ****     {
 2053              		.loc 1 2512 0 discriminator 3
 2054 0016 7B68     		ldr	r3, [r7, #4]
 2055 0018 0133     		add	r3, r3, #1
 2056 001a 7B60     		str	r3, [r7, #4]
 2057              	.L127:
2512:Generated_Source\PSoC4/CyLib.c ****     {
 2058              		.loc 1 2512 0 is_stmt 0 discriminator 1
 2059 001c 7B68     		ldr	r3, [r7, #4]
 2060 001e 042B     		cmp	r3, #4
 2061 0020 F4D9     		bls	.L128
2515:Generated_Source\PSoC4/CyLib.c ****     }
2516:Generated_Source\PSoC4/CyLib.c **** 
2517:Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
 2062              		.loc 1 2517 0 is_stmt 1
 2063 0022 0E4B     		ldr	r3, .L129+4
 2064 0024 0F20     		mov	r0, #15
 2065 0026 191C     		mov	r1, r3
 2066 0028 FFF7FEFF 		bl	CyIntSetSysVector
2518:Generated_Source\PSoC4/CyLib.c **** 
2519:Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
2520:Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
 2067              		.loc 1 2520 0
 2068 002c 0120     		mov	r0, #1
 2069 002e FFF7FEFF 		bl	CySysTickSetClockSource
2521:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2522:Generated_Source\PSoC4/CyLib.c **** 
2523:Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
 2070              		.loc 1 2523 0
 2071 0032 0B4B     		ldr	r3, .L129+8
 2072 0034 1B68     		ldr	r3, [r3]
 2073 0036 181C     		mov	r0, r3
 2074 0038 FA23     		mov	r3, #250
 2075 003a 9900     		lsl	r1, r3, #2
 2076 003c FFF7FEFF 		bl	__aeabi_uidiv
 2077 0040 031C     		mov	r3, r0
 2078 0042 181C     		mov	r0, r3
 2079 0044 FFF7FEFF 		bl	CySysTickSetReload
2524:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 82


 2080              		.loc 1 2524 0
 2081 0048 FFF7FEFF 		bl	CySysTickClear
2525:Generated_Source\PSoC4/CyLib.c ****     CyIntEnable(CY_INT_SYSTICK_IRQN);
 2082              		.loc 1 2525 0
 2083 004c 0F20     		mov	r0, #15
 2084 004e FFF7FEFF 		bl	CyIntEnable
2526:Generated_Source\PSoC4/CyLib.c **** }
 2085              		.loc 1 2526 0
 2086 0052 BD46     		mov	sp, r7
 2087 0054 02B0     		add	sp, sp, #8
 2088              		@ sp needed
 2089 0056 80BD     		pop	{r7, pc}
 2090              	.L130:
 2091              		.align	2
 2092              	.L129:
 2093 0058 00000000 		.word	CySysTickCallbacks
 2094 005c 00000000 		.word	CySysTickServiceCallbacks
 2095 0060 00000000 		.word	cydelayFreqHz
 2096              		.cfi_endproc
 2097              	.LFE34:
 2098              		.size	CySysTickInit, .-CySysTickInit
 2099              		.section	.text.CySysTickEnable,"ax",%progbits
 2100              		.align	2
 2101              		.global	CySysTickEnable
 2102              		.code	16
 2103              		.thumb_func
 2104              		.type	CySysTickEnable, %function
 2105              	CySysTickEnable:
 2106              	.LFB35:
2527:Generated_Source\PSoC4/CyLib.c **** 
2528:Generated_Source\PSoC4/CyLib.c **** 
2529:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2530:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
2531:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2532:Generated_Source\PSoC4/CyLib.c **** *
2533:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
2534:Generated_Source\PSoC4/CyLib.c **** *
2535:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2536:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2537:Generated_Source\PSoC4/CyLib.c **** *
2538:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2539:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
2540:Generated_Source\PSoC4/CyLib.c **** {
 2107              		.loc 1 2540 0
 2108              		.cfi_startproc
 2109 0000 80B5     		push	{r7, lr}
 2110              		.cfi_def_cfa_offset 8
 2111              		.cfi_offset 7, -8
 2112              		.cfi_offset 14, -4
 2113 0002 00AF     		add	r7, sp, #0
 2114              		.cfi_def_cfa_register 7
2541:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 2115              		.loc 1 2541 0
 2116 0004 FFF7FEFF 		bl	CySysTickEnableInterrupt
2542:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 2117              		.loc 1 2542 0
 2118 0008 034B     		ldr	r3, .L132
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 83


 2119 000a 034A     		ldr	r2, .L132
 2120 000c 1268     		ldr	r2, [r2]
 2121 000e 0121     		mov	r1, #1
 2122 0010 0A43     		orr	r2, r1
 2123 0012 1A60     		str	r2, [r3]
2543:Generated_Source\PSoC4/CyLib.c **** }
 2124              		.loc 1 2543 0
 2125 0014 BD46     		mov	sp, r7
 2126              		@ sp needed
 2127 0016 80BD     		pop	{r7, pc}
 2128              	.L133:
 2129              		.align	2
 2130              	.L132:
 2131 0018 10E000E0 		.word	-536813552
 2132              		.cfi_endproc
 2133              	.LFE35:
 2134              		.size	CySysTickEnable, .-CySysTickEnable
 2135              		.section	.text.CySysTickStop,"ax",%progbits
 2136              		.align	2
 2137              		.global	CySysTickStop
 2138              		.code	16
 2139              		.thumb_func
 2140              		.type	CySysTickStop, %function
 2141              	CySysTickStop:
 2142              	.LFB36:
2544:Generated_Source\PSoC4/CyLib.c **** 
2545:Generated_Source\PSoC4/CyLib.c **** 
2546:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2547:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
2548:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2549:Generated_Source\PSoC4/CyLib.c **** *
2550:Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
2551:Generated_Source\PSoC4/CyLib.c **** *
2552:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2553:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2554:Generated_Source\PSoC4/CyLib.c **** *
2555:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2556:Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
2557:Generated_Source\PSoC4/CyLib.c **** {
 2143              		.loc 1 2557 0
 2144              		.cfi_startproc
 2145 0000 80B5     		push	{r7, lr}
 2146              		.cfi_def_cfa_offset 8
 2147              		.cfi_offset 7, -8
 2148              		.cfi_offset 14, -4
 2149 0002 00AF     		add	r7, sp, #0
 2150              		.cfi_def_cfa_register 7
2558:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 2151              		.loc 1 2558 0
 2152 0004 034B     		ldr	r3, .L135
 2153 0006 034A     		ldr	r2, .L135
 2154 0008 1268     		ldr	r2, [r2]
 2155 000a 0121     		mov	r1, #1
 2156 000c 8A43     		bic	r2, r1
 2157 000e 1A60     		str	r2, [r3]
2559:Generated_Source\PSoC4/CyLib.c **** }
 2158              		.loc 1 2559 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 84


 2159 0010 BD46     		mov	sp, r7
 2160              		@ sp needed
 2161 0012 80BD     		pop	{r7, pc}
 2162              	.L136:
 2163              		.align	2
 2164              	.L135:
 2165 0014 10E000E0 		.word	-536813552
 2166              		.cfi_endproc
 2167              	.LFE36:
 2168              		.size	CySysTickStop, .-CySysTickStop
 2169              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 2170              		.align	2
 2171              		.global	CySysTickEnableInterrupt
 2172              		.code	16
 2173              		.thumb_func
 2174              		.type	CySysTickEnableInterrupt, %function
 2175              	CySysTickEnableInterrupt:
 2176              	.LFB37:
2560:Generated_Source\PSoC4/CyLib.c **** 
2561:Generated_Source\PSoC4/CyLib.c **** 
2562:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2563:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
2564:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2565:Generated_Source\PSoC4/CyLib.c **** *
2566:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
2567:Generated_Source\PSoC4/CyLib.c **** *
2568:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2569:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2570:Generated_Source\PSoC4/CyLib.c **** *
2571:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2572:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
2573:Generated_Source\PSoC4/CyLib.c **** {
 2177              		.loc 1 2573 0
 2178              		.cfi_startproc
 2179 0000 80B5     		push	{r7, lr}
 2180              		.cfi_def_cfa_offset 8
 2181              		.cfi_offset 7, -8
 2182              		.cfi_offset 14, -4
 2183 0002 00AF     		add	r7, sp, #0
 2184              		.cfi_def_cfa_register 7
2574:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 2185              		.loc 1 2574 0
 2186 0004 034B     		ldr	r3, .L138
 2187 0006 034A     		ldr	r2, .L138
 2188 0008 1268     		ldr	r2, [r2]
 2189 000a 0221     		mov	r1, #2
 2190 000c 0A43     		orr	r2, r1
 2191 000e 1A60     		str	r2, [r3]
2575:Generated_Source\PSoC4/CyLib.c **** }
 2192              		.loc 1 2575 0
 2193 0010 BD46     		mov	sp, r7
 2194              		@ sp needed
 2195 0012 80BD     		pop	{r7, pc}
 2196              	.L139:
 2197              		.align	2
 2198              	.L138:
 2199 0014 10E000E0 		.word	-536813552
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 85


 2200              		.cfi_endproc
 2201              	.LFE37:
 2202              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 2203              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
 2204              		.align	2
 2205              		.global	CySysTickDisableInterrupt
 2206              		.code	16
 2207              		.thumb_func
 2208              		.type	CySysTickDisableInterrupt, %function
 2209              	CySysTickDisableInterrupt:
 2210              	.LFB38:
2576:Generated_Source\PSoC4/CyLib.c **** 
2577:Generated_Source\PSoC4/CyLib.c **** 
2578:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2579:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
2580:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2581:Generated_Source\PSoC4/CyLib.c **** *
2582:Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
2583:Generated_Source\PSoC4/CyLib.c **** *
2584:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2585:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2586:Generated_Source\PSoC4/CyLib.c **** *
2587:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2588:Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
2589:Generated_Source\PSoC4/CyLib.c **** {
 2211              		.loc 1 2589 0
 2212              		.cfi_startproc
 2213 0000 80B5     		push	{r7, lr}
 2214              		.cfi_def_cfa_offset 8
 2215              		.cfi_offset 7, -8
 2216              		.cfi_offset 14, -4
 2217 0002 00AF     		add	r7, sp, #0
 2218              		.cfi_def_cfa_register 7
2590:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 2219              		.loc 1 2590 0
 2220 0004 034B     		ldr	r3, .L141
 2221 0006 034A     		ldr	r2, .L141
 2222 0008 1268     		ldr	r2, [r2]
 2223 000a 0221     		mov	r1, #2
 2224 000c 8A43     		bic	r2, r1
 2225 000e 1A60     		str	r2, [r3]
2591:Generated_Source\PSoC4/CyLib.c **** }
 2226              		.loc 1 2591 0
 2227 0010 BD46     		mov	sp, r7
 2228              		@ sp needed
 2229 0012 80BD     		pop	{r7, pc}
 2230              	.L142:
 2231              		.align	2
 2232              	.L141:
 2233 0014 10E000E0 		.word	-536813552
 2234              		.cfi_endproc
 2235              	.LFE38:
 2236              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 2237              		.section	.text.CySysTickSetReload,"ax",%progbits
 2238              		.align	2
 2239              		.global	CySysTickSetReload
 2240              		.code	16
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 86


 2241              		.thumb_func
 2242              		.type	CySysTickSetReload, %function
 2243              	CySysTickSetReload:
 2244              	.LFB39:
2592:Generated_Source\PSoC4/CyLib.c **** 
2593:Generated_Source\PSoC4/CyLib.c **** 
2594:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2595:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
2596:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2597:Generated_Source\PSoC4/CyLib.c **** *
2598:Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
2599:Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
2600:Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
2601:Generated_Source\PSoC4/CyLib.c **** *
2602:Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
2603:Generated_Source\PSoC4/CyLib.c **** *
2604:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2605:Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
2606:Generated_Source\PSoC4/CyLib.c **** {
 2245              		.loc 1 2606 0
 2246              		.cfi_startproc
 2247 0000 80B5     		push	{r7, lr}
 2248              		.cfi_def_cfa_offset 8
 2249              		.cfi_offset 7, -8
 2250              		.cfi_offset 14, -4
 2251 0002 82B0     		sub	sp, sp, #8
 2252              		.cfi_def_cfa_offset 16
 2253 0004 00AF     		add	r7, sp, #0
 2254              		.cfi_def_cfa_register 7
 2255 0006 7860     		str	r0, [r7, #4]
2607:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 2256              		.loc 1 2607 0
 2257 0008 034B     		ldr	r3, .L144
 2258 000a 7A68     		ldr	r2, [r7, #4]
 2259 000c 1202     		lsl	r2, r2, #8
 2260 000e 120A     		lsr	r2, r2, #8
 2261 0010 1A60     		str	r2, [r3]
2608:Generated_Source\PSoC4/CyLib.c **** }
 2262              		.loc 1 2608 0
 2263 0012 BD46     		mov	sp, r7
 2264 0014 02B0     		add	sp, sp, #8
 2265              		@ sp needed
 2266 0016 80BD     		pop	{r7, pc}
 2267              	.L145:
 2268              		.align	2
 2269              	.L144:
 2270 0018 14E000E0 		.word	-536813548
 2271              		.cfi_endproc
 2272              	.LFE39:
 2273              		.size	CySysTickSetReload, .-CySysTickSetReload
 2274              		.section	.text.CySysTickGetReload,"ax",%progbits
 2275              		.align	2
 2276              		.global	CySysTickGetReload
 2277              		.code	16
 2278              		.thumb_func
 2279              		.type	CySysTickGetReload, %function
 2280              	CySysTickGetReload:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 87


 2281              	.LFB40:
2609:Generated_Source\PSoC4/CyLib.c **** 
2610:Generated_Source\PSoC4/CyLib.c **** 
2611:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2612:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
2613:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2614:Generated_Source\PSoC4/CyLib.c **** *
2615:Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
2616:Generated_Source\PSoC4/CyLib.c **** *
2617:Generated_Source\PSoC4/CyLib.c **** * \return
2618:Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
2619:Generated_Source\PSoC4/CyLib.c **** *
2620:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2621:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
2622:Generated_Source\PSoC4/CyLib.c **** {
 2282              		.loc 1 2622 0
 2283              		.cfi_startproc
 2284 0000 80B5     		push	{r7, lr}
 2285              		.cfi_def_cfa_offset 8
 2286              		.cfi_offset 7, -8
 2287              		.cfi_offset 14, -4
 2288 0002 00AF     		add	r7, sp, #0
 2289              		.cfi_def_cfa_register 7
2623:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 2290              		.loc 1 2623 0
 2291 0004 034B     		ldr	r3, .L148
 2292 0006 1B68     		ldr	r3, [r3]
 2293 0008 1B02     		lsl	r3, r3, #8
 2294 000a 1B0A     		lsr	r3, r3, #8
2624:Generated_Source\PSoC4/CyLib.c **** }
 2295              		.loc 1 2624 0
 2296 000c 181C     		mov	r0, r3
 2297 000e BD46     		mov	sp, r7
 2298              		@ sp needed
 2299 0010 80BD     		pop	{r7, pc}
 2300              	.L149:
 2301 0012 C046     		.align	2
 2302              	.L148:
 2303 0014 14E000E0 		.word	-536813548
 2304              		.cfi_endproc
 2305              	.LFE40:
 2306              		.size	CySysTickGetReload, .-CySysTickGetReload
 2307              		.section	.text.CySysTickGetValue,"ax",%progbits
 2308              		.align	2
 2309              		.global	CySysTickGetValue
 2310              		.code	16
 2311              		.thumb_func
 2312              		.type	CySysTickGetValue, %function
 2313              	CySysTickGetValue:
 2314              	.LFB41:
2625:Generated_Source\PSoC4/CyLib.c **** 
2626:Generated_Source\PSoC4/CyLib.c **** 
2627:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2628:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
2629:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2630:Generated_Source\PSoC4/CyLib.c **** *
2631:Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 88


2632:Generated_Source\PSoC4/CyLib.c **** *
2633:Generated_Source\PSoC4/CyLib.c **** * \return
2634:Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
2635:Generated_Source\PSoC4/CyLib.c **** *
2636:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2637:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
2638:Generated_Source\PSoC4/CyLib.c **** {
 2315              		.loc 1 2638 0
 2316              		.cfi_startproc
 2317 0000 80B5     		push	{r7, lr}
 2318              		.cfi_def_cfa_offset 8
 2319              		.cfi_offset 7, -8
 2320              		.cfi_offset 14, -4
 2321 0002 00AF     		add	r7, sp, #0
 2322              		.cfi_def_cfa_register 7
2639:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 2323              		.loc 1 2639 0
 2324 0004 034B     		ldr	r3, .L152
 2325 0006 1B68     		ldr	r3, [r3]
 2326 0008 1B02     		lsl	r3, r3, #8
 2327 000a 1B0A     		lsr	r3, r3, #8
2640:Generated_Source\PSoC4/CyLib.c **** }
 2328              		.loc 1 2640 0
 2329 000c 181C     		mov	r0, r3
 2330 000e BD46     		mov	sp, r7
 2331              		@ sp needed
 2332 0010 80BD     		pop	{r7, pc}
 2333              	.L153:
 2334 0012 C046     		.align	2
 2335              	.L152:
 2336 0014 18E000E0 		.word	-536813544
 2337              		.cfi_endproc
 2338              	.LFE41:
 2339              		.size	CySysTickGetValue, .-CySysTickGetValue
 2340              		.section	.text.CySysTickSetClockSource,"ax",%progbits
 2341              		.align	2
 2342              		.global	CySysTickSetClockSource
 2343              		.code	16
 2344              		.thumb_func
 2345              		.type	CySysTickSetClockSource, %function
 2346              	CySysTickSetClockSource:
 2347              	.LFB42:
2641:Generated_Source\PSoC4/CyLib.c **** 
2642:Generated_Source\PSoC4/CyLib.c **** 
2643:Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
2644:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2645:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
2646:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2647:Generated_Source\PSoC4/CyLib.c ****     *
2648:Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
2649:Generated_Source\PSoC4/CyLib.c ****     *
2650:Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
2651:Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
2652:Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
2653:Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
2654:Generated_Source\PSoC4/CyLib.c ****     *
2655:Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 89


2656:Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be 
2657:Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.    
2658:Generated_Source\PSoC4/CyLib.c ****     *
2659:Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
2660:Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
2661:Generated_Source\PSoC4/CyLib.c ****     *
2662:Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
2663:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
2664:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
2665:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2666:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2667:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2668:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2669:Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
2670:Generated_Source\PSoC4/CyLib.c ****     {
 2348              		.loc 1 2670 0
 2349              		.cfi_startproc
 2350 0000 80B5     		push	{r7, lr}
 2351              		.cfi_def_cfa_offset 8
 2352              		.cfi_offset 7, -8
 2353              		.cfi_offset 14, -4
 2354 0002 82B0     		sub	sp, sp, #8
 2355              		.cfi_def_cfa_offset 16
 2356 0004 00AF     		add	r7, sp, #0
 2357              		.cfi_def_cfa_register 7
 2358 0006 7860     		str	r0, [r7, #4]
2671:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
 2359              		.loc 1 2671 0
 2360 0008 7B68     		ldr	r3, [r7, #4]
 2361 000a 012B     		cmp	r3, #1
 2362 000c 06D1     		bne	.L155
2672:Generated_Source\PSoC4/CyLib.c ****         {
2673:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
 2363              		.loc 1 2673 0
 2364 000e 084B     		ldr	r3, .L157
 2365 0010 074A     		ldr	r2, .L157
 2366 0012 1268     		ldr	r2, [r2]
 2367 0014 0421     		mov	r1, #4
 2368 0016 0A43     		orr	r2, r1
 2369 0018 1A60     		str	r2, [r3]
 2370 001a 05E0     		b	.L154
 2371              	.L155:
2674:Generated_Source\PSoC4/CyLib.c ****         }
2675:Generated_Source\PSoC4/CyLib.c ****         else
2676:Generated_Source\PSoC4/CyLib.c ****         {
2677:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
 2372              		.loc 1 2677 0
 2373 001c 044B     		ldr	r3, .L157
 2374 001e 044A     		ldr	r2, .L157
 2375 0020 1268     		ldr	r2, [r2]
 2376 0022 0421     		mov	r1, #4
 2377 0024 8A43     		bic	r2, r1
 2378 0026 1A60     		str	r2, [r3]
 2379              	.L154:
2678:Generated_Source\PSoC4/CyLib.c ****         }
2679:Generated_Source\PSoC4/CyLib.c ****     }
 2380              		.loc 1 2679 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 90


 2381 0028 BD46     		mov	sp, r7
 2382 002a 02B0     		add	sp, sp, #8
 2383              		@ sp needed
 2384 002c 80BD     		pop	{r7, pc}
 2385              	.L158:
 2386 002e C046     		.align	2
 2387              	.L157:
 2388 0030 10E000E0 		.word	-536813552
 2389              		.cfi_endproc
 2390              	.LFE42:
 2391              		.size	CySysTickSetClockSource, .-CySysTickSetClockSource
 2392              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
 2393              		.align	2
 2394              		.global	CySysTickGetCountFlag
 2395              		.code	16
 2396              		.thumb_func
 2397              		.type	CySysTickGetCountFlag, %function
 2398              	CySysTickGetCountFlag:
 2399              	.LFB43:
2680:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2681:Generated_Source\PSoC4/CyLib.c **** 
2682:Generated_Source\PSoC4/CyLib.c **** 
2683:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2684:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
2685:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2686:Generated_Source\PSoC4/CyLib.c **** *
2687:Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
2688:Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
2689:Generated_Source\PSoC4/CyLib.c **** *
2690:Generated_Source\PSoC4/CyLib.c **** * \return
2691:Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
2692:Generated_Source\PSoC4/CyLib.c **** *
2693:Generated_Source\PSoC4/CyLib.c **** *
2694:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2695:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2696:Generated_Source\PSoC4/CyLib.c **** *
2697:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2698:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
2699:Generated_Source\PSoC4/CyLib.c **** {
 2400              		.loc 1 2699 0
 2401              		.cfi_startproc
 2402 0000 80B5     		push	{r7, lr}
 2403              		.cfi_def_cfa_offset 8
 2404              		.cfi_offset 7, -8
 2405              		.cfi_offset 14, -4
 2406 0002 00AF     		add	r7, sp, #0
 2407              		.cfi_def_cfa_register 7
2700:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG>>CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 2408              		.loc 1 2700 0
 2409 0004 034B     		ldr	r3, .L161
 2410 0006 1B68     		ldr	r3, [r3]
 2411 0008 1B0C     		lsr	r3, r3, #16
 2412 000a 0122     		mov	r2, #1
 2413 000c 1340     		and	r3, r2
2701:Generated_Source\PSoC4/CyLib.c **** }
 2414              		.loc 1 2701 0
 2415 000e 181C     		mov	r0, r3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 91


 2416 0010 BD46     		mov	sp, r7
 2417              		@ sp needed
 2418 0012 80BD     		pop	{r7, pc}
 2419              	.L162:
 2420              		.align	2
 2421              	.L161:
 2422 0014 10E000E0 		.word	-536813552
 2423              		.cfi_endproc
 2424              	.LFE43:
 2425              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 2426              		.section	.text.CySysTickClear,"ax",%progbits
 2427              		.align	2
 2428              		.global	CySysTickClear
 2429              		.code	16
 2430              		.thumb_func
 2431              		.type	CySysTickClear, %function
 2432              	CySysTickClear:
 2433              	.LFB44:
2702:Generated_Source\PSoC4/CyLib.c **** 
2703:Generated_Source\PSoC4/CyLib.c **** 
2704:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2705:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
2706:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2707:Generated_Source\PSoC4/CyLib.c **** *
2708:Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
2709:Generated_Source\PSoC4/CyLib.c **** *
2710:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2711:Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
2712:Generated_Source\PSoC4/CyLib.c **** {
 2434              		.loc 1 2712 0
 2435              		.cfi_startproc
 2436 0000 80B5     		push	{r7, lr}
 2437              		.cfi_def_cfa_offset 8
 2438              		.cfi_offset 7, -8
 2439              		.cfi_offset 14, -4
 2440 0002 00AF     		add	r7, sp, #0
 2441              		.cfi_def_cfa_register 7
2713:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 2442              		.loc 1 2713 0
 2443 0004 024B     		ldr	r3, .L164
 2444 0006 0022     		mov	r2, #0
 2445 0008 1A60     		str	r2, [r3]
2714:Generated_Source\PSoC4/CyLib.c **** }
 2446              		.loc 1 2714 0
 2447 000a BD46     		mov	sp, r7
 2448              		@ sp needed
 2449 000c 80BD     		pop	{r7, pc}
 2450              	.L165:
 2451 000e C046     		.align	2
 2452              	.L164:
 2453 0010 18E000E0 		.word	-536813544
 2454              		.cfi_endproc
 2455              	.LFE44:
 2456              		.size	CySysTickClear, .-CySysTickClear
 2457              		.section	.text.CySysTickSetCallback,"ax",%progbits
 2458              		.align	2
 2459              		.global	CySysTickSetCallback
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 92


 2460              		.code	16
 2461              		.thumb_func
 2462              		.type	CySysTickSetCallback, %function
 2463              	CySysTickSetCallback:
 2464              	.LFB45:
2715:Generated_Source\PSoC4/CyLib.c **** 
2716:Generated_Source\PSoC4/CyLib.c **** 
2717:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2718:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
2719:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2720:Generated_Source\PSoC4/CyLib.c **** *
2721:Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
2722:Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
2723:Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
2724:Generated_Source\PSoC4/CyLib.c **** *
2725:Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
2726:Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
2727:Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
2728:Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
2729:Generated_Source\PSoC4/CyLib.c **** *  functions.
2730:Generated_Source\PSoC4/CyLib.c **** *
2731:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
2732:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2733:Generated_Source\PSoC4/CyLib.c **** *
2734:Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
2735:Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
2736:Generated_Source\PSoC4/CyLib.c **** *                                specified number.
2737:Generated_Source\PSoC4/CyLib.c **** *
2738:Generated_Source\PSoC4/CyLib.c **** * \return
2739:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
2740:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
2741:Generated_Source\PSoC4/CyLib.c **** *
2742:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2743:Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
2744:Generated_Source\PSoC4/CyLib.c **** *
2745:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2746:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
2747:Generated_Source\PSoC4/CyLib.c **** {
 2465              		.loc 1 2747 0
 2466              		.cfi_startproc
 2467 0000 80B5     		push	{r7, lr}
 2468              		.cfi_def_cfa_offset 8
 2469              		.cfi_offset 7, -8
 2470              		.cfi_offset 14, -4
 2471 0002 84B0     		sub	sp, sp, #16
 2472              		.cfi_def_cfa_offset 24
 2473 0004 00AF     		add	r7, sp, #0
 2474              		.cfi_def_cfa_register 7
 2475 0006 7860     		str	r0, [r7, #4]
 2476 0008 3960     		str	r1, [r7]
2748:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
2749:Generated_Source\PSoC4/CyLib.c **** 
2750:Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
 2477              		.loc 1 2750 0
 2478 000a 074B     		ldr	r3, .L168
 2479 000c 7A68     		ldr	r2, [r7, #4]
 2480 000e 9200     		lsl	r2, r2, #2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 93


 2481 0010 D358     		ldr	r3, [r2, r3]
 2482 0012 FB60     		str	r3, [r7, #12]
2751:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 2483              		.loc 1 2751 0
 2484 0014 044B     		ldr	r3, .L168
 2485 0016 7A68     		ldr	r2, [r7, #4]
 2486 0018 9200     		lsl	r2, r2, #2
 2487 001a 3968     		ldr	r1, [r7]
 2488 001c D150     		str	r1, [r2, r3]
2752:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 2489              		.loc 1 2752 0
 2490 001e FB68     		ldr	r3, [r7, #12]
2753:Generated_Source\PSoC4/CyLib.c **** }
 2491              		.loc 1 2753 0
 2492 0020 181C     		mov	r0, r3
 2493 0022 BD46     		mov	sp, r7
 2494 0024 04B0     		add	sp, sp, #16
 2495              		@ sp needed
 2496 0026 80BD     		pop	{r7, pc}
 2497              	.L169:
 2498              		.align	2
 2499              	.L168:
 2500 0028 00000000 		.word	CySysTickCallbacks
 2501              		.cfi_endproc
 2502              	.LFE45:
 2503              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 2504              		.section	.text.CySysTickGetCallback,"ax",%progbits
 2505              		.align	2
 2506              		.global	CySysTickGetCallback
 2507              		.code	16
 2508              		.thumb_func
 2509              		.type	CySysTickGetCallback, %function
 2510              	CySysTickGetCallback:
 2511              	.LFB46:
2754:Generated_Source\PSoC4/CyLib.c **** 
2755:Generated_Source\PSoC4/CyLib.c **** 
2756:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2757:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
2758:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2759:Generated_Source\PSoC4/CyLib.c **** *
2760:Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
2761:Generated_Source\PSoC4/CyLib.c **** *
2762:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
2763:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
2764:Generated_Source\PSoC4/CyLib.c **** *
2765:Generated_Source\PSoC4/CyLib.c **** * \return
2766:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
2767:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
2768:Generated_Source\PSoC4/CyLib.c **** *
2769:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2770:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
2771:Generated_Source\PSoC4/CyLib.c **** {
 2512              		.loc 1 2771 0
 2513              		.cfi_startproc
 2514 0000 80B5     		push	{r7, lr}
 2515              		.cfi_def_cfa_offset 8
 2516              		.cfi_offset 7, -8
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 94


 2517              		.cfi_offset 14, -4
 2518 0002 82B0     		sub	sp, sp, #8
 2519              		.cfi_def_cfa_offset 16
 2520 0004 00AF     		add	r7, sp, #0
 2521              		.cfi_def_cfa_register 7
 2522 0006 7860     		str	r0, [r7, #4]
2772:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 2523              		.loc 1 2772 0
 2524 0008 034B     		ldr	r3, .L172
 2525 000a 7A68     		ldr	r2, [r7, #4]
 2526 000c 9200     		lsl	r2, r2, #2
 2527 000e D358     		ldr	r3, [r2, r3]
2773:Generated_Source\PSoC4/CyLib.c **** }
 2528              		.loc 1 2773 0
 2529 0010 181C     		mov	r0, r3
 2530 0012 BD46     		mov	sp, r7
 2531 0014 02B0     		add	sp, sp, #8
 2532              		@ sp needed
 2533 0016 80BD     		pop	{r7, pc}
 2534              	.L173:
 2535              		.align	2
 2536              	.L172:
 2537 0018 00000000 		.word	CySysTickCallbacks
 2538              		.cfi_endproc
 2539              	.LFE46:
 2540              		.size	CySysTickGetCallback, .-CySysTickGetCallback
 2541              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 2542              		.align	2
 2543              		.code	16
 2544              		.thumb_func
 2545              		.type	CySysTickServiceCallbacks, %function
 2546              	CySysTickServiceCallbacks:
 2547              	.LFB47:
2774:Generated_Source\PSoC4/CyLib.c **** 
2775:Generated_Source\PSoC4/CyLib.c **** 
2776:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2777:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
2778:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2779:Generated_Source\PSoC4/CyLib.c **** *
2780:Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
2781:Generated_Source\PSoC4/CyLib.c **** *
2782:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2783:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
2784:Generated_Source\PSoC4/CyLib.c **** {
 2548              		.loc 1 2784 0
 2549              		.cfi_startproc
 2550 0000 80B5     		push	{r7, lr}
 2551              		.cfi_def_cfa_offset 8
 2552              		.cfi_offset 7, -8
 2553              		.cfi_offset 14, -4
 2554 0002 82B0     		sub	sp, sp, #8
 2555              		.cfi_def_cfa_offset 16
 2556 0004 00AF     		add	r7, sp, #0
 2557              		.cfi_def_cfa_register 7
2785:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2786:Generated_Source\PSoC4/CyLib.c **** 
2787:Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 95


2788:Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 2558              		.loc 1 2788 0
 2559 0006 FFF7FEFF 		bl	CySysTickGetCountFlag
 2560 000a 031E     		sub	r3, r0, #0
 2561 000c 012B     		cmp	r3, #1
 2562 000e 13D1     		bne	.L174
2789:Generated_Source\PSoC4/CyLib.c ****     {
2790:Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
 2563              		.loc 1 2790 0
 2564 0010 0023     		mov	r3, #0
 2565 0012 7B60     		str	r3, [r7, #4]
 2566 0014 0DE0     		b	.L176
 2567              	.L178:
2791:Generated_Source\PSoC4/CyLib.c ****         {
2792:Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 2568              		.loc 1 2792 0
 2569 0016 0A4B     		ldr	r3, .L179
 2570 0018 7A68     		ldr	r2, [r7, #4]
 2571 001a 9200     		lsl	r2, r2, #2
 2572 001c D358     		ldr	r3, [r2, r3]
 2573 001e 002B     		cmp	r3, #0
 2574 0020 04D0     		beq	.L177
2793:Generated_Source\PSoC4/CyLib.c ****             {
2794:Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 2575              		.loc 1 2794 0
 2576 0022 074B     		ldr	r3, .L179
 2577 0024 7A68     		ldr	r2, [r7, #4]
 2578 0026 9200     		lsl	r2, r2, #2
 2579 0028 D358     		ldr	r3, [r2, r3]
 2580 002a 9847     		blx	r3
 2581              	.L177:
2790:Generated_Source\PSoC4/CyLib.c ****         {
 2582              		.loc 1 2790 0 discriminator 2
 2583 002c 7B68     		ldr	r3, [r7, #4]
 2584 002e 0133     		add	r3, r3, #1
 2585 0030 7B60     		str	r3, [r7, #4]
 2586              	.L176:
2790:Generated_Source\PSoC4/CyLib.c ****         {
 2587              		.loc 1 2790 0 is_stmt 0 discriminator 1
 2588 0032 7B68     		ldr	r3, [r7, #4]
 2589 0034 042B     		cmp	r3, #4
 2590 0036 EED9     		bls	.L178
 2591              	.L174:
2795:Generated_Source\PSoC4/CyLib.c ****             }
2796:Generated_Source\PSoC4/CyLib.c ****         }
2797:Generated_Source\PSoC4/CyLib.c ****     }
2798:Generated_Source\PSoC4/CyLib.c **** }
 2592              		.loc 1 2798 0 is_stmt 1
 2593 0038 BD46     		mov	sp, r7
 2594 003a 02B0     		add	sp, sp, #8
 2595              		@ sp needed
 2596 003c 80BD     		pop	{r7, pc}
 2597              	.L180:
 2598 003e C046     		.align	2
 2599              	.L179:
 2600 0040 00000000 		.word	CySysTickCallbacks
 2601              		.cfi_endproc
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 96


 2602              	.LFE47:
 2603              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 2604              		.section	.text.CyGetUniqueId,"ax",%progbits
 2605              		.align	2
 2606              		.global	CyGetUniqueId
 2607              		.code	16
 2608              		.thumb_func
 2609              		.type	CyGetUniqueId, %function
 2610              	CyGetUniqueId:
 2611              	.LFB48:
2799:Generated_Source\PSoC4/CyLib.c **** 
2800:Generated_Source\PSoC4/CyLib.c **** 
2801:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2802:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
2803:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2804:Generated_Source\PSoC4/CyLib.c **** *
2805:Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
2806:Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
2807:Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
2808:Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
2809:Generated_Source\PSoC4/CyLib.c **** *
2810:Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
2811:Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
2812:Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
2813:Generated_Source\PSoC4/CyLib.c **** *
2814:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2815:Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
2816:Generated_Source\PSoC4/CyLib.c **** {
 2612              		.loc 1 2816 0
 2613              		.cfi_startproc
 2614 0000 80B5     		push	{r7, lr}
 2615              		.cfi_def_cfa_offset 8
 2616              		.cfi_offset 7, -8
 2617              		.cfi_offset 14, -4
 2618 0002 82B0     		sub	sp, sp, #8
 2619              		.cfi_def_cfa_offset 16
 2620 0004 00AF     		add	r7, sp, #0
 2621              		.cfi_def_cfa_register 7
 2622 0006 7860     		str	r0, [r7, #4]
2817:Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
2818:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 2623              		.loc 1 2818 0
 2624 0008 254B     		ldr	r3, .L182
 2625 000a 1B78     		ldrb	r3, [r3]
 2626 000c DBB2     		uxtb	r3, r3
 2627 000e 1A1C     		mov	r2, r3
 2628 0010 7B68     		ldr	r3, [r7, #4]
 2629 0012 1A60     		str	r2, [r3]
2819:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 2630              		.loc 1 2819 0
 2631 0014 234B     		ldr	r3, .L182+4
 2632 0016 1B78     		ldrb	r3, [r3]
 2633 0018 DBB2     		uxtb	r3, r3
 2634 001a 1A02     		lsl	r2, r3, #8
 2635 001c 7B68     		ldr	r3, [r7, #4]
 2636 001e 1B68     		ldr	r3, [r3]
 2637 0020 1A43     		orr	r2, r3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 97


 2638 0022 7B68     		ldr	r3, [r7, #4]
 2639 0024 1A60     		str	r2, [r3]
2820:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
 2640              		.loc 1 2820 0
 2641 0026 204B     		ldr	r3, .L182+8
 2642 0028 1B78     		ldrb	r3, [r3]
 2643 002a DBB2     		uxtb	r3, r3
 2644 002c 1A04     		lsl	r2, r3, #16
 2645 002e 7B68     		ldr	r3, [r7, #4]
 2646 0030 1B68     		ldr	r3, [r3]
 2647 0032 1A43     		orr	r2, r3
 2648 0034 7B68     		ldr	r3, [r7, #4]
 2649 0036 1A60     		str	r2, [r3]
2821:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 2650              		.loc 1 2821 0
 2651 0038 1C4B     		ldr	r3, .L182+12
 2652 003a 1B78     		ldrb	r3, [r3]
 2653 003c DBB2     		uxtb	r3, r3
 2654 003e 1A06     		lsl	r2, r3, #24
 2655 0040 7B68     		ldr	r3, [r7, #4]
 2656 0042 1B68     		ldr	r3, [r3]
 2657 0044 1A43     		orr	r2, r3
 2658 0046 7B68     		ldr	r3, [r7, #4]
 2659 0048 1A60     		str	r2, [r3]
2822:Generated_Source\PSoC4/CyLib.c **** 
2823:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
 2660              		.loc 1 2823 0
 2661 004a 7B68     		ldr	r3, [r7, #4]
 2662 004c 0433     		add	r3, r3, #4
 2663 004e 184A     		ldr	r2, .L182+16
 2664 0050 1278     		ldrb	r2, [r2]
 2665 0052 D2B2     		uxtb	r2, r2
 2666 0054 1A60     		str	r2, [r3]
2824:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 2667              		.loc 1 2824 0
 2668 0056 174B     		ldr	r3, .L182+20
 2669 0058 1B78     		ldrb	r3, [r3]
 2670 005a DBB2     		uxtb	r3, r3
 2671 005c 1902     		lsl	r1, r3, #8
 2672 005e 7B68     		ldr	r3, [r7, #4]
 2673 0060 0433     		add	r3, r3, #4
 2674 0062 7A68     		ldr	r2, [r7, #4]
 2675 0064 0432     		add	r2, r2, #4
 2676 0066 1268     		ldr	r2, [r2]
 2677 0068 0A43     		orr	r2, r1
 2678 006a 1A60     		str	r2, [r3]
2825:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 2679              		.loc 1 2825 0
 2680 006c 124B     		ldr	r3, .L182+24
 2681 006e 1B78     		ldrb	r3, [r3]
 2682 0070 DBB2     		uxtb	r3, r3
 2683 0072 1904     		lsl	r1, r3, #16
 2684 0074 7B68     		ldr	r3, [r7, #4]
 2685 0076 0433     		add	r3, r3, #4
 2686 0078 7A68     		ldr	r2, [r7, #4]
 2687 007a 0432     		add	r2, r2, #4
 2688 007c 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 98


 2689 007e 0A43     		orr	r2, r1
 2690 0080 1A60     		str	r2, [r3]
2826:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 2691              		.loc 1 2826 0
 2692 0082 0E4B     		ldr	r3, .L182+28
 2693 0084 1B78     		ldrb	r3, [r3]
 2694 0086 DBB2     		uxtb	r3, r3
 2695 0088 1906     		lsl	r1, r3, #24
 2696 008a 7B68     		ldr	r3, [r7, #4]
 2697 008c 0433     		add	r3, r3, #4
 2698 008e 7A68     		ldr	r2, [r7, #4]
 2699 0090 0432     		add	r2, r2, #4
 2700 0092 1268     		ldr	r2, [r2]
 2701 0094 0A43     		orr	r2, r1
 2702 0096 1A60     		str	r2, [r3]
2827:Generated_Source\PSoC4/CyLib.c **** #else
2828:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
2829:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
2830:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
2831:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
2832:Generated_Source\PSoC4/CyLib.c **** 
2833:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
2834:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
2835:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
2836:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
2837:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
2838:Generated_Source\PSoC4/CyLib.c **** }
 2703              		.loc 1 2838 0
 2704 0098 BD46     		mov	sp, r7
 2705 009a 02B0     		add	sp, sp, #8
 2706              		@ sp needed
 2707 009c 80BD     		pop	{r7, pc}
 2708              	.L183:
 2709 009e C046     		.align	2
 2710              	.L182:
 2711 00a0 78F1FF0F 		.word	268431736
 2712 00a4 79F1FF0F 		.word	268431737
 2713 00a8 7AF1FF0F 		.word	268431738
 2714 00ac 7BF1FF0F 		.word	268431739
 2715 00b0 7CF1FF0F 		.word	268431740
 2716 00b4 7DF1FF0F 		.word	268431741
 2717 00b8 7EF1FF0F 		.word	268431742
 2718 00bc 7FF1FF0F 		.word	268431743
 2719              		.cfi_endproc
 2720              	.LFE48:
 2721              		.size	CyGetUniqueId, .-CyGetUniqueId
 2722              		.section	.text.CySysSetRamAccessArbPriority,"ax",%progbits
 2723              		.align	2
 2724              		.global	CySysSetRamAccessArbPriority
 2725              		.code	16
 2726              		.thumb_func
 2727              		.type	CySysSetRamAccessArbPriority, %function
 2728              	CySysSetRamAccessArbPriority:
 2729              	.LFB49:
2839:Generated_Source\PSoC4/CyLib.c **** 
2840:Generated_Source\PSoC4/CyLib.c **** 
2841:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_DMAC_PRESENT)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 99


2842:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2843:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysSetRamAccessArbPriority
2844:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2845:Generated_Source\PSoC4/CyLib.c ****     *
2846:Generated_Source\PSoC4/CyLib.c ****     *  Sets RAM access priority between CPU and DMA. The RAM_CTL register is
2847:Generated_Source\PSoC4/CyLib.c ****     *  configured to set the priority. Please refer to the device TRM for more
2848:Generated_Source\PSoC4/CyLib.c ****     *  details.
2849:Generated_Source\PSoC4/CyLib.c ****     *
2850:Generated_Source\PSoC4/CyLib.c ****     *  This API is applicable for PSoC 4200M and PSoC 4200L devices only.
2851:Generated_Source\PSoC4/CyLib.c ****     *
2852:Generated_Source\PSoC4/CyLib.c ****     *  \param source:
2853:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_CPU              CPU has priority (Default)
2854:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_DMA              DMA has priority
2855:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND            Round robin
2856:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND_STICKY     Round robin sticky
2857:Generated_Source\PSoC4/CyLib.c ****     *
2858:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2859:Generated_Source\PSoC4/CyLib.c ****     void CySysSetRamAccessArbPriority(uint32 source)
2860:Generated_Source\PSoC4/CyLib.c ****     {
 2730              		.loc 1 2860 0
 2731              		.cfi_startproc
 2732 0000 80B5     		push	{r7, lr}
 2733              		.cfi_def_cfa_offset 8
 2734              		.cfi_offset 7, -8
 2735              		.cfi_offset 14, -4
 2736 0002 84B0     		sub	sp, sp, #16
 2737              		.cfi_def_cfa_offset 24
 2738 0004 00AF     		add	r7, sp, #0
 2739              		.cfi_def_cfa_register 7
 2740 0006 7860     		str	r0, [r7, #4]
2861:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2862:Generated_Source\PSoC4/CyLib.c **** 
2863:Generated_Source\PSoC4/CyLib.c ****         regTmp  = CY_SYS_CPUSS_RAM_CTL_REG & ~CY_SYS_CPUSS_RAM_CTL_ARB_MASK;
 2741              		.loc 1 2863 0
 2742 0008 094B     		ldr	r3, .L185
 2743 000a 1B68     		ldr	r3, [r3]
 2744 000c 094A     		ldr	r2, .L185+4
 2745 000e 1340     		and	r3, r2
 2746 0010 FB60     		str	r3, [r7, #12]
2864:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_RAM_CTL_ARB_SHIFT) & CY_SYS_CPUSS_RAM_CTL_ARB_M
 2747              		.loc 1 2864 0
 2748 0012 7B68     		ldr	r3, [r7, #4]
 2749 0014 5A04     		lsl	r2, r3, #17
 2750 0016 C023     		mov	r3, #192
 2751 0018 DB02     		lsl	r3, r3, #11
 2752 001a 1340     		and	r3, r2
 2753 001c FA68     		ldr	r2, [r7, #12]
 2754 001e 1343     		orr	r3, r2
 2755 0020 FB60     		str	r3, [r7, #12]
2865:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CPUSS_RAM_CTL_REG = regTmp;
 2756              		.loc 1 2865 0
 2757 0022 034B     		ldr	r3, .L185
 2758 0024 FA68     		ldr	r2, [r7, #12]
 2759 0026 1A60     		str	r2, [r3]
2866:Generated_Source\PSoC4/CyLib.c ****     }
 2760              		.loc 1 2866 0
 2761 0028 BD46     		mov	sp, r7
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 100


 2762 002a 04B0     		add	sp, sp, #16
 2763              		@ sp needed
 2764 002c 80BD     		pop	{r7, pc}
 2765              	.L186:
 2766 002e C046     		.align	2
 2767              	.L185:
 2768 0030 38001040 		.word	1074790456
 2769 0034 FFFFF9FF 		.word	-393217
 2770              		.cfi_endproc
 2771              	.LFE49:
 2772              		.size	CySysSetRamAccessArbPriority, .-CySysSetRamAccessArbPriority
 2773              		.section	.text.CySysSetFlashAccessArbPriority,"ax",%progbits
 2774              		.align	2
 2775              		.global	CySysSetFlashAccessArbPriority
 2776              		.code	16
 2777              		.thumb_func
 2778              		.type	CySysSetFlashAccessArbPriority, %function
 2779              	CySysSetFlashAccessArbPriority:
 2780              	.LFB50:
2867:Generated_Source\PSoC4/CyLib.c **** 
2868:Generated_Source\PSoC4/CyLib.c **** 
2869:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2870:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysSetFlashAccessArbPriority
2871:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2872:Generated_Source\PSoC4/CyLib.c ****     *
2873:Generated_Source\PSoC4/CyLib.c ****     *  Sets flash access priority between CPU and DMA. The FLASH_CTL register is
2874:Generated_Source\PSoC4/CyLib.c ****     *  configured to set the priority. Please refer to the device TRM for more
2875:Generated_Source\PSoC4/CyLib.c ****     *  details.
2876:Generated_Source\PSoC4/CyLib.c ****     *
2877:Generated_Source\PSoC4/CyLib.c ****     *  This API is applicable for PSoC 4200M and PSoC 4200L devices only.
2878:Generated_Source\PSoC4/CyLib.c ****     *
2879:Generated_Source\PSoC4/CyLib.c ****     *  \param source:
2880:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_CPU              CPU has priority (Default)
2881:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_DMA              DMA has priority
2882:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND            Round robin
2883:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND_STICKY     Round robin sticky
2884:Generated_Source\PSoC4/CyLib.c ****     *
2885:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2886:Generated_Source\PSoC4/CyLib.c ****     void CySysSetFlashAccessArbPriority(uint32 source)
2887:Generated_Source\PSoC4/CyLib.c ****     {
 2781              		.loc 1 2887 0
 2782              		.cfi_startproc
 2783 0000 80B5     		push	{r7, lr}
 2784              		.cfi_def_cfa_offset 8
 2785              		.cfi_offset 7, -8
 2786              		.cfi_offset 14, -4
 2787 0002 84B0     		sub	sp, sp, #16
 2788              		.cfi_def_cfa_offset 24
 2789 0004 00AF     		add	r7, sp, #0
 2790              		.cfi_def_cfa_register 7
 2791 0006 7860     		str	r0, [r7, #4]
2888:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2889:Generated_Source\PSoC4/CyLib.c **** 
2890:Generated_Source\PSoC4/CyLib.c ****         regTmp  = CY_SYS_CPUSS_FLASH_CTL_REG & ~CY_SYS_CPUSS_FLASH_CTL_ARB_MASK;
 2792              		.loc 1 2890 0
 2793 0008 094B     		ldr	r3, .L188
 2794 000a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 101


 2795 000c 094A     		ldr	r2, .L188+4
 2796 000e 1340     		and	r3, r2
 2797 0010 FB60     		str	r3, [r7, #12]
2891:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_FLASH_CTL_ARB_SHIFT) & CY_SYS_CPUSS_FLASH_CTL_A
 2798              		.loc 1 2891 0
 2799 0012 7B68     		ldr	r3, [r7, #4]
 2800 0014 5A04     		lsl	r2, r3, #17
 2801 0016 C023     		mov	r3, #192
 2802 0018 DB02     		lsl	r3, r3, #11
 2803 001a 1340     		and	r3, r2
 2804 001c FA68     		ldr	r2, [r7, #12]
 2805 001e 1343     		orr	r3, r2
 2806 0020 FB60     		str	r3, [r7, #12]
2892:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CPUSS_FLASH_CTL_REG = regTmp;
 2807              		.loc 1 2892 0
 2808 0022 034B     		ldr	r3, .L188
 2809 0024 FA68     		ldr	r2, [r7, #12]
 2810 0026 1A60     		str	r2, [r3]
2893:Generated_Source\PSoC4/CyLib.c ****     }
 2811              		.loc 1 2893 0
 2812 0028 BD46     		mov	sp, r7
 2813 002a 04B0     		add	sp, sp, #16
 2814              		@ sp needed
 2815 002c 80BD     		pop	{r7, pc}
 2816              	.L189:
 2817 002e C046     		.align	2
 2818              	.L188:
 2819 0030 30001040 		.word	1074790448
 2820 0034 FFFFF9FF 		.word	-393217
 2821              		.cfi_endproc
 2822              	.LFE50:
 2823              		.size	CySysSetFlashAccessArbPriority, .-CySysSetFlashAccessArbPriority
 2824              		.section	.text.CySysSetDmacAccessArbPriority,"ax",%progbits
 2825              		.align	2
 2826              		.global	CySysSetDmacAccessArbPriority
 2827              		.code	16
 2828              		.thumb_func
 2829              		.type	CySysSetDmacAccessArbPriority, %function
 2830              	CySysSetDmacAccessArbPriority:
 2831              	.LFB51:
2894:Generated_Source\PSoC4/CyLib.c **** 
2895:Generated_Source\PSoC4/CyLib.c **** 
2896:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2897:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysSetDmacAccessArbPriority
2898:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2899:Generated_Source\PSoC4/CyLib.c ****     *
2900:Generated_Source\PSoC4/CyLib.c ****     *  Sets DMAC slave interface access priority between CPU and DMA. The DMAC_CTL
2901:Generated_Source\PSoC4/CyLib.c ****     *  register is configured to set the priority. Please refer to the device TRM
2902:Generated_Source\PSoC4/CyLib.c ****     *  for more details.
2903:Generated_Source\PSoC4/CyLib.c ****     *
2904:Generated_Source\PSoC4/CyLib.c ****     *  This API is applicable for PSoC 4200M and PSoC 4200L devices only.
2905:Generated_Source\PSoC4/CyLib.c ****     *
2906:Generated_Source\PSoC4/CyLib.c ****     *  \param source:
2907:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_CPU              CPU has priority (Default)
2908:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_DMA              DMA has priority
2909:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND            Round robin
2910:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND_STICKY     Round robin sticky
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 102


2911:Generated_Source\PSoC4/CyLib.c ****     *
2912:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2913:Generated_Source\PSoC4/CyLib.c ****     void CySysSetDmacAccessArbPriority(uint32 source)
2914:Generated_Source\PSoC4/CyLib.c ****     {
 2832              		.loc 1 2914 0
 2833              		.cfi_startproc
 2834 0000 80B5     		push	{r7, lr}
 2835              		.cfi_def_cfa_offset 8
 2836              		.cfi_offset 7, -8
 2837              		.cfi_offset 14, -4
 2838 0002 84B0     		sub	sp, sp, #16
 2839              		.cfi_def_cfa_offset 24
 2840 0004 00AF     		add	r7, sp, #0
 2841              		.cfi_def_cfa_register 7
 2842 0006 7860     		str	r0, [r7, #4]
2915:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2916:Generated_Source\PSoC4/CyLib.c **** 
2917:Generated_Source\PSoC4/CyLib.c ****         regTmp  = CY_SYS_CPUSS_DMAC_CTL_REG & ~CY_SYS_CPUSS_DMAC_CTL_ARB_MASK;
 2843              		.loc 1 2917 0
 2844 0008 094B     		ldr	r3, .L191
 2845 000a 1B68     		ldr	r3, [r3]
 2846 000c 094A     		ldr	r2, .L191+4
 2847 000e 1340     		and	r3, r2
 2848 0010 FB60     		str	r3, [r7, #12]
2918:Generated_Source\PSoC4/CyLib.c ****         regTmp |= ((uint32) (source << CY_SYS_CPUSS_DMAC_CTL_ARB_SHIFT) & CY_SYS_CPUSS_DMAC_CTL_ARB
 2849              		.loc 1 2918 0
 2850 0012 7B68     		ldr	r3, [r7, #4]
 2851 0014 5A04     		lsl	r2, r3, #17
 2852 0016 C023     		mov	r3, #192
 2853 0018 DB02     		lsl	r3, r3, #11
 2854 001a 1340     		and	r3, r2
 2855 001c FA68     		ldr	r2, [r7, #12]
 2856 001e 1343     		orr	r3, r2
 2857 0020 FB60     		str	r3, [r7, #12]
2919:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CPUSS_DMAC_CTL_REG = regTmp;
 2858              		.loc 1 2919 0
 2859 0022 034B     		ldr	r3, .L191
 2860 0024 FA68     		ldr	r2, [r7, #12]
 2861 0026 1A60     		str	r2, [r3]
2920:Generated_Source\PSoC4/CyLib.c ****     }
 2862              		.loc 1 2920 0
 2863 0028 BD46     		mov	sp, r7
 2864 002a 04B0     		add	sp, sp, #16
 2865              		@ sp needed
 2866 002c 80BD     		pop	{r7, pc}
 2867              	.L192:
 2868 002e C046     		.align	2
 2869              	.L191:
 2870 0030 3C001040 		.word	1074790460
 2871 0034 FFFFF9FF 		.word	-393217
 2872              		.cfi_endproc
 2873              	.LFE51:
 2874              		.size	CySysSetDmacAccessArbPriority, .-CySysSetDmacAccessArbPriority
 2875              		.section	.text.CySysSetPeripheralAccessArbPriority,"ax",%progbits
 2876              		.align	2
 2877              		.global	CySysSetPeripheralAccessArbPriority
 2878              		.code	16
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 103


 2879              		.thumb_func
 2880              		.type	CySysSetPeripheralAccessArbPriority, %function
 2881              	CySysSetPeripheralAccessArbPriority:
 2882              	.LFB52:
2921:Generated_Source\PSoC4/CyLib.c **** 
2922:Generated_Source\PSoC4/CyLib.c **** 
2923:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2924:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysSetPeripheralAccessArbPriority
2925:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2926:Generated_Source\PSoC4/CyLib.c ****     *
2927:Generated_Source\PSoC4/CyLib.c ****     *  Sets slave peripheral interface access priority between CPU and DMA.
2928:Generated_Source\PSoC4/CyLib.c ****     *  The SL_CTL register is configured to set the priority. Please refer to the
2929:Generated_Source\PSoC4/CyLib.c ****     *  device TRM for more details.
2930:Generated_Source\PSoC4/CyLib.c ****     *
2931:Generated_Source\PSoC4/CyLib.c ****     *  This API is applicable for PSoC 4200M and PSoC 4200L devices only.
2932:Generated_Source\PSoC4/CyLib.c ****     *
2933:Generated_Source\PSoC4/CyLib.c ****     *  \param  interfaceNumber: the slave interface number. Please refer to the
2934:Generated_Source\PSoC4/CyLib.c ****     *  device TRM for more details.
2935:Generated_Source\PSoC4/CyLib.c ****     *  \param source:
2936:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_CPU              CPU has priority (Default)
2937:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_DMA              DMA has priority
2938:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND            Round robin
2939:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_ARB_PRIORITY_ROUND_STICKY     Round robin sticky
2940:Generated_Source\PSoC4/CyLib.c ****     *
2941:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2942:Generated_Source\PSoC4/CyLib.c ****     void CySysSetPeripheralAccessArbPriority(uint32 interfaceNumber, uint32 source)
2943:Generated_Source\PSoC4/CyLib.c ****     {
 2883              		.loc 1 2943 0
 2884              		.cfi_startproc
 2885 0000 80B5     		push	{r7, lr}
 2886              		.cfi_def_cfa_offset 8
 2887              		.cfi_offset 7, -8
 2888              		.cfi_offset 14, -4
 2889 0002 84B0     		sub	sp, sp, #16
 2890              		.cfi_def_cfa_offset 24
 2891 0004 00AF     		add	r7, sp, #0
 2892              		.cfi_def_cfa_register 7
 2893 0006 7860     		str	r0, [r7, #4]
 2894 0008 3960     		str	r1, [r7]
2944:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2945:Generated_Source\PSoC4/CyLib.c **** 
2946:Generated_Source\PSoC4/CyLib.c ****         if (interfaceNumber == 0u)
 2895              		.loc 1 2946 0
 2896 000a 7B68     		ldr	r3, [r7, #4]
 2897 000c 002B     		cmp	r3, #0
 2898 000e 10D1     		bne	.L194
2947:Generated_Source\PSoC4/CyLib.c ****         {
2948:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CPUSS_SL_CTL0_REG & ~CY_SYS_CPUSS_SL_CTL_ARB_MASK;
 2899              		.loc 1 2948 0
 2900 0010 1F4B     		ldr	r3, .L198
 2901 0012 1B68     		ldr	r3, [r3]
 2902 0014 1F4A     		ldr	r2, .L198+4
 2903 0016 1340     		and	r3, r2
 2904 0018 FB60     		str	r3, [r7, #12]
2949:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (source << CY_SYS_CPUSS_SL_CTL_ARB_SHIFT) & CY_SYS_CPUSS_SL_CTL_ARB
 2905              		.loc 1 2949 0
 2906 001a 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 104


 2907 001c 5A04     		lsl	r2, r3, #17
 2908 001e C023     		mov	r3, #192
 2909 0020 DB02     		lsl	r3, r3, #11
 2910 0022 1340     		and	r3, r2
 2911 0024 FA68     		ldr	r2, [r7, #12]
 2912 0026 1343     		orr	r3, r2
 2913 0028 FB60     		str	r3, [r7, #12]
2950:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CPUSS_SL_CTL0_REG = regTmp;
 2914              		.loc 1 2950 0
 2915 002a 194B     		ldr	r3, .L198
 2916 002c FA68     		ldr	r2, [r7, #12]
 2917 002e 1A60     		str	r2, [r3]
 2918 0030 2AE0     		b	.L193
 2919              	.L194:
2951:Generated_Source\PSoC4/CyLib.c ****         } else
2952:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SL_NR >= 2)
2953:Generated_Source\PSoC4/CyLib.c ****         if (interfaceNumber == 1u)
 2920              		.loc 1 2953 0
 2921 0032 7B68     		ldr	r3, [r7, #4]
 2922 0034 012B     		cmp	r3, #1
 2923 0036 10D1     		bne	.L196
2954:Generated_Source\PSoC4/CyLib.c ****         {
2955:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CPUSS_SL_CTL1_REG & ~CY_SYS_CPUSS_SL_CTL_ARB_MASK;
 2924              		.loc 1 2955 0
 2925 0038 174B     		ldr	r3, .L198+8
 2926 003a 1B68     		ldr	r3, [r3]
 2927 003c 154A     		ldr	r2, .L198+4
 2928 003e 1340     		and	r3, r2
 2929 0040 FB60     		str	r3, [r7, #12]
2956:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (source << CY_SYS_CPUSS_SL_CTL_ARB_SHIFT) & CY_SYS_CPUSS_SL_CTL_ARB
 2930              		.loc 1 2956 0
 2931 0042 3B68     		ldr	r3, [r7]
 2932 0044 5A04     		lsl	r2, r3, #17
 2933 0046 C023     		mov	r3, #192
 2934 0048 DB02     		lsl	r3, r3, #11
 2935 004a 1340     		and	r3, r2
 2936 004c FA68     		ldr	r2, [r7, #12]
 2937 004e 1343     		orr	r3, r2
 2938 0050 FB60     		str	r3, [r7, #12]
2957:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CPUSS_SL_CTL1_REG = regTmp;
 2939              		.loc 1 2957 0
 2940 0052 114B     		ldr	r3, .L198+8
 2941 0054 FA68     		ldr	r2, [r7, #12]
 2942 0056 1A60     		str	r2, [r3]
 2943 0058 16E0     		b	.L193
 2944              	.L196:
2958:Generated_Source\PSoC4/CyLib.c ****         } else
2959:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SL_NR >= 1) */
2960:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SL_NR >= 3)
2961:Generated_Source\PSoC4/CyLib.c ****         if (interfaceNumber == 2u)
 2945              		.loc 1 2961 0
 2946 005a 7B68     		ldr	r3, [r7, #4]
 2947 005c 022B     		cmp	r3, #2
 2948 005e 10D1     		bne	.L197
2962:Generated_Source\PSoC4/CyLib.c ****         {
2963:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CPUSS_SL_CTL2_REG & ~CY_SYS_CPUSS_SL_CTL_ARB_MASK;
 2949              		.loc 1 2963 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 105


 2950 0060 0E4B     		ldr	r3, .L198+12
 2951 0062 1B68     		ldr	r3, [r3]
 2952 0064 0B4A     		ldr	r2, .L198+4
 2953 0066 1340     		and	r3, r2
 2954 0068 FB60     		str	r3, [r7, #12]
2964:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (source << CY_SYS_CPUSS_SL_CTL_ARB_SHIFT) & CY_SYS_CPUSS_SL_CTL_ARB
 2955              		.loc 1 2964 0
 2956 006a 3B68     		ldr	r3, [r7]
 2957 006c 5A04     		lsl	r2, r3, #17
 2958 006e C023     		mov	r3, #192
 2959 0070 DB02     		lsl	r3, r3, #11
 2960 0072 1340     		and	r3, r2
 2961 0074 FA68     		ldr	r2, [r7, #12]
 2962 0076 1343     		orr	r3, r2
 2963 0078 FB60     		str	r3, [r7, #12]
2965:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CPUSS_SL_CTL2_REG = regTmp;
 2964              		.loc 1 2965 0
 2965 007a 084B     		ldr	r3, .L198+12
 2966 007c FA68     		ldr	r2, [r7, #12]
 2967 007e 1A60     		str	r2, [r3]
 2968 0080 02E0     		b	.L193
 2969              	.L197:
2966:Generated_Source\PSoC4/CyLib.c ****         } else
2967:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SL_NR >= 1) */
2968:Generated_Source\PSoC4/CyLib.c ****         {
2969:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if interface is invalid */
2970:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 2970              		.loc 1 2970 0 discriminator 1
 2971 0082 0020     		mov	r0, #0
 2972 0084 FFF7FEFF 		bl	CyHalt
 2973              	.L193:
2971:Generated_Source\PSoC4/CyLib.c ****         }
2972:Generated_Source\PSoC4/CyLib.c ****     }
 2974              		.loc 1 2972 0
 2975 0088 BD46     		mov	sp, r7
 2976 008a 04B0     		add	sp, sp, #16
 2977              		@ sp needed
 2978 008c 80BD     		pop	{r7, pc}
 2979              	.L199:
 2980 008e C046     		.align	2
 2981              	.L198:
 2982 0090 00011040 		.word	1074790656
 2983 0094 FFFFF9FF 		.word	-393217
 2984 0098 04011040 		.word	1074790660
 2985 009c 08011040 		.word	1074790664
 2986              		.cfi_endproc
 2987              	.LFE52:
 2988              		.size	CySysSetPeripheralAccessArbPriority, .-CySysSetPeripheralAccessArbPriority
 2989              		.text
 2990              	.Letext0:
 2991              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2992              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 2993              		.section	.debug_info,"",%progbits
 2994              	.Ldebug_info0:
 2995 0000 730A0000 		.4byte	0xa73
 2996 0004 0400     		.2byte	0x4
 2997 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 106


 2998 000a 04       		.byte	0x4
 2999 000b 01       		.uleb128 0x1
 3000 000c 71060000 		.4byte	.LASF111
 3001 0010 01       		.byte	0x1
 3002 0011 10070000 		.4byte	.LASF112
 3003 0015 18050000 		.4byte	.LASF113
 3004 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3005 001d 00000000 		.4byte	0
 3006 0021 00000000 		.4byte	.Ldebug_line0
 3007 0025 02       		.uleb128 0x2
 3008 0026 01       		.byte	0x1
 3009 0027 06       		.byte	0x6
 3010 0028 D8000000 		.4byte	.LASF0
 3011 002c 02       		.uleb128 0x2
 3012 002d 01       		.byte	0x1
 3013 002e 08       		.byte	0x8
 3014 002f D1040000 		.4byte	.LASF1
 3015 0033 02       		.uleb128 0x2
 3016 0034 02       		.byte	0x2
 3017 0035 05       		.byte	0x5
 3018 0036 DF040000 		.4byte	.LASF2
 3019 003a 02       		.uleb128 0x2
 3020 003b 02       		.byte	0x2
 3021 003c 07       		.byte	0x7
 3022 003d D1020000 		.4byte	.LASF3
 3023 0041 02       		.uleb128 0x2
 3024 0042 04       		.byte	0x4
 3025 0043 05       		.byte	0x5
 3026 0044 3D010000 		.4byte	.LASF4
 3027 0048 02       		.uleb128 0x2
 3028 0049 04       		.byte	0x4
 3029 004a 07       		.byte	0x7
 3030 004b 5B020000 		.4byte	.LASF5
 3031 004f 02       		.uleb128 0x2
 3032 0050 08       		.byte	0x8
 3033 0051 05       		.byte	0x5
 3034 0052 CA000000 		.4byte	.LASF6
 3035 0056 02       		.uleb128 0x2
 3036 0057 08       		.byte	0x8
 3037 0058 07       		.byte	0x7
 3038 0059 54000000 		.4byte	.LASF7
 3039 005d 03       		.uleb128 0x3
 3040 005e 04       		.byte	0x4
 3041 005f 05       		.byte	0x5
 3042 0060 696E7400 		.ascii	"int\000"
 3043 0064 02       		.uleb128 0x2
 3044 0065 04       		.byte	0x4
 3045 0066 07       		.byte	0x7
 3046 0067 3F020000 		.4byte	.LASF8
 3047 006b 04       		.uleb128 0x4
 3048 006c 5D010000 		.4byte	.LASF9
 3049 0070 02       		.byte	0x2
 3050 0071 9801     		.2byte	0x198
 3051 0073 2C000000 		.4byte	0x2c
 3052 0077 04       		.uleb128 0x4
 3053 0078 0F000000 		.4byte	.LASF10
 3054 007c 02       		.byte	0x2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 107


 3055 007d 9901     		.2byte	0x199
 3056 007f 3A000000 		.4byte	0x3a
 3057 0083 04       		.uleb128 0x4
 3058 0084 A0010000 		.4byte	.LASF11
 3059 0088 02       		.byte	0x2
 3060 0089 9A01     		.2byte	0x19a
 3061 008b 48000000 		.4byte	0x48
 3062 008f 02       		.uleb128 0x2
 3063 0090 04       		.byte	0x4
 3064 0091 04       		.byte	0x4
 3065 0092 5B040000 		.4byte	.LASF12
 3066 0096 02       		.uleb128 0x2
 3067 0097 08       		.byte	0x8
 3068 0098 04       		.byte	0x4
 3069 0099 7C010000 		.4byte	.LASF13
 3070 009d 02       		.uleb128 0x2
 3071 009e 01       		.byte	0x1
 3072 009f 08       		.byte	0x8
 3073 00a0 6E050000 		.4byte	.LASF14
 3074 00a4 04       		.uleb128 0x4
 3075 00a5 9E040000 		.4byte	.LASF15
 3076 00a9 02       		.byte	0x2
 3077 00aa 4202     		.2byte	0x242
 3078 00ac B0000000 		.4byte	0xb0
 3079 00b0 05       		.uleb128 0x5
 3080 00b1 6B000000 		.4byte	0x6b
 3081 00b5 04       		.uleb128 0x4
 3082 00b6 82030000 		.4byte	.LASF16
 3083 00ba 02       		.byte	0x2
 3084 00bb 4402     		.2byte	0x244
 3085 00bd C1000000 		.4byte	0xc1
 3086 00c1 05       		.uleb128 0x5
 3087 00c2 83000000 		.4byte	0x83
 3088 00c6 04       		.uleb128 0x4
 3089 00c7 8B050000 		.4byte	.LASF17
 3090 00cb 02       		.byte	0x2
 3091 00cc 5402     		.2byte	0x254
 3092 00ce D2000000 		.4byte	0xd2
 3093 00d2 06       		.uleb128 0x6
 3094 00d3 04       		.byte	0x4
 3095 00d4 D8000000 		.4byte	0xd8
 3096 00d8 07       		.uleb128 0x7
 3097 00d9 02       		.uleb128 0x2
 3098 00da 04       		.byte	0x4
 3099 00db 07       		.byte	0x7
 3100 00dc AB030000 		.4byte	.LASF18
 3101 00e0 08       		.uleb128 0x8
 3102 00e1 70040000 		.4byte	.LASF19
 3103 00e5 03       		.byte	0x3
 3104 00e6 F3       		.byte	0xf3
 3105 00e7 D2000000 		.4byte	0xd2
 3106 00eb 09       		.uleb128 0x9
 3107 00ec FF060000 		.4byte	.LASF20
 3108 00f0 01       		.byte	0x1
 3109 00f1 68       		.byte	0x68
 3110 00f2 00000000 		.4byte	.LFB1
 3111 00f6 1C000000 		.4byte	.LFE1-.LFB1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 108


 3112 00fa 01       		.uleb128 0x1
 3113 00fb 9C       		.byte	0x9c
 3114 00fc 0A       		.uleb128 0xa
 3115 00fd 88020000 		.4byte	.LASF21
 3116 0101 01       		.byte	0x1
 3117 0102 88       		.byte	0x88
 3118 0103 00000000 		.4byte	.LFB2
 3119 0107 1C000000 		.4byte	.LFE2-.LFB2
 3120 010b 01       		.uleb128 0x1
 3121 010c 9C       		.byte	0x9c
 3122 010d 0B       		.uleb128 0xb
 3123 010e C4010000 		.4byte	.LASF28
 3124 0112 01       		.byte	0x1
 3125 0113 AC       		.byte	0xac
 3126 0114 00000000 		.4byte	.LFB3
 3127 0118 44010000 		.4byte	.LFE3-.LFB3
 3128 011c 01       		.uleb128 0x1
 3129 011d 9C       		.byte	0x9c
 3130 011e 75010000 		.4byte	0x175
 3131 0122 0C       		.uleb128 0xc
 3132 0123 6900     		.ascii	"i\000"
 3133 0125 01       		.byte	0x1
 3134 0126 AF       		.byte	0xaf
 3135 0127 83000000 		.4byte	0x83
 3136 012b 02       		.uleb128 0x2
 3137 012c 91       		.byte	0x91
 3138 012d 6C       		.sleb128 -20
 3139 012e 0D       		.uleb128 0xd
 3140 012f E4000000 		.4byte	.LASF22
 3141 0133 01       		.byte	0x1
 3142 0134 B2       		.byte	0xb2
 3143 0135 83000000 		.4byte	0x83
 3144 0139 02       		.uleb128 0x2
 3145 013a 91       		.byte	0x91
 3146 013b 68       		.sleb128 -24
 3147 013c 0D       		.uleb128 0xd
 3148 013d F5000000 		.4byte	.LASF23
 3149 0141 01       		.byte	0x1
 3150 0142 B3       		.byte	0xb3
 3151 0143 6B000000 		.4byte	0x6b
 3152 0147 02       		.uleb128 0x2
 3153 0148 91       		.byte	0x91
 3154 0149 5F       		.sleb128 -33
 3155 014a 0D       		.uleb128 0xd
 3156 014b E4020000 		.4byte	.LASF24
 3157 014f 01       		.byte	0x1
 3158 0150 B4       		.byte	0xb4
 3159 0151 83000000 		.4byte	0x83
 3160 0155 02       		.uleb128 0x2
 3161 0156 91       		.byte	0x91
 3162 0157 64       		.sleb128 -28
 3163 0158 0D       		.uleb128 0xd
 3164 0159 04010000 		.4byte	.LASF25
 3165 015d 01       		.byte	0x1
 3166 015e B5       		.byte	0xb5
 3167 015f 83000000 		.4byte	0x83
 3168 0163 02       		.uleb128 0x2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 109


 3169 0164 91       		.byte	0x91
 3170 0165 60       		.sleb128 -32
 3171 0166 0D       		.uleb128 0xd
 3172 0167 F0050000 		.4byte	.LASF26
 3173 016b 01       		.byte	0x1
 3174 016c B6       		.byte	0xb6
 3175 016d C1000000 		.4byte	0xc1
 3176 0171 02       		.uleb128 0x2
 3177 0172 91       		.byte	0x91
 3178 0173 58       		.sleb128 -40
 3179 0174 00       		.byte	0
 3180 0175 0E       		.uleb128 0xe
 3181 0176 68030000 		.4byte	.LASF27
 3182 017a 01       		.byte	0x1
 3183 017b 1A01     		.2byte	0x11a
 3184 017d 00000000 		.4byte	.LFB4
 3185 0181 1C000000 		.4byte	.LFE4-.LFB4
 3186 0185 01       		.uleb128 0x1
 3187 0186 9C       		.byte	0x9c
 3188 0187 0F       		.uleb128 0xf
 3189 0188 1F010000 		.4byte	.LASF42
 3190 018c 01       		.byte	0x1
 3191 018d 2D01     		.2byte	0x12d
 3192 018f 83000000 		.4byte	0x83
 3193 0193 00000000 		.4byte	.LFB5
 3194 0197 20000000 		.4byte	.LFE5-.LFB5
 3195 019b 01       		.uleb128 0x1
 3196 019c 9C       		.byte	0x9c
 3197 019d 10       		.uleb128 0x10
 3198 019e 1F000000 		.4byte	.LASF29
 3199 01a2 01       		.byte	0x1
 3200 01a3 AA01     		.2byte	0x1aa
 3201 01a5 00000000 		.4byte	.LFB6
 3202 01a9 48000000 		.4byte	.LFE6-.LFB6
 3203 01ad 01       		.uleb128 0x1
 3204 01ae 9C       		.byte	0x9c
 3205 01af E1010000 		.4byte	0x1e1
 3206 01b3 11       		.uleb128 0x11
 3207 01b4 07050000 		.4byte	.LASF33
 3208 01b8 01       		.byte	0x1
 3209 01b9 AA01     		.2byte	0x1aa
 3210 01bb 83000000 		.4byte	0x83
 3211 01bf 02       		.uleb128 0x2
 3212 01c0 91       		.byte	0x91
 3213 01c1 64       		.sleb128 -28
 3214 01c2 12       		.uleb128 0x12
 3215 01c3 F5000000 		.4byte	.LASF23
 3216 01c7 01       		.byte	0x1
 3217 01c8 AC01     		.2byte	0x1ac
 3218 01ca 6B000000 		.4byte	0x6b
 3219 01ce 02       		.uleb128 0x2
 3220 01cf 91       		.byte	0x91
 3221 01d0 6F       		.sleb128 -17
 3222 01d1 12       		.uleb128 0x12
 3223 01d2 3C070000 		.4byte	.LASF30
 3224 01d6 01       		.byte	0x1
 3225 01d7 AD01     		.2byte	0x1ad
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 110


 3226 01d9 83000000 		.4byte	0x83
 3227 01dd 02       		.uleb128 0x2
 3228 01de 91       		.byte	0x91
 3229 01df 68       		.sleb128 -24
 3230 01e0 00       		.byte	0
 3231 01e1 13       		.uleb128 0x13
 3232 01e2 AC010000 		.4byte	.LASF45
 3233 01e6 01       		.byte	0x1
 3234 01e7 CF01     		.2byte	0x1cf
 3235 01e9 83000000 		.4byte	0x83
 3236 01ed 00000000 		.4byte	.LFB7
 3237 01f1 34000000 		.4byte	.LFE7-.LFB7
 3238 01f5 01       		.uleb128 0x1
 3239 01f6 9C       		.byte	0x9c
 3240 01f7 1A020000 		.4byte	0x21a
 3241 01fb 12       		.uleb128 0x12
 3242 01fc F5000000 		.4byte	.LASF23
 3243 0200 01       		.byte	0x1
 3244 0201 D101     		.2byte	0x1d1
 3245 0203 6B000000 		.4byte	0x6b
 3246 0207 02       		.uleb128 0x2
 3247 0208 91       		.byte	0x91
 3248 0209 6F       		.sleb128 -17
 3249 020a 12       		.uleb128 0x12
 3250 020b 03040000 		.4byte	.LASF31
 3251 020f 01       		.byte	0x1
 3252 0210 D201     		.2byte	0x1d2
 3253 0212 83000000 		.4byte	0x83
 3254 0216 02       		.uleb128 0x2
 3255 0217 91       		.byte	0x91
 3256 0218 68       		.sleb128 -24
 3257 0219 00       		.byte	0
 3258 021a 10       		.uleb128 0x10
 3259 021b A8050000 		.4byte	.LASF32
 3260 021f 01       		.byte	0x1
 3261 0220 0602     		.2byte	0x206
 3262 0222 00000000 		.4byte	.LFB8
 3263 0226 44000000 		.4byte	.LFE8-.LFB8
 3264 022a 01       		.uleb128 0x1
 3265 022b 9C       		.byte	0x9c
 3266 022c 4F020000 		.4byte	0x24f
 3267 0230 11       		.uleb128 0x11
 3268 0231 69060000 		.4byte	.LASF34
 3269 0235 01       		.byte	0x1
 3270 0236 0602     		.2byte	0x206
 3271 0238 83000000 		.4byte	0x83
 3272 023c 02       		.uleb128 0x2
 3273 023d 91       		.byte	0x91
 3274 023e 64       		.sleb128 -28
 3275 023f 12       		.uleb128 0x12
 3276 0240 F5000000 		.4byte	.LASF23
 3277 0244 01       		.byte	0x1
 3278 0245 0802     		.2byte	0x208
 3279 0247 6B000000 		.4byte	0x6b
 3280 024b 02       		.uleb128 0x2
 3281 024c 91       		.byte	0x91
 3282 024d 6F       		.sleb128 -17
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 111


 3283 024e 00       		.byte	0
 3284 024f 10       		.uleb128 0x10
 3285 0250 22030000 		.4byte	.LASF35
 3286 0254 01       		.byte	0x1
 3287 0255 4002     		.2byte	0x240
 3288 0257 00000000 		.4byte	.LFB9
 3289 025b B8000000 		.4byte	.LFE9-.LFB9
 3290 025f 01       		.uleb128 0x1
 3291 0260 9C       		.byte	0x9c
 3292 0261 B1020000 		.4byte	0x2b1
 3293 0265 11       		.uleb128 0x11
 3294 0266 E4000000 		.4byte	.LASF22
 3295 026a 01       		.byte	0x1
 3296 026b 4002     		.2byte	0x240
 3297 026d 83000000 		.4byte	0x83
 3298 0271 02       		.uleb128 0x2
 3299 0272 91       		.byte	0x91
 3300 0273 4C       		.sleb128 -52
 3301 0274 12       		.uleb128 0x12
 3302 0275 6B000000 		.4byte	.LASF36
 3303 0279 01       		.byte	0x1
 3304 027a 4302     		.2byte	0x243
 3305 027c C1020000 		.4byte	0x2c1
 3306 0280 02       		.uleb128 0x2
 3307 0281 91       		.byte	0x91
 3308 0282 60       		.sleb128 -32
 3309 0283 12       		.uleb128 0x12
 3310 0284 53010000 		.4byte	.LASF37
 3311 0288 01       		.byte	0x1
 3312 0289 4402     		.2byte	0x244
 3313 028b D6020000 		.4byte	0x2d6
 3314 028f 02       		.uleb128 0x2
 3315 0290 91       		.byte	0x91
 3316 0291 50       		.sleb128 -48
 3317 0292 12       		.uleb128 0x12
 3318 0293 35010000 		.4byte	.LASF38
 3319 0297 01       		.byte	0x1
 3320 0298 4E02     		.2byte	0x24e
 3321 029a 83000000 		.4byte	0x83
 3322 029e 02       		.uleb128 0x2
 3323 029f 91       		.byte	0x91
 3324 02a0 6C       		.sleb128 -20
 3325 02a1 12       		.uleb128 0x12
 3326 02a2 F5000000 		.4byte	.LASF23
 3327 02a6 01       		.byte	0x1
 3328 02a7 5502     		.2byte	0x255
 3329 02a9 6B000000 		.4byte	0x6b
 3330 02ad 02       		.uleb128 0x2
 3331 02ae 91       		.byte	0x91
 3332 02af 6B       		.sleb128 -21
 3333 02b0 00       		.byte	0
 3334 02b1 14       		.uleb128 0x14
 3335 02b2 83000000 		.4byte	0x83
 3336 02b6 C1020000 		.4byte	0x2c1
 3337 02ba 15       		.uleb128 0x15
 3338 02bb D9000000 		.4byte	0xd9
 3339 02bf 01       		.byte	0x1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 112


 3340 02c0 00       		.byte	0
 3341 02c1 05       		.uleb128 0x5
 3342 02c2 B1020000 		.4byte	0x2b1
 3343 02c6 14       		.uleb128 0x14
 3344 02c7 83000000 		.4byte	0x83
 3345 02cb D6020000 		.4byte	0x2d6
 3346 02cf 15       		.uleb128 0x15
 3347 02d0 D9000000 		.4byte	0xd9
 3348 02d4 03       		.byte	0x3
 3349 02d5 00       		.byte	0
 3350 02d6 05       		.uleb128 0x5
 3351 02d7 C6020000 		.4byte	0x2c6
 3352 02db 10       		.uleb128 0x10
 3353 02dc 61040000 		.4byte	.LASF39
 3354 02e0 01       		.byte	0x1
 3355 02e1 B107     		.2byte	0x7b1
 3356 02e3 00000000 		.4byte	.LFB10
 3357 02e7 60000000 		.4byte	.LFE10-.LFB10
 3358 02eb 01       		.uleb128 0x1
 3359 02ec 9C       		.byte	0x9c
 3360 02ed 01030000 		.4byte	0x301
 3361 02f1 11       		.uleb128 0x11
 3362 02f2 A3040000 		.4byte	.LASF40
 3363 02f6 01       		.byte	0x1
 3364 02f7 B107     		.2byte	0x7b1
 3365 02f9 83000000 		.4byte	0x83
 3366 02fd 02       		.uleb128 0x2
 3367 02fe 91       		.byte	0x91
 3368 02ff 74       		.sleb128 -12
 3369 0300 00       		.byte	0
 3370 0301 0E       		.uleb128 0xe
 3371 0302 1E060000 		.4byte	.LASF41
 3372 0306 01       		.byte	0x1
 3373 0307 CF07     		.2byte	0x7cf
 3374 0309 00000000 		.4byte	.LFB11
 3375 030d 28000000 		.4byte	.LFE11-.LFB11
 3376 0311 01       		.uleb128 0x1
 3377 0312 9C       		.byte	0x9c
 3378 0313 0F       		.uleb128 0xf
 3379 0314 6D020000 		.4byte	.LASF43
 3380 0318 01       		.byte	0x1
 3381 0319 E107     		.2byte	0x7e1
 3382 031b 83000000 		.4byte	0x83
 3383 031f 00000000 		.4byte	.LFB12
 3384 0323 18000000 		.4byte	.LFE12-.LFB12
 3385 0327 01       		.uleb128 0x1
 3386 0328 9C       		.byte	0x9c
 3387 0329 0E       		.uleb128 0xe
 3388 032a 89010000 		.4byte	.LASF44
 3389 032e 01       		.byte	0x1
 3390 032f F107     		.2byte	0x7f1
 3391 0331 00000000 		.4byte	.LFB13
 3392 0335 14000000 		.4byte	.LFE13-.LFB13
 3393 0339 01       		.uleb128 0x1
 3394 033a 9C       		.byte	0x9c
 3395 033b 16       		.uleb128 0x16
 3396 033c BD020000 		.4byte	.LASF46
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 113


 3397 0340 01       		.byte	0x1
 3398 0341 0B08     		.2byte	0x80b
 3399 0343 83000000 		.4byte	0x83
 3400 0347 00000000 		.4byte	.LFB14
 3401 034b 30000000 		.4byte	.LFE14-.LFB14
 3402 034f 01       		.uleb128 0x1
 3403 0350 9C       		.byte	0x9c
 3404 0351 74030000 		.4byte	0x374
 3405 0355 11       		.uleb128 0x11
 3406 0356 11050000 		.4byte	.LASF47
 3407 035a 01       		.byte	0x1
 3408 035b 0B08     		.2byte	0x80b
 3409 035d 83000000 		.4byte	0x83
 3410 0361 02       		.uleb128 0x2
 3411 0362 91       		.byte	0x91
 3412 0363 6C       		.sleb128 -20
 3413 0364 12       		.uleb128 0x12
 3414 0365 97030000 		.4byte	.LASF48
 3415 0369 01       		.byte	0x1
 3416 036a 0D08     		.2byte	0x80d
 3417 036c 83000000 		.4byte	0x83
 3418 0370 02       		.uleb128 0x2
 3419 0371 91       		.byte	0x91
 3420 0372 74       		.sleb128 -12
 3421 0373 00       		.byte	0
 3422 0374 16       		.uleb128 0x16
 3423 0375 46000000 		.4byte	.LASF49
 3424 0379 01       		.byte	0x1
 3425 037a 2208     		.2byte	0x822
 3426 037c 83000000 		.4byte	0x83
 3427 0380 00000000 		.4byte	.LFB15
 3428 0384 24000000 		.4byte	.LFE15-.LFB15
 3429 0388 01       		.uleb128 0x1
 3430 0389 9C       		.byte	0x9c
 3431 038a 9E030000 		.4byte	0x39e
 3432 038e 12       		.uleb128 0x12
 3433 038f 16000000 		.4byte	.LASF50
 3434 0393 01       		.byte	0x1
 3435 0394 2408     		.2byte	0x824
 3436 0396 83000000 		.4byte	0x83
 3437 039a 02       		.uleb128 0x2
 3438 039b 91       		.byte	0x91
 3439 039c 74       		.sleb128 -12
 3440 039d 00       		.byte	0
 3441 039e 17       		.uleb128 0x17
 3442 039f 76000000 		.4byte	.LASF51
 3443 03a3 01       		.byte	0x1
 3444 03a4 3908     		.2byte	0x839
 3445 03a6 00000000 		.4byte	.LFB16
 3446 03aa 18000000 		.4byte	.LFE16-.LFB16
 3447 03ae 01       		.uleb128 0x1
 3448 03af 9C       		.byte	0x9c
 3449 03b0 C4030000 		.4byte	0x3c4
 3450 03b4 11       		.uleb128 0x11
 3451 03b5 A7010000 		.4byte	.LASF52
 3452 03b9 01       		.byte	0x1
 3453 03ba 3908     		.2byte	0x839
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 114


 3454 03bc 83000000 		.4byte	0x83
 3455 03c0 02       		.uleb128 0x2
 3456 03c1 91       		.byte	0x91
 3457 03c2 74       		.sleb128 -12
 3458 03c3 00       		.byte	0
 3459 03c4 13       		.uleb128 0x13
 3460 03c5 56030000 		.4byte	.LASF53
 3461 03c9 01       		.byte	0x1
 3462 03ca 5208     		.2byte	0x852
 3463 03cc C6000000 		.4byte	0xc6
 3464 03d0 00000000 		.4byte	.LFB17
 3465 03d4 48000000 		.4byte	.LFE17-.LFB17
 3466 03d8 01       		.uleb128 0x1
 3467 03d9 9C       		.byte	0x9c
 3468 03da 1B040000 		.4byte	0x41b
 3469 03de 11       		.uleb128 0x11
 3470 03df 12030000 		.4byte	.LASF54
 3471 03e3 01       		.byte	0x1
 3472 03e4 5208     		.2byte	0x852
 3473 03e6 6B000000 		.4byte	0x6b
 3474 03ea 02       		.uleb128 0x2
 3475 03eb 91       		.byte	0x91
 3476 03ec 6F       		.sleb128 -17
 3477 03ed 11       		.uleb128 0x11
 3478 03ee FB030000 		.4byte	.LASF55
 3479 03f2 01       		.byte	0x1
 3480 03f3 5208     		.2byte	0x852
 3481 03f5 C6000000 		.4byte	0xc6
 3482 03f9 02       		.uleb128 0x2
 3483 03fa 91       		.byte	0x91
 3484 03fb 68       		.sleb128 -24
 3485 03fc 12       		.uleb128 0x12
 3486 03fd 38000000 		.4byte	.LASF56
 3487 0401 01       		.byte	0x1
 3488 0402 5408     		.2byte	0x854
 3489 0404 C6000000 		.4byte	0xc6
 3490 0408 02       		.uleb128 0x2
 3491 0409 91       		.byte	0x91
 3492 040a 70       		.sleb128 -16
 3493 040b 12       		.uleb128 0x12
 3494 040c 00000000 		.4byte	.LASF57
 3495 0410 01       		.byte	0x1
 3496 0411 5508     		.2byte	0x855
 3497 0413 1B040000 		.4byte	0x41b
 3498 0417 02       		.uleb128 0x2
 3499 0418 91       		.byte	0x91
 3500 0419 74       		.sleb128 -12
 3501 041a 00       		.byte	0
 3502 041b 06       		.uleb128 0x6
 3503 041c 04       		.byte	0x4
 3504 041d C6000000 		.4byte	0xc6
 3505 0421 13       		.uleb128 0x13
 3506 0422 F5040000 		.4byte	.LASF58
 3507 0426 01       		.byte	0x1
 3508 0427 7408     		.2byte	0x874
 3509 0429 C6000000 		.4byte	0xc6
 3510 042d 00000000 		.4byte	.LFB18
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 115


 3511 0431 34000000 		.4byte	.LFE18-.LFB18
 3512 0435 01       		.uleb128 0x1
 3513 0436 9C       		.byte	0x9c
 3514 0437 5A040000 		.4byte	0x45a
 3515 043b 11       		.uleb128 0x11
 3516 043c 12030000 		.4byte	.LASF54
 3517 0440 01       		.byte	0x1
 3518 0441 7408     		.2byte	0x874
 3519 0443 6B000000 		.4byte	0x6b
 3520 0447 02       		.uleb128 0x2
 3521 0448 91       		.byte	0x91
 3522 0449 6F       		.sleb128 -17
 3523 044a 12       		.uleb128 0x12
 3524 044b 00000000 		.4byte	.LASF57
 3525 044f 01       		.byte	0x1
 3526 0450 7608     		.2byte	0x876
 3527 0452 1B040000 		.4byte	0x41b
 3528 0456 02       		.uleb128 0x2
 3529 0457 91       		.byte	0x91
 3530 0458 74       		.sleb128 -12
 3531 0459 00       		.byte	0
 3532 045a 13       		.uleb128 0x13
 3533 045b 03030000 		.4byte	.LASF59
 3534 045f 01       		.byte	0x1
 3535 0460 8A08     		.2byte	0x88a
 3536 0462 C6000000 		.4byte	0xc6
 3537 0466 00000000 		.4byte	.LFB19
 3538 046a 4C000000 		.4byte	.LFE19-.LFB19
 3539 046e 01       		.uleb128 0x1
 3540 046f 9C       		.byte	0x9c
 3541 0470 B1040000 		.4byte	0x4b1
 3542 0474 11       		.uleb128 0x11
 3543 0475 12030000 		.4byte	.LASF54
 3544 0479 01       		.byte	0x1
 3545 047a 8A08     		.2byte	0x88a
 3546 047c 6B000000 		.4byte	0x6b
 3547 0480 02       		.uleb128 0x2
 3548 0481 91       		.byte	0x91
 3549 0482 6F       		.sleb128 -17
 3550 0483 11       		.uleb128 0x11
 3551 0484 FB030000 		.4byte	.LASF55
 3552 0488 01       		.byte	0x1
 3553 0489 8A08     		.2byte	0x88a
 3554 048b C6000000 		.4byte	0xc6
 3555 048f 02       		.uleb128 0x2
 3556 0490 91       		.byte	0x91
 3557 0491 68       		.sleb128 -24
 3558 0492 12       		.uleb128 0x12
 3559 0493 38000000 		.4byte	.LASF56
 3560 0497 01       		.byte	0x1
 3561 0498 8C08     		.2byte	0x88c
 3562 049a C6000000 		.4byte	0xc6
 3563 049e 02       		.uleb128 0x2
 3564 049f 91       		.byte	0x91
 3565 04a0 70       		.sleb128 -16
 3566 04a1 12       		.uleb128 0x12
 3567 04a2 00000000 		.4byte	.LASF57
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 116


 3568 04a6 01       		.byte	0x1
 3569 04a7 8D08     		.2byte	0x88d
 3570 04a9 1B040000 		.4byte	0x41b
 3571 04ad 02       		.uleb128 0x2
 3572 04ae 91       		.byte	0x91
 3573 04af 74       		.sleb128 -12
 3574 04b0 00       		.byte	0
 3575 04b1 13       		.uleb128 0x13
 3576 04b2 82040000 		.4byte	.LASF60
 3577 04b6 01       		.byte	0x1
 3578 04b7 A608     		.2byte	0x8a6
 3579 04b9 C6000000 		.4byte	0xc6
 3580 04bd 00000000 		.4byte	.LFB20
 3581 04c1 36000000 		.4byte	.LFE20-.LFB20
 3582 04c5 01       		.uleb128 0x1
 3583 04c6 9C       		.byte	0x9c
 3584 04c7 EA040000 		.4byte	0x4ea
 3585 04cb 11       		.uleb128 0x11
 3586 04cc 12030000 		.4byte	.LASF54
 3587 04d0 01       		.byte	0x1
 3588 04d1 A608     		.2byte	0x8a6
 3589 04d3 6B000000 		.4byte	0x6b
 3590 04d7 02       		.uleb128 0x2
 3591 04d8 91       		.byte	0x91
 3592 04d9 6F       		.sleb128 -17
 3593 04da 12       		.uleb128 0x12
 3594 04db 00000000 		.4byte	.LASF57
 3595 04df 01       		.byte	0x1
 3596 04e0 A808     		.2byte	0x8a8
 3597 04e2 1B040000 		.4byte	0x41b
 3598 04e6 02       		.uleb128 0x2
 3599 04e7 91       		.byte	0x91
 3600 04e8 74       		.sleb128 -12
 3601 04e9 00       		.byte	0
 3602 04ea 10       		.uleb128 0x10
 3603 04eb 4A040000 		.4byte	.LASF61
 3604 04ef 01       		.byte	0x1
 3605 04f0 B908     		.2byte	0x8b9
 3606 04f2 00000000 		.4byte	.LFB21
 3607 04f6 A8000000 		.4byte	.LFE21-.LFB21
 3608 04fa 01       		.uleb128 0x1
 3609 04fb 9C       		.byte	0x9c
 3610 04fc 4C050000 		.4byte	0x54c
 3611 0500 11       		.uleb128 0x11
 3612 0501 12030000 		.4byte	.LASF54
 3613 0505 01       		.byte	0x1
 3614 0506 B908     		.2byte	0x8b9
 3615 0508 6B000000 		.4byte	0x6b
 3616 050c 02       		.uleb128 0x2
 3617 050d 91       		.byte	0x91
 3618 050e 5F       		.sleb128 -33
 3619 050f 11       		.uleb128 0x11
 3620 0510 19030000 		.4byte	.LASF62
 3621 0514 01       		.byte	0x1
 3622 0515 B908     		.2byte	0x8b9
 3623 0517 6B000000 		.4byte	0x6b
 3624 051b 02       		.uleb128 0x2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 117


 3625 051c 91       		.byte	0x91
 3626 051d 5E       		.sleb128 -34
 3627 051e 12       		.uleb128 0x12
 3628 051f F5000000 		.4byte	.LASF23
 3629 0523 01       		.byte	0x1
 3630 0524 BB08     		.2byte	0x8bb
 3631 0526 6B000000 		.4byte	0x6b
 3632 052a 02       		.uleb128 0x2
 3633 052b 91       		.byte	0x91
 3634 052c 6B       		.sleb128 -21
 3635 052d 12       		.uleb128 0x12
 3636 052e 83010000 		.4byte	.LASF63
 3637 0532 01       		.byte	0x1
 3638 0533 BC08     		.2byte	0x8bc
 3639 0535 83000000 		.4byte	0x83
 3640 0539 02       		.uleb128 0x2
 3641 053a 91       		.byte	0x91
 3642 053b 6C       		.sleb128 -20
 3643 053c 12       		.uleb128 0x12
 3644 053d 09020000 		.4byte	.LASF64
 3645 0541 01       		.byte	0x1
 3646 0542 BD08     		.2byte	0x8bd
 3647 0544 83000000 		.4byte	0x83
 3648 0548 02       		.uleb128 0x2
 3649 0549 91       		.byte	0x91
 3650 054a 64       		.sleb128 -28
 3651 054b 00       		.byte	0
 3652 054c 13       		.uleb128 0x13
 3653 054d DD010000 		.4byte	.LASF65
 3654 0551 01       		.byte	0x1
 3655 0552 DB08     		.2byte	0x8db
 3656 0554 6B000000 		.4byte	0x6b
 3657 0558 00000000 		.4byte	.LFB22
 3658 055c 5C000000 		.4byte	.LFE22-.LFB22
 3659 0560 01       		.uleb128 0x1
 3660 0561 9C       		.byte	0x9c
 3661 0562 85050000 		.4byte	0x585
 3662 0566 11       		.uleb128 0x11
 3663 0567 12030000 		.4byte	.LASF54
 3664 056b 01       		.byte	0x1
 3665 056c DB08     		.2byte	0x8db
 3666 056e 6B000000 		.4byte	0x6b
 3667 0572 02       		.uleb128 0x2
 3668 0573 91       		.byte	0x91
 3669 0574 6F       		.sleb128 -17
 3670 0575 12       		.uleb128 0x12
 3671 0576 19030000 		.4byte	.LASF62
 3672 057a 01       		.byte	0x1
 3673 057b DD08     		.2byte	0x8dd
 3674 057d 6B000000 		.4byte	0x6b
 3675 0581 02       		.uleb128 0x2
 3676 0582 91       		.byte	0x91
 3677 0583 77       		.sleb128 -9
 3678 0584 00       		.byte	0
 3679 0585 17       		.uleb128 0x17
 3680 0586 E9040000 		.4byte	.LASF66
 3681 058a 01       		.byte	0x1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 118


 3682 058b F008     		.2byte	0x8f0
 3683 058d 00000000 		.4byte	.LFB23
 3684 0591 28000000 		.4byte	.LFE23-.LFB23
 3685 0595 01       		.uleb128 0x1
 3686 0596 9C       		.byte	0x9c
 3687 0597 AB050000 		.4byte	0x5ab
 3688 059b 11       		.uleb128 0x11
 3689 059c 12030000 		.4byte	.LASF54
 3690 05a0 01       		.byte	0x1
 3691 05a1 F008     		.2byte	0x8f0
 3692 05a3 6B000000 		.4byte	0x6b
 3693 05a7 02       		.uleb128 0x2
 3694 05a8 91       		.byte	0x91
 3695 05a9 77       		.sleb128 -9
 3696 05aa 00       		.byte	0
 3697 05ab 16       		.uleb128 0x16
 3698 05ac BC000000 		.4byte	.LASF67
 3699 05b0 01       		.byte	0x1
 3700 05b1 0209     		.2byte	0x902
 3701 05b3 6B000000 		.4byte	0x6b
 3702 05b7 00000000 		.4byte	.LFB24
 3703 05bb 30000000 		.4byte	.LFE24-.LFB24
 3704 05bf 01       		.uleb128 0x1
 3705 05c0 9C       		.byte	0x9c
 3706 05c1 D5050000 		.4byte	0x5d5
 3707 05c5 11       		.uleb128 0x11
 3708 05c6 12030000 		.4byte	.LASF54
 3709 05ca 01       		.byte	0x1
 3710 05cb 0209     		.2byte	0x902
 3711 05cd 6B000000 		.4byte	0x6b
 3712 05d1 02       		.uleb128 0x2
 3713 05d2 91       		.byte	0x91
 3714 05d3 77       		.sleb128 -9
 3715 05d4 00       		.byte	0
 3716 05d5 17       		.uleb128 0x17
 3717 05d6 46010000 		.4byte	.LASF68
 3718 05da 01       		.byte	0x1
 3719 05db 1209     		.2byte	0x912
 3720 05dd 00000000 		.4byte	.LFB25
 3721 05e1 28000000 		.4byte	.LFE25-.LFB25
 3722 05e5 01       		.uleb128 0x1
 3723 05e6 9C       		.byte	0x9c
 3724 05e7 FB050000 		.4byte	0x5fb
 3725 05eb 11       		.uleb128 0x11
 3726 05ec 12030000 		.4byte	.LASF54
 3727 05f0 01       		.byte	0x1
 3728 05f1 1209     		.2byte	0x912
 3729 05f3 6B000000 		.4byte	0x6b
 3730 05f7 02       		.uleb128 0x2
 3731 05f8 91       		.byte	0x91
 3732 05f9 77       		.sleb128 -9
 3733 05fa 00       		.byte	0
 3734 05fb 17       		.uleb128 0x17
 3735 05fc 98020000 		.4byte	.LASF69
 3736 0600 01       		.byte	0x1
 3737 0601 2009     		.2byte	0x920
 3738 0603 00000000 		.4byte	.LFB26
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 119


 3739 0607 28000000 		.4byte	.LFE26-.LFB26
 3740 060b 01       		.uleb128 0x1
 3741 060c 9C       		.byte	0x9c
 3742 060d 21060000 		.4byte	0x621
 3743 0611 11       		.uleb128 0x11
 3744 0612 12030000 		.4byte	.LASF54
 3745 0616 01       		.byte	0x1
 3746 0617 2009     		.2byte	0x920
 3747 0619 6B000000 		.4byte	0x6b
 3748 061d 02       		.uleb128 0x2
 3749 061e 91       		.byte	0x91
 3750 061f 77       		.sleb128 -9
 3751 0620 00       		.byte	0
 3752 0621 17       		.uleb128 0x17
 3753 0622 E9030000 		.4byte	.LASF70
 3754 0626 01       		.byte	0x1
 3755 0627 2F09     		.2byte	0x92f
 3756 0629 00000000 		.4byte	.LFB27
 3757 062d 28000000 		.4byte	.LFE27-.LFB27
 3758 0631 01       		.uleb128 0x1
 3759 0632 9C       		.byte	0x9c
 3760 0633 47060000 		.4byte	0x647
 3761 0637 11       		.uleb128 0x11
 3762 0638 12030000 		.4byte	.LASF54
 3763 063c 01       		.byte	0x1
 3764 063d 2F09     		.2byte	0x92f
 3765 063f 6B000000 		.4byte	0x6b
 3766 0643 02       		.uleb128 0x2
 3767 0644 91       		.byte	0x91
 3768 0645 77       		.sleb128 -9
 3769 0646 00       		.byte	0
 3770 0647 17       		.uleb128 0x17
 3771 0648 AD040000 		.4byte	.LASF71
 3772 064c 01       		.byte	0x1
 3773 064d 3E09     		.2byte	0x93e
 3774 064f 00000000 		.4byte	.LFB28
 3775 0653 14000000 		.4byte	.LFE28-.LFB28
 3776 0657 01       		.uleb128 0x1
 3777 0658 9C       		.byte	0x9c
 3778 0659 6D060000 		.4byte	0x66d
 3779 065d 11       		.uleb128 0x11
 3780 065e 11050000 		.4byte	.LASF47
 3781 0662 01       		.byte	0x1
 3782 0663 3E09     		.2byte	0x93e
 3783 0665 6B000000 		.4byte	0x6b
 3784 0669 02       		.uleb128 0x2
 3785 066a 91       		.byte	0x91
 3786 066b 77       		.sleb128 -9
 3787 066c 00       		.byte	0
 3788 066d 0E       		.uleb128 0xe
 3789 066e 93000000 		.4byte	.LASF72
 3790 0672 01       		.byte	0x1
 3791 0673 5609     		.2byte	0x956
 3792 0675 00000000 		.4byte	.LFB29
 3793 0679 20000000 		.4byte	.LFE29-.LFB29
 3794 067d 01       		.uleb128 0x1
 3795 067e 9C       		.byte	0x9c
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 120


 3796 067f 10       		.uleb128 0x10
 3797 0680 FC050000 		.4byte	.LASF73
 3798 0684 01       		.byte	0x1
 3799 0685 6A09     		.2byte	0x96a
 3800 0687 00000000 		.4byte	.LFB30
 3801 068b 48000000 		.4byte	.LFE30-.LFB30
 3802 068f 01       		.uleb128 0x1
 3803 0690 9C       		.byte	0x9c
 3804 0691 A5060000 		.4byte	0x6a5
 3805 0695 11       		.uleb128 0x11
 3806 0696 91040000 		.4byte	.LASF74
 3807 069a 01       		.byte	0x1
 3808 069b 6A09     		.2byte	0x96a
 3809 069d 83000000 		.4byte	0x83
 3810 06a1 02       		.uleb128 0x2
 3811 06a2 91       		.byte	0x91
 3812 06a3 74       		.sleb128 -12
 3813 06a4 00       		.byte	0
 3814 06a5 10       		.uleb128 0x10
 3815 06a6 72010000 		.4byte	.LASF75
 3816 06aa 01       		.byte	0x1
 3817 06ab 8109     		.2byte	0x981
 3818 06ad 00000000 		.4byte	.LFB31
 3819 06b1 28000000 		.4byte	.LFE31-.LFB31
 3820 06b5 01       		.uleb128 0x1
 3821 06b6 9C       		.byte	0x9c
 3822 06b7 CB060000 		.4byte	0x6cb
 3823 06bb 11       		.uleb128 0x11
 3824 06bc 2F070000 		.4byte	.LASF76
 3825 06c0 01       		.byte	0x1
 3826 06c1 8109     		.2byte	0x981
 3827 06c3 77000000 		.4byte	0x77
 3828 06c7 02       		.uleb128 0x2
 3829 06c8 91       		.byte	0x91
 3830 06c9 76       		.sleb128 -10
 3831 06ca 00       		.byte	0
 3832 06cb 10       		.uleb128 0x10
 3833 06cc E9000000 		.4byte	.LASF77
 3834 06d0 01       		.byte	0x1
 3835 06d1 8F09     		.2byte	0x98f
 3836 06d3 00000000 		.4byte	.LFB32
 3837 06d7 84000000 		.4byte	.LFE32-.LFB32
 3838 06db 01       		.uleb128 0x1
 3839 06dc 9C       		.byte	0x9c
 3840 06dd F1060000 		.4byte	0x6f1
 3841 06e1 11       		.uleb128 0x11
 3842 06e2 E4000000 		.4byte	.LASF22
 3843 06e6 01       		.byte	0x1
 3844 06e7 8F09     		.2byte	0x98f
 3845 06e9 83000000 		.4byte	0x83
 3846 06ed 02       		.uleb128 0x2
 3847 06ee 91       		.byte	0x91
 3848 06ef 74       		.sleb128 -12
 3849 06f0 00       		.byte	0
 3850 06f1 18       		.uleb128 0x18
 3851 06f2 88030000 		.4byte	.LASF78
 3852 06f6 01       		.byte	0x1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 121


 3853 06f7 AF09     		.2byte	0x9af
 3854 06f9 00000000 		.4byte	.LFB33
 3855 06fd 24000000 		.4byte	.LFE33-.LFB33
 3856 0701 01       		.uleb128 0x1
 3857 0702 9C       		.byte	0x9c
 3858 0703 10       		.uleb128 0x10
 3859 0704 FB010000 		.4byte	.LASF79
 3860 0708 01       		.byte	0x1
 3861 0709 CC09     		.2byte	0x9cc
 3862 070b 00000000 		.4byte	.LFB34
 3863 070f 64000000 		.4byte	.LFE34-.LFB34
 3864 0713 01       		.uleb128 0x1
 3865 0714 9C       		.byte	0x9c
 3866 0715 27070000 		.4byte	0x727
 3867 0719 19       		.uleb128 0x19
 3868 071a 6900     		.ascii	"i\000"
 3869 071c 01       		.byte	0x1
 3870 071d CE09     		.2byte	0x9ce
 3871 071f 83000000 		.4byte	0x83
 3872 0723 02       		.uleb128 0x2
 3873 0724 91       		.byte	0x91
 3874 0725 74       		.sleb128 -12
 3875 0726 00       		.byte	0
 3876 0727 18       		.uleb128 0x18
 3877 0728 98050000 		.4byte	.LASF80
 3878 072c 01       		.byte	0x1
 3879 072d EB09     		.2byte	0x9eb
 3880 072f 00000000 		.4byte	.LFB35
 3881 0733 1C000000 		.4byte	.LFE35-.LFB35
 3882 0737 01       		.uleb128 0x1
 3883 0738 9C       		.byte	0x9c
 3884 0739 0E       		.uleb128 0xe
 3885 073a 5B060000 		.4byte	.LASF81
 3886 073e 01       		.byte	0x1
 3887 073f FC09     		.2byte	0x9fc
 3888 0741 00000000 		.4byte	.LFB36
 3889 0745 18000000 		.4byte	.LFE36-.LFB36
 3890 0749 01       		.uleb128 0x1
 3891 074a 9C       		.byte	0x9c
 3892 074b 0E       		.uleb128 0xe
 3893 074c A3000000 		.4byte	.LASF82
 3894 0750 01       		.byte	0x1
 3895 0751 0C0A     		.2byte	0xa0c
 3896 0753 00000000 		.4byte	.LFB37
 3897 0757 18000000 		.4byte	.LFE37-.LFB37
 3898 075b 01       		.uleb128 0x1
 3899 075c 9C       		.byte	0x9c
 3900 075d 0E       		.uleb128 0xe
 3901 075e 04060000 		.4byte	.LASF83
 3902 0762 01       		.byte	0x1
 3903 0763 1C0A     		.2byte	0xa1c
 3904 0765 00000000 		.4byte	.LFB38
 3905 0769 18000000 		.4byte	.LFE38-.LFB38
 3906 076d 01       		.uleb128 0x1
 3907 076e 9C       		.byte	0x9c
 3908 076f 17       		.uleb128 0x17
 3909 0770 43070000 		.4byte	.LASF84
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 122


 3910 0774 01       		.byte	0x1
 3911 0775 2D0A     		.2byte	0xa2d
 3912 0777 00000000 		.4byte	.LFB39
 3913 077b 1C000000 		.4byte	.LFE39-.LFB39
 3914 077f 01       		.uleb128 0x1
 3915 0780 9C       		.byte	0x9c
 3916 0781 95070000 		.4byte	0x795
 3917 0785 11       		.uleb128 0x11
 3918 0786 09020000 		.4byte	.LASF64
 3919 078a 01       		.byte	0x1
 3920 078b 2D0A     		.2byte	0xa2d
 3921 078d 83000000 		.4byte	0x83
 3922 0791 02       		.uleb128 0x2
 3923 0792 91       		.byte	0x91
 3924 0793 74       		.sleb128 -12
 3925 0794 00       		.byte	0
 3926 0795 0F       		.uleb128 0xf
 3927 0796 0C010000 		.4byte	.LASF85
 3928 079a 01       		.byte	0x1
 3929 079b 3D0A     		.2byte	0xa3d
 3930 079d 83000000 		.4byte	0x83
 3931 07a1 00000000 		.4byte	.LFB40
 3932 07a5 18000000 		.4byte	.LFE40-.LFB40
 3933 07a9 01       		.uleb128 0x1
 3934 07aa 9C       		.byte	0x9c
 3935 07ab 0F       		.uleb128 0xf
 3936 07ac 2A040000 		.4byte	.LASF86
 3937 07b0 01       		.byte	0x1
 3938 07b1 4D0A     		.2byte	0xa4d
 3939 07b3 83000000 		.4byte	0x83
 3940 07b7 00000000 		.4byte	.LFB41
 3941 07bb 18000000 		.4byte	.LFE41-.LFB41
 3942 07bf 01       		.uleb128 0x1
 3943 07c0 9C       		.byte	0x9c
 3944 07c1 17       		.uleb128 0x17
 3945 07c2 EB020000 		.4byte	.LASF87
 3946 07c6 01       		.byte	0x1
 3947 07c7 6D0A     		.2byte	0xa6d
 3948 07c9 00000000 		.4byte	.LFB42
 3949 07cd 34000000 		.4byte	.LFE42-.LFB42
 3950 07d1 01       		.uleb128 0x1
 3951 07d2 9C       		.byte	0x9c
 3952 07d3 E7070000 		.4byte	0x7e7
 3953 07d7 11       		.uleb128 0x11
 3954 07d8 0F020000 		.4byte	.LASF88
 3955 07dc 01       		.byte	0x1
 3956 07dd 6D0A     		.2byte	0xa6d
 3957 07df 83000000 		.4byte	0x83
 3958 07e3 02       		.uleb128 0x2
 3959 07e4 91       		.byte	0x91
 3960 07e5 74       		.sleb128 -12
 3961 07e6 00       		.byte	0
 3962 07e7 0F       		.uleb128 0xf
 3963 07e8 29020000 		.4byte	.LASF89
 3964 07ec 01       		.byte	0x1
 3965 07ed 8A0A     		.2byte	0xa8a
 3966 07ef 83000000 		.4byte	0x83
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 123


 3967 07f3 00000000 		.4byte	.LFB43
 3968 07f7 18000000 		.4byte	.LFE43-.LFB43
 3969 07fb 01       		.uleb128 0x1
 3970 07fc 9C       		.byte	0x9c
 3971 07fd 0E       		.uleb128 0xe
 3972 07fe 4C020000 		.4byte	.LASF90
 3973 0802 01       		.byte	0x1
 3974 0803 970A     		.2byte	0xa97
 3975 0805 00000000 		.4byte	.LFB44
 3976 0809 14000000 		.4byte	.LFE44-.LFB44
 3977 080d 01       		.uleb128 0x1
 3978 080e 9C       		.byte	0x9c
 3979 080f 16       		.uleb128 0x16
 3980 0810 BF050000 		.4byte	.LASF91
 3981 0814 01       		.byte	0x1
 3982 0815 BA0A     		.2byte	0xaba
 3983 0817 E0000000 		.4byte	0xe0
 3984 081b 00000000 		.4byte	.LFB45
 3985 081f 2C000000 		.4byte	.LFE45-.LFB45
 3986 0823 01       		.uleb128 0x1
 3987 0824 9C       		.byte	0x9c
 3988 0825 57080000 		.4byte	0x857
 3989 0829 11       		.uleb128 0x11
 3990 082a 12030000 		.4byte	.LASF54
 3991 082e 01       		.byte	0x1
 3992 082f BA0A     		.2byte	0xaba
 3993 0831 83000000 		.4byte	0x83
 3994 0835 02       		.uleb128 0x2
 3995 0836 91       		.byte	0x91
 3996 0837 6C       		.sleb128 -20
 3997 0838 11       		.uleb128 0x11
 3998 0839 10040000 		.4byte	.LASF92
 3999 083d 01       		.byte	0x1
 4000 083e BA0A     		.2byte	0xaba
 4001 0840 E0000000 		.4byte	0xe0
 4002 0844 02       		.uleb128 0x2
 4003 0845 91       		.byte	0x91
 4004 0846 68       		.sleb128 -24
 4005 0847 12       		.uleb128 0x12
 4006 0848 3F000000 		.4byte	.LASF93
 4007 084c 01       		.byte	0x1
 4008 084d BC0A     		.2byte	0xabc
 4009 084f E0000000 		.4byte	0xe0
 4010 0853 02       		.uleb128 0x2
 4011 0854 91       		.byte	0x91
 4012 0855 74       		.sleb128 -12
 4013 0856 00       		.byte	0
 4014 0857 16       		.uleb128 0x16
 4015 0858 A8020000 		.4byte	.LASF94
 4016 085c 01       		.byte	0x1
 4017 085d D20A     		.2byte	0xad2
 4018 085f E0000000 		.4byte	0xe0
 4019 0863 00000000 		.4byte	.LFB46
 4020 0867 1C000000 		.4byte	.LFE46-.LFB46
 4021 086b 01       		.uleb128 0x1
 4022 086c 9C       		.byte	0x9c
 4023 086d 81080000 		.4byte	0x881
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 124


 4024 0871 11       		.uleb128 0x11
 4025 0872 12030000 		.4byte	.LASF54
 4026 0876 01       		.byte	0x1
 4027 0877 D20A     		.2byte	0xad2
 4028 0879 83000000 		.4byte	0x83
 4029 087d 02       		.uleb128 0x2
 4030 087e 91       		.byte	0x91
 4031 087f 74       		.sleb128 -12
 4032 0880 00       		.byte	0
 4033 0881 1A       		.uleb128 0x1a
 4034 0882 56070000 		.4byte	.LASF114
 4035 0886 01       		.byte	0x1
 4036 0887 DF0A     		.2byte	0xadf
 4037 0889 00000000 		.4byte	.LFB47
 4038 088d 44000000 		.4byte	.LFE47-.LFB47
 4039 0891 01       		.uleb128 0x1
 4040 0892 9C       		.byte	0x9c
 4041 0893 A5080000 		.4byte	0x8a5
 4042 0897 19       		.uleb128 0x19
 4043 0898 6900     		.ascii	"i\000"
 4044 089a 01       		.byte	0x1
 4045 089b E10A     		.2byte	0xae1
 4046 089d 83000000 		.4byte	0x83
 4047 08a1 02       		.uleb128 0x2
 4048 08a2 91       		.byte	0x91
 4049 08a3 74       		.sleb128 -12
 4050 08a4 00       		.byte	0
 4051 08a5 17       		.uleb128 0x17
 4052 08a6 1B020000 		.4byte	.LASF95
 4053 08aa 01       		.byte	0x1
 4054 08ab FF0A     		.2byte	0xaff
 4055 08ad 00000000 		.4byte	.LFB48
 4056 08b1 C0000000 		.4byte	.LFE48-.LFB48
 4057 08b5 01       		.uleb128 0x1
 4058 08b6 9C       		.byte	0x9c
 4059 08b7 CB080000 		.4byte	0x8cb
 4060 08bb 11       		.uleb128 0x11
 4061 08bc E7050000 		.4byte	.LASF96
 4062 08c0 01       		.byte	0x1
 4063 08c1 FF0A     		.2byte	0xaff
 4064 08c3 CB080000 		.4byte	0x8cb
 4065 08c7 02       		.uleb128 0x2
 4066 08c8 91       		.byte	0x91
 4067 08c9 74       		.sleb128 -12
 4068 08ca 00       		.byte	0
 4069 08cb 06       		.uleb128 0x6
 4070 08cc 04       		.byte	0x4
 4071 08cd 83000000 		.4byte	0x83
 4072 08d1 17       		.uleb128 0x17
 4073 08d2 B4040000 		.4byte	.LASF97
 4074 08d6 01       		.byte	0x1
 4075 08d7 2B0B     		.2byte	0xb2b
 4076 08d9 00000000 		.4byte	.LFB49
 4077 08dd 38000000 		.4byte	.LFE49-.LFB49
 4078 08e1 01       		.uleb128 0x1
 4079 08e2 9C       		.byte	0x9c
 4080 08e3 06090000 		.4byte	0x906
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 125


 4081 08e7 11       		.uleb128 0x11
 4082 08e8 A4030000 		.4byte	.LASF98
 4083 08ec 01       		.byte	0x1
 4084 08ed 2B0B     		.2byte	0xb2b
 4085 08ef 83000000 		.4byte	0x83
 4086 08f3 02       		.uleb128 0x2
 4087 08f4 91       		.byte	0x91
 4088 08f5 6C       		.sleb128 -20
 4089 08f6 12       		.uleb128 0x12
 4090 08f7 E4020000 		.4byte	.LASF24
 4091 08fb 01       		.byte	0x1
 4092 08fc 2D0B     		.2byte	0xb2d
 4093 08fe 83000000 		.4byte	0x83
 4094 0902 02       		.uleb128 0x2
 4095 0903 91       		.byte	0x91
 4096 0904 74       		.sleb128 -12
 4097 0905 00       		.byte	0
 4098 0906 17       		.uleb128 0x17
 4099 0907 37030000 		.4byte	.LASF99
 4100 090b 01       		.byte	0x1
 4101 090c 460B     		.2byte	0xb46
 4102 090e 00000000 		.4byte	.LFB50
 4103 0912 38000000 		.4byte	.LFE50-.LFB50
 4104 0916 01       		.uleb128 0x1
 4105 0917 9C       		.byte	0x9c
 4106 0918 3B090000 		.4byte	0x93b
 4107 091c 11       		.uleb128 0x11
 4108 091d A4030000 		.4byte	.LASF98
 4109 0921 01       		.byte	0x1
 4110 0922 460B     		.2byte	0xb46
 4111 0924 83000000 		.4byte	0x83
 4112 0928 02       		.uleb128 0x2
 4113 0929 91       		.byte	0x91
 4114 092a 6C       		.sleb128 -20
 4115 092b 12       		.uleb128 0x12
 4116 092c E4020000 		.4byte	.LASF24
 4117 0930 01       		.byte	0x1
 4118 0931 480B     		.2byte	0xb48
 4119 0933 83000000 		.4byte	0x83
 4120 0937 02       		.uleb128 0x2
 4121 0938 91       		.byte	0x91
 4122 0939 74       		.sleb128 -12
 4123 093a 00       		.byte	0
 4124 093b 17       		.uleb128 0x17
 4125 093c 3D060000 		.4byte	.LASF100
 4126 0940 01       		.byte	0x1
 4127 0941 610B     		.2byte	0xb61
 4128 0943 00000000 		.4byte	.LFB51
 4129 0947 38000000 		.4byte	.LFE51-.LFB51
 4130 094b 01       		.uleb128 0x1
 4131 094c 9C       		.byte	0x9c
 4132 094d 70090000 		.4byte	0x970
 4133 0951 11       		.uleb128 0x11
 4134 0952 A4030000 		.4byte	.LASF98
 4135 0956 01       		.byte	0x1
 4136 0957 610B     		.2byte	0xb61
 4137 0959 83000000 		.4byte	0x83
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 126


 4138 095d 02       		.uleb128 0x2
 4139 095e 91       		.byte	0x91
 4140 095f 6C       		.sleb128 -20
 4141 0960 12       		.uleb128 0x12
 4142 0961 E4020000 		.4byte	.LASF24
 4143 0965 01       		.byte	0x1
 4144 0966 630B     		.2byte	0xb63
 4145 0968 83000000 		.4byte	0x83
 4146 096c 02       		.uleb128 0x2
 4147 096d 91       		.byte	0x91
 4148 096e 74       		.sleb128 -12
 4149 096f 00       		.byte	0
 4150 0970 10       		.uleb128 0x10
 4151 0971 C5030000 		.4byte	.LASF101
 4152 0975 01       		.byte	0x1
 4153 0976 7E0B     		.2byte	0xb7e
 4154 0978 00000000 		.4byte	.LFB52
 4155 097c A0000000 		.4byte	.LFE52-.LFB52
 4156 0980 01       		.uleb128 0x1
 4157 0981 9C       		.byte	0x9c
 4158 0982 B4090000 		.4byte	0x9b4
 4159 0986 11       		.uleb128 0x11
 4160 0987 83000000 		.4byte	.LASF102
 4161 098b 01       		.byte	0x1
 4162 098c 7E0B     		.2byte	0xb7e
 4163 098e 83000000 		.4byte	0x83
 4164 0992 02       		.uleb128 0x2
 4165 0993 91       		.byte	0x91
 4166 0994 6C       		.sleb128 -20
 4167 0995 11       		.uleb128 0x11
 4168 0996 A4030000 		.4byte	.LASF98
 4169 099a 01       		.byte	0x1
 4170 099b 7E0B     		.2byte	0xb7e
 4171 099d 83000000 		.4byte	0x83
 4172 09a1 02       		.uleb128 0x2
 4173 09a2 91       		.byte	0x91
 4174 09a3 68       		.sleb128 -24
 4175 09a4 12       		.uleb128 0x12
 4176 09a5 E4020000 		.4byte	.LASF24
 4177 09a9 01       		.byte	0x1
 4178 09aa 800B     		.2byte	0xb80
 4179 09ac 83000000 		.4byte	0x83
 4180 09b0 02       		.uleb128 0x2
 4181 09b1 91       		.byte	0x91
 4182 09b2 74       		.sleb128 -12
 4183 09b3 00       		.byte	0
 4184 09b4 14       		.uleb128 0x14
 4185 09b5 E0000000 		.4byte	0xe0
 4186 09b9 C4090000 		.4byte	0x9c4
 4187 09bd 15       		.uleb128 0x15
 4188 09be D9000000 		.4byte	0xd9
 4189 09c2 04       		.byte	0x4
 4190 09c3 00       		.byte	0
 4191 09c4 0D       		.uleb128 0xd
 4192 09c5 D4050000 		.4byte	.LASF103
 4193 09c9 01       		.byte	0x1
 4194 09ca 22       		.byte	0x22
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 127


 4195 09cb B4090000 		.4byte	0x9b4
 4196 09cf 05       		.uleb128 0x5
 4197 09d0 03       		.byte	0x3
 4198 09d1 00000000 		.4byte	CySysTickCallbacks
 4199 09d5 1B       		.uleb128 0x1b
 4200 09d6 3C040000 		.4byte	.LASF104
 4201 09da 01       		.byte	0x1
 4202 09db 1B       		.byte	0x1b
 4203 09dc 83000000 		.4byte	0x83
 4204 09e0 05       		.uleb128 0x5
 4205 09e1 03       		.byte	0x3
 4206 09e2 00000000 		.4byte	cydelayFreqHz
 4207 09e6 1B       		.uleb128 0x1b
 4208 09e7 63010000 		.4byte	.LASF105
 4209 09eb 01       		.byte	0x1
 4210 09ec 1C       		.byte	0x1c
 4211 09ed 83000000 		.4byte	0x83
 4212 09f1 05       		.uleb128 0x5
 4213 09f2 03       		.byte	0x3
 4214 09f3 00000000 		.4byte	cydelayFreqKhz
 4215 09f7 1B       		.uleb128 0x1b
 4216 09f8 2E060000 		.4byte	.LASF106
 4217 09fc 01       		.byte	0x1
 4218 09fd 1D       		.byte	0x1d
 4219 09fe 6B000000 		.4byte	0x6b
 4220 0a02 05       		.uleb128 0x5
 4221 0a03 03       		.byte	0x3
 4222 0a04 00000000 		.4byte	cydelayFreqMhz
 4223 0a08 1B       		.uleb128 0x1b
 4224 0a09 EE010000 		.4byte	.LASF107
 4225 0a0d 01       		.byte	0x1
 4226 0a0e 1E       		.byte	0x1e
 4227 0a0f 83000000 		.4byte	0x83
 4228 0a13 05       		.uleb128 0x5
 4229 0a14 03       		.byte	0x3
 4230 0a15 00000000 		.4byte	cydelay32kMs
 4231 0a19 1B       		.uleb128 0x1b
 4232 0a1a B4030000 		.4byte	.LASF108
 4233 0a1e 01       		.byte	0x1
 4234 0a1f 35       		.byte	0x35
 4235 0a20 83000000 		.4byte	0x83
 4236 0a24 05       		.uleb128 0x5
 4237 0a25 03       		.byte	0x3
 4238 0a26 00000000 		.4byte	CySysTickInitVar
 4239 0a2a 14       		.uleb128 0x14
 4240 0a2b 6B000000 		.4byte	0x6b
 4241 0a2f 3A0A0000 		.4byte	0xa3a
 4242 0a33 15       		.uleb128 0x15
 4243 0a34 D9000000 		.4byte	0xd9
 4244 0a38 2D       		.byte	0x2d
 4245 0a39 00       		.byte	0
 4246 0a3a 1B       		.uleb128 0x1b
 4247 0a3b 19040000 		.4byte	.LASF109
 4248 0a3f 01       		.byte	0x1
 4249 0a40 3A       		.byte	0x3a
 4250 0a41 4B0A0000 		.4byte	0xa4b
 4251 0a45 05       		.uleb128 0x5
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 128


 4252 0a46 03       		.byte	0x3
 4253 0a47 00000000 		.4byte	cyImoFreqMhz2Reg
 4254 0a4b 1C       		.uleb128 0x1c
 4255 0a4c 2A0A0000 		.4byte	0xa2a
 4256 0a50 14       		.uleb128 0x14
 4257 0a51 6B000000 		.4byte	0x6b
 4258 0a55 600A0000 		.4byte	0xa60
 4259 0a59 15       		.uleb128 0x15
 4260 0a5a D9000000 		.4byte	0xd9
 4261 0a5e 16       		.byte	0x16
 4262 0a5f 00       		.byte	0
 4263 0a60 1B       		.uleb128 0x1b
 4264 0a61 73050000 		.4byte	.LASF110
 4265 0a65 01       		.byte	0x1
 4266 0a66 4B       		.byte	0x4b
 4267 0a67 710A0000 		.4byte	0xa71
 4268 0a6b 05       		.uleb128 0x5
 4269 0a6c 03       		.byte	0x3
 4270 0a6d 00000000 		.4byte	cyImoFreqMhz2DpllOffset
 4271 0a71 1C       		.uleb128 0x1c
 4272 0a72 500A0000 		.4byte	0xa50
 4273 0a76 00       		.byte	0
 4274              		.section	.debug_abbrev,"",%progbits
 4275              	.Ldebug_abbrev0:
 4276 0000 01       		.uleb128 0x1
 4277 0001 11       		.uleb128 0x11
 4278 0002 01       		.byte	0x1
 4279 0003 25       		.uleb128 0x25
 4280 0004 0E       		.uleb128 0xe
 4281 0005 13       		.uleb128 0x13
 4282 0006 0B       		.uleb128 0xb
 4283 0007 03       		.uleb128 0x3
 4284 0008 0E       		.uleb128 0xe
 4285 0009 1B       		.uleb128 0x1b
 4286 000a 0E       		.uleb128 0xe
 4287 000b 55       		.uleb128 0x55
 4288 000c 17       		.uleb128 0x17
 4289 000d 11       		.uleb128 0x11
 4290 000e 01       		.uleb128 0x1
 4291 000f 10       		.uleb128 0x10
 4292 0010 17       		.uleb128 0x17
 4293 0011 00       		.byte	0
 4294 0012 00       		.byte	0
 4295 0013 02       		.uleb128 0x2
 4296 0014 24       		.uleb128 0x24
 4297 0015 00       		.byte	0
 4298 0016 0B       		.uleb128 0xb
 4299 0017 0B       		.uleb128 0xb
 4300 0018 3E       		.uleb128 0x3e
 4301 0019 0B       		.uleb128 0xb
 4302 001a 03       		.uleb128 0x3
 4303 001b 0E       		.uleb128 0xe
 4304 001c 00       		.byte	0
 4305 001d 00       		.byte	0
 4306 001e 03       		.uleb128 0x3
 4307 001f 24       		.uleb128 0x24
 4308 0020 00       		.byte	0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 129


 4309 0021 0B       		.uleb128 0xb
 4310 0022 0B       		.uleb128 0xb
 4311 0023 3E       		.uleb128 0x3e
 4312 0024 0B       		.uleb128 0xb
 4313 0025 03       		.uleb128 0x3
 4314 0026 08       		.uleb128 0x8
 4315 0027 00       		.byte	0
 4316 0028 00       		.byte	0
 4317 0029 04       		.uleb128 0x4
 4318 002a 16       		.uleb128 0x16
 4319 002b 00       		.byte	0
 4320 002c 03       		.uleb128 0x3
 4321 002d 0E       		.uleb128 0xe
 4322 002e 3A       		.uleb128 0x3a
 4323 002f 0B       		.uleb128 0xb
 4324 0030 3B       		.uleb128 0x3b
 4325 0031 05       		.uleb128 0x5
 4326 0032 49       		.uleb128 0x49
 4327 0033 13       		.uleb128 0x13
 4328 0034 00       		.byte	0
 4329 0035 00       		.byte	0
 4330 0036 05       		.uleb128 0x5
 4331 0037 35       		.uleb128 0x35
 4332 0038 00       		.byte	0
 4333 0039 49       		.uleb128 0x49
 4334 003a 13       		.uleb128 0x13
 4335 003b 00       		.byte	0
 4336 003c 00       		.byte	0
 4337 003d 06       		.uleb128 0x6
 4338 003e 0F       		.uleb128 0xf
 4339 003f 00       		.byte	0
 4340 0040 0B       		.uleb128 0xb
 4341 0041 0B       		.uleb128 0xb
 4342 0042 49       		.uleb128 0x49
 4343 0043 13       		.uleb128 0x13
 4344 0044 00       		.byte	0
 4345 0045 00       		.byte	0
 4346 0046 07       		.uleb128 0x7
 4347 0047 15       		.uleb128 0x15
 4348 0048 00       		.byte	0
 4349 0049 27       		.uleb128 0x27
 4350 004a 19       		.uleb128 0x19
 4351 004b 00       		.byte	0
 4352 004c 00       		.byte	0
 4353 004d 08       		.uleb128 0x8
 4354 004e 16       		.uleb128 0x16
 4355 004f 00       		.byte	0
 4356 0050 03       		.uleb128 0x3
 4357 0051 0E       		.uleb128 0xe
 4358 0052 3A       		.uleb128 0x3a
 4359 0053 0B       		.uleb128 0xb
 4360 0054 3B       		.uleb128 0x3b
 4361 0055 0B       		.uleb128 0xb
 4362 0056 49       		.uleb128 0x49
 4363 0057 13       		.uleb128 0x13
 4364 0058 00       		.byte	0
 4365 0059 00       		.byte	0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 130


 4366 005a 09       		.uleb128 0x9
 4367 005b 2E       		.uleb128 0x2e
 4368 005c 00       		.byte	0
 4369 005d 3F       		.uleb128 0x3f
 4370 005e 19       		.uleb128 0x19
 4371 005f 03       		.uleb128 0x3
 4372 0060 0E       		.uleb128 0xe
 4373 0061 3A       		.uleb128 0x3a
 4374 0062 0B       		.uleb128 0xb
 4375 0063 3B       		.uleb128 0x3b
 4376 0064 0B       		.uleb128 0xb
 4377 0065 27       		.uleb128 0x27
 4378 0066 19       		.uleb128 0x19
 4379 0067 11       		.uleb128 0x11
 4380 0068 01       		.uleb128 0x1
 4381 0069 12       		.uleb128 0x12
 4382 006a 06       		.uleb128 0x6
 4383 006b 40       		.uleb128 0x40
 4384 006c 18       		.uleb128 0x18
 4385 006d 9742     		.uleb128 0x2117
 4386 006f 19       		.uleb128 0x19
 4387 0070 00       		.byte	0
 4388 0071 00       		.byte	0
 4389 0072 0A       		.uleb128 0xa
 4390 0073 2E       		.uleb128 0x2e
 4391 0074 00       		.byte	0
 4392 0075 3F       		.uleb128 0x3f
 4393 0076 19       		.uleb128 0x19
 4394 0077 03       		.uleb128 0x3
 4395 0078 0E       		.uleb128 0xe
 4396 0079 3A       		.uleb128 0x3a
 4397 007a 0B       		.uleb128 0xb
 4398 007b 3B       		.uleb128 0x3b
 4399 007c 0B       		.uleb128 0xb
 4400 007d 27       		.uleb128 0x27
 4401 007e 19       		.uleb128 0x19
 4402 007f 11       		.uleb128 0x11
 4403 0080 01       		.uleb128 0x1
 4404 0081 12       		.uleb128 0x12
 4405 0082 06       		.uleb128 0x6
 4406 0083 40       		.uleb128 0x40
 4407 0084 18       		.uleb128 0x18
 4408 0085 9642     		.uleb128 0x2116
 4409 0087 19       		.uleb128 0x19
 4410 0088 00       		.byte	0
 4411 0089 00       		.byte	0
 4412 008a 0B       		.uleb128 0xb
 4413 008b 2E       		.uleb128 0x2e
 4414 008c 01       		.byte	0x1
 4415 008d 3F       		.uleb128 0x3f
 4416 008e 19       		.uleb128 0x19
 4417 008f 03       		.uleb128 0x3
 4418 0090 0E       		.uleb128 0xe
 4419 0091 3A       		.uleb128 0x3a
 4420 0092 0B       		.uleb128 0xb
 4421 0093 3B       		.uleb128 0x3b
 4422 0094 0B       		.uleb128 0xb
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 131


 4423 0095 27       		.uleb128 0x27
 4424 0096 19       		.uleb128 0x19
 4425 0097 11       		.uleb128 0x11
 4426 0098 01       		.uleb128 0x1
 4427 0099 12       		.uleb128 0x12
 4428 009a 06       		.uleb128 0x6
 4429 009b 40       		.uleb128 0x40
 4430 009c 18       		.uleb128 0x18
 4431 009d 9642     		.uleb128 0x2116
 4432 009f 19       		.uleb128 0x19
 4433 00a0 01       		.uleb128 0x1
 4434 00a1 13       		.uleb128 0x13
 4435 00a2 00       		.byte	0
 4436 00a3 00       		.byte	0
 4437 00a4 0C       		.uleb128 0xc
 4438 00a5 34       		.uleb128 0x34
 4439 00a6 00       		.byte	0
 4440 00a7 03       		.uleb128 0x3
 4441 00a8 08       		.uleb128 0x8
 4442 00a9 3A       		.uleb128 0x3a
 4443 00aa 0B       		.uleb128 0xb
 4444 00ab 3B       		.uleb128 0x3b
 4445 00ac 0B       		.uleb128 0xb
 4446 00ad 49       		.uleb128 0x49
 4447 00ae 13       		.uleb128 0x13
 4448 00af 02       		.uleb128 0x2
 4449 00b0 18       		.uleb128 0x18
 4450 00b1 00       		.byte	0
 4451 00b2 00       		.byte	0
 4452 00b3 0D       		.uleb128 0xd
 4453 00b4 34       		.uleb128 0x34
 4454 00b5 00       		.byte	0
 4455 00b6 03       		.uleb128 0x3
 4456 00b7 0E       		.uleb128 0xe
 4457 00b8 3A       		.uleb128 0x3a
 4458 00b9 0B       		.uleb128 0xb
 4459 00ba 3B       		.uleb128 0x3b
 4460 00bb 0B       		.uleb128 0xb
 4461 00bc 49       		.uleb128 0x49
 4462 00bd 13       		.uleb128 0x13
 4463 00be 02       		.uleb128 0x2
 4464 00bf 18       		.uleb128 0x18
 4465 00c0 00       		.byte	0
 4466 00c1 00       		.byte	0
 4467 00c2 0E       		.uleb128 0xe
 4468 00c3 2E       		.uleb128 0x2e
 4469 00c4 00       		.byte	0
 4470 00c5 3F       		.uleb128 0x3f
 4471 00c6 19       		.uleb128 0x19
 4472 00c7 03       		.uleb128 0x3
 4473 00c8 0E       		.uleb128 0xe
 4474 00c9 3A       		.uleb128 0x3a
 4475 00ca 0B       		.uleb128 0xb
 4476 00cb 3B       		.uleb128 0x3b
 4477 00cc 05       		.uleb128 0x5
 4478 00cd 27       		.uleb128 0x27
 4479 00ce 19       		.uleb128 0x19
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 132


 4480 00cf 11       		.uleb128 0x11
 4481 00d0 01       		.uleb128 0x1
 4482 00d1 12       		.uleb128 0x12
 4483 00d2 06       		.uleb128 0x6
 4484 00d3 40       		.uleb128 0x40
 4485 00d4 18       		.uleb128 0x18
 4486 00d5 9742     		.uleb128 0x2117
 4487 00d7 19       		.uleb128 0x19
 4488 00d8 00       		.byte	0
 4489 00d9 00       		.byte	0
 4490 00da 0F       		.uleb128 0xf
 4491 00db 2E       		.uleb128 0x2e
 4492 00dc 00       		.byte	0
 4493 00dd 3F       		.uleb128 0x3f
 4494 00de 19       		.uleb128 0x19
 4495 00df 03       		.uleb128 0x3
 4496 00e0 0E       		.uleb128 0xe
 4497 00e1 3A       		.uleb128 0x3a
 4498 00e2 0B       		.uleb128 0xb
 4499 00e3 3B       		.uleb128 0x3b
 4500 00e4 05       		.uleb128 0x5
 4501 00e5 27       		.uleb128 0x27
 4502 00e6 19       		.uleb128 0x19
 4503 00e7 49       		.uleb128 0x49
 4504 00e8 13       		.uleb128 0x13
 4505 00e9 11       		.uleb128 0x11
 4506 00ea 01       		.uleb128 0x1
 4507 00eb 12       		.uleb128 0x12
 4508 00ec 06       		.uleb128 0x6
 4509 00ed 40       		.uleb128 0x40
 4510 00ee 18       		.uleb128 0x18
 4511 00ef 9742     		.uleb128 0x2117
 4512 00f1 19       		.uleb128 0x19
 4513 00f2 00       		.byte	0
 4514 00f3 00       		.byte	0
 4515 00f4 10       		.uleb128 0x10
 4516 00f5 2E       		.uleb128 0x2e
 4517 00f6 01       		.byte	0x1
 4518 00f7 3F       		.uleb128 0x3f
 4519 00f8 19       		.uleb128 0x19
 4520 00f9 03       		.uleb128 0x3
 4521 00fa 0E       		.uleb128 0xe
 4522 00fb 3A       		.uleb128 0x3a
 4523 00fc 0B       		.uleb128 0xb
 4524 00fd 3B       		.uleb128 0x3b
 4525 00fe 05       		.uleb128 0x5
 4526 00ff 27       		.uleb128 0x27
 4527 0100 19       		.uleb128 0x19
 4528 0101 11       		.uleb128 0x11
 4529 0102 01       		.uleb128 0x1
 4530 0103 12       		.uleb128 0x12
 4531 0104 06       		.uleb128 0x6
 4532 0105 40       		.uleb128 0x40
 4533 0106 18       		.uleb128 0x18
 4534 0107 9642     		.uleb128 0x2116
 4535 0109 19       		.uleb128 0x19
 4536 010a 01       		.uleb128 0x1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 133


 4537 010b 13       		.uleb128 0x13
 4538 010c 00       		.byte	0
 4539 010d 00       		.byte	0
 4540 010e 11       		.uleb128 0x11
 4541 010f 05       		.uleb128 0x5
 4542 0110 00       		.byte	0
 4543 0111 03       		.uleb128 0x3
 4544 0112 0E       		.uleb128 0xe
 4545 0113 3A       		.uleb128 0x3a
 4546 0114 0B       		.uleb128 0xb
 4547 0115 3B       		.uleb128 0x3b
 4548 0116 05       		.uleb128 0x5
 4549 0117 49       		.uleb128 0x49
 4550 0118 13       		.uleb128 0x13
 4551 0119 02       		.uleb128 0x2
 4552 011a 18       		.uleb128 0x18
 4553 011b 00       		.byte	0
 4554 011c 00       		.byte	0
 4555 011d 12       		.uleb128 0x12
 4556 011e 34       		.uleb128 0x34
 4557 011f 00       		.byte	0
 4558 0120 03       		.uleb128 0x3
 4559 0121 0E       		.uleb128 0xe
 4560 0122 3A       		.uleb128 0x3a
 4561 0123 0B       		.uleb128 0xb
 4562 0124 3B       		.uleb128 0x3b
 4563 0125 05       		.uleb128 0x5
 4564 0126 49       		.uleb128 0x49
 4565 0127 13       		.uleb128 0x13
 4566 0128 02       		.uleb128 0x2
 4567 0129 18       		.uleb128 0x18
 4568 012a 00       		.byte	0
 4569 012b 00       		.byte	0
 4570 012c 13       		.uleb128 0x13
 4571 012d 2E       		.uleb128 0x2e
 4572 012e 01       		.byte	0x1
 4573 012f 3F       		.uleb128 0x3f
 4574 0130 19       		.uleb128 0x19
 4575 0131 03       		.uleb128 0x3
 4576 0132 0E       		.uleb128 0xe
 4577 0133 3A       		.uleb128 0x3a
 4578 0134 0B       		.uleb128 0xb
 4579 0135 3B       		.uleb128 0x3b
 4580 0136 05       		.uleb128 0x5
 4581 0137 27       		.uleb128 0x27
 4582 0138 19       		.uleb128 0x19
 4583 0139 49       		.uleb128 0x49
 4584 013a 13       		.uleb128 0x13
 4585 013b 11       		.uleb128 0x11
 4586 013c 01       		.uleb128 0x1
 4587 013d 12       		.uleb128 0x12
 4588 013e 06       		.uleb128 0x6
 4589 013f 40       		.uleb128 0x40
 4590 0140 18       		.uleb128 0x18
 4591 0141 9642     		.uleb128 0x2116
 4592 0143 19       		.uleb128 0x19
 4593 0144 01       		.uleb128 0x1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 134


 4594 0145 13       		.uleb128 0x13
 4595 0146 00       		.byte	0
 4596 0147 00       		.byte	0
 4597 0148 14       		.uleb128 0x14
 4598 0149 01       		.uleb128 0x1
 4599 014a 01       		.byte	0x1
 4600 014b 49       		.uleb128 0x49
 4601 014c 13       		.uleb128 0x13
 4602 014d 01       		.uleb128 0x1
 4603 014e 13       		.uleb128 0x13
 4604 014f 00       		.byte	0
 4605 0150 00       		.byte	0
 4606 0151 15       		.uleb128 0x15
 4607 0152 21       		.uleb128 0x21
 4608 0153 00       		.byte	0
 4609 0154 49       		.uleb128 0x49
 4610 0155 13       		.uleb128 0x13
 4611 0156 2F       		.uleb128 0x2f
 4612 0157 0B       		.uleb128 0xb
 4613 0158 00       		.byte	0
 4614 0159 00       		.byte	0
 4615 015a 16       		.uleb128 0x16
 4616 015b 2E       		.uleb128 0x2e
 4617 015c 01       		.byte	0x1
 4618 015d 3F       		.uleb128 0x3f
 4619 015e 19       		.uleb128 0x19
 4620 015f 03       		.uleb128 0x3
 4621 0160 0E       		.uleb128 0xe
 4622 0161 3A       		.uleb128 0x3a
 4623 0162 0B       		.uleb128 0xb
 4624 0163 3B       		.uleb128 0x3b
 4625 0164 05       		.uleb128 0x5
 4626 0165 27       		.uleb128 0x27
 4627 0166 19       		.uleb128 0x19
 4628 0167 49       		.uleb128 0x49
 4629 0168 13       		.uleb128 0x13
 4630 0169 11       		.uleb128 0x11
 4631 016a 01       		.uleb128 0x1
 4632 016b 12       		.uleb128 0x12
 4633 016c 06       		.uleb128 0x6
 4634 016d 40       		.uleb128 0x40
 4635 016e 18       		.uleb128 0x18
 4636 016f 9742     		.uleb128 0x2117
 4637 0171 19       		.uleb128 0x19
 4638 0172 01       		.uleb128 0x1
 4639 0173 13       		.uleb128 0x13
 4640 0174 00       		.byte	0
 4641 0175 00       		.byte	0
 4642 0176 17       		.uleb128 0x17
 4643 0177 2E       		.uleb128 0x2e
 4644 0178 01       		.byte	0x1
 4645 0179 3F       		.uleb128 0x3f
 4646 017a 19       		.uleb128 0x19
 4647 017b 03       		.uleb128 0x3
 4648 017c 0E       		.uleb128 0xe
 4649 017d 3A       		.uleb128 0x3a
 4650 017e 0B       		.uleb128 0xb
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 135


 4651 017f 3B       		.uleb128 0x3b
 4652 0180 05       		.uleb128 0x5
 4653 0181 27       		.uleb128 0x27
 4654 0182 19       		.uleb128 0x19
 4655 0183 11       		.uleb128 0x11
 4656 0184 01       		.uleb128 0x1
 4657 0185 12       		.uleb128 0x12
 4658 0186 06       		.uleb128 0x6
 4659 0187 40       		.uleb128 0x40
 4660 0188 18       		.uleb128 0x18
 4661 0189 9742     		.uleb128 0x2117
 4662 018b 19       		.uleb128 0x19
 4663 018c 01       		.uleb128 0x1
 4664 018d 13       		.uleb128 0x13
 4665 018e 00       		.byte	0
 4666 018f 00       		.byte	0
 4667 0190 18       		.uleb128 0x18
 4668 0191 2E       		.uleb128 0x2e
 4669 0192 00       		.byte	0
 4670 0193 3F       		.uleb128 0x3f
 4671 0194 19       		.uleb128 0x19
 4672 0195 03       		.uleb128 0x3
 4673 0196 0E       		.uleb128 0xe
 4674 0197 3A       		.uleb128 0x3a
 4675 0198 0B       		.uleb128 0xb
 4676 0199 3B       		.uleb128 0x3b
 4677 019a 05       		.uleb128 0x5
 4678 019b 27       		.uleb128 0x27
 4679 019c 19       		.uleb128 0x19
 4680 019d 11       		.uleb128 0x11
 4681 019e 01       		.uleb128 0x1
 4682 019f 12       		.uleb128 0x12
 4683 01a0 06       		.uleb128 0x6
 4684 01a1 40       		.uleb128 0x40
 4685 01a2 18       		.uleb128 0x18
 4686 01a3 9642     		.uleb128 0x2116
 4687 01a5 19       		.uleb128 0x19
 4688 01a6 00       		.byte	0
 4689 01a7 00       		.byte	0
 4690 01a8 19       		.uleb128 0x19
 4691 01a9 34       		.uleb128 0x34
 4692 01aa 00       		.byte	0
 4693 01ab 03       		.uleb128 0x3
 4694 01ac 08       		.uleb128 0x8
 4695 01ad 3A       		.uleb128 0x3a
 4696 01ae 0B       		.uleb128 0xb
 4697 01af 3B       		.uleb128 0x3b
 4698 01b0 05       		.uleb128 0x5
 4699 01b1 49       		.uleb128 0x49
 4700 01b2 13       		.uleb128 0x13
 4701 01b3 02       		.uleb128 0x2
 4702 01b4 18       		.uleb128 0x18
 4703 01b5 00       		.byte	0
 4704 01b6 00       		.byte	0
 4705 01b7 1A       		.uleb128 0x1a
 4706 01b8 2E       		.uleb128 0x2e
 4707 01b9 01       		.byte	0x1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 136


 4708 01ba 03       		.uleb128 0x3
 4709 01bb 0E       		.uleb128 0xe
 4710 01bc 3A       		.uleb128 0x3a
 4711 01bd 0B       		.uleb128 0xb
 4712 01be 3B       		.uleb128 0x3b
 4713 01bf 05       		.uleb128 0x5
 4714 01c0 27       		.uleb128 0x27
 4715 01c1 19       		.uleb128 0x19
 4716 01c2 11       		.uleb128 0x11
 4717 01c3 01       		.uleb128 0x1
 4718 01c4 12       		.uleb128 0x12
 4719 01c5 06       		.uleb128 0x6
 4720 01c6 40       		.uleb128 0x40
 4721 01c7 18       		.uleb128 0x18
 4722 01c8 9642     		.uleb128 0x2116
 4723 01ca 19       		.uleb128 0x19
 4724 01cb 01       		.uleb128 0x1
 4725 01cc 13       		.uleb128 0x13
 4726 01cd 00       		.byte	0
 4727 01ce 00       		.byte	0
 4728 01cf 1B       		.uleb128 0x1b
 4729 01d0 34       		.uleb128 0x34
 4730 01d1 00       		.byte	0
 4731 01d2 03       		.uleb128 0x3
 4732 01d3 0E       		.uleb128 0xe
 4733 01d4 3A       		.uleb128 0x3a
 4734 01d5 0B       		.uleb128 0xb
 4735 01d6 3B       		.uleb128 0x3b
 4736 01d7 0B       		.uleb128 0xb
 4737 01d8 49       		.uleb128 0x49
 4738 01d9 13       		.uleb128 0x13
 4739 01da 3F       		.uleb128 0x3f
 4740 01db 19       		.uleb128 0x19
 4741 01dc 02       		.uleb128 0x2
 4742 01dd 18       		.uleb128 0x18
 4743 01de 00       		.byte	0
 4744 01df 00       		.byte	0
 4745 01e0 1C       		.uleb128 0x1c
 4746 01e1 26       		.uleb128 0x26
 4747 01e2 00       		.byte	0
 4748 01e3 49       		.uleb128 0x49
 4749 01e4 13       		.uleb128 0x13
 4750 01e5 00       		.byte	0
 4751 01e6 00       		.byte	0
 4752 01e7 00       		.byte	0
 4753              		.section	.debug_aranges,"",%progbits
 4754 0000 B4010000 		.4byte	0x1b4
 4755 0004 0200     		.2byte	0x2
 4756 0006 00000000 		.4byte	.Ldebug_info0
 4757 000a 04       		.byte	0x4
 4758 000b 00       		.byte	0
 4759 000c 0000     		.2byte	0
 4760 000e 0000     		.2byte	0
 4761 0010 00000000 		.4byte	.LFB1
 4762 0014 1C000000 		.4byte	.LFE1-.LFB1
 4763 0018 00000000 		.4byte	.LFB2
 4764 001c 1C000000 		.4byte	.LFE2-.LFB2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 137


 4765 0020 00000000 		.4byte	.LFB3
 4766 0024 44010000 		.4byte	.LFE3-.LFB3
 4767 0028 00000000 		.4byte	.LFB4
 4768 002c 1C000000 		.4byte	.LFE4-.LFB4
 4769 0030 00000000 		.4byte	.LFB5
 4770 0034 20000000 		.4byte	.LFE5-.LFB5
 4771 0038 00000000 		.4byte	.LFB6
 4772 003c 48000000 		.4byte	.LFE6-.LFB6
 4773 0040 00000000 		.4byte	.LFB7
 4774 0044 34000000 		.4byte	.LFE7-.LFB7
 4775 0048 00000000 		.4byte	.LFB8
 4776 004c 44000000 		.4byte	.LFE8-.LFB8
 4777 0050 00000000 		.4byte	.LFB9
 4778 0054 B8000000 		.4byte	.LFE9-.LFB9
 4779 0058 00000000 		.4byte	.LFB10
 4780 005c 60000000 		.4byte	.LFE10-.LFB10
 4781 0060 00000000 		.4byte	.LFB11
 4782 0064 28000000 		.4byte	.LFE11-.LFB11
 4783 0068 00000000 		.4byte	.LFB12
 4784 006c 18000000 		.4byte	.LFE12-.LFB12
 4785 0070 00000000 		.4byte	.LFB13
 4786 0074 14000000 		.4byte	.LFE13-.LFB13
 4787 0078 00000000 		.4byte	.LFB14
 4788 007c 30000000 		.4byte	.LFE14-.LFB14
 4789 0080 00000000 		.4byte	.LFB15
 4790 0084 24000000 		.4byte	.LFE15-.LFB15
 4791 0088 00000000 		.4byte	.LFB16
 4792 008c 18000000 		.4byte	.LFE16-.LFB16
 4793 0090 00000000 		.4byte	.LFB17
 4794 0094 48000000 		.4byte	.LFE17-.LFB17
 4795 0098 00000000 		.4byte	.LFB18
 4796 009c 34000000 		.4byte	.LFE18-.LFB18
 4797 00a0 00000000 		.4byte	.LFB19
 4798 00a4 4C000000 		.4byte	.LFE19-.LFB19
 4799 00a8 00000000 		.4byte	.LFB20
 4800 00ac 36000000 		.4byte	.LFE20-.LFB20
 4801 00b0 00000000 		.4byte	.LFB21
 4802 00b4 A8000000 		.4byte	.LFE21-.LFB21
 4803 00b8 00000000 		.4byte	.LFB22
 4804 00bc 5C000000 		.4byte	.LFE22-.LFB22
 4805 00c0 00000000 		.4byte	.LFB23
 4806 00c4 28000000 		.4byte	.LFE23-.LFB23
 4807 00c8 00000000 		.4byte	.LFB24
 4808 00cc 30000000 		.4byte	.LFE24-.LFB24
 4809 00d0 00000000 		.4byte	.LFB25
 4810 00d4 28000000 		.4byte	.LFE25-.LFB25
 4811 00d8 00000000 		.4byte	.LFB26
 4812 00dc 28000000 		.4byte	.LFE26-.LFB26
 4813 00e0 00000000 		.4byte	.LFB27
 4814 00e4 28000000 		.4byte	.LFE27-.LFB27
 4815 00e8 00000000 		.4byte	.LFB28
 4816 00ec 14000000 		.4byte	.LFE28-.LFB28
 4817 00f0 00000000 		.4byte	.LFB29
 4818 00f4 20000000 		.4byte	.LFE29-.LFB29
 4819 00f8 00000000 		.4byte	.LFB30
 4820 00fc 48000000 		.4byte	.LFE30-.LFB30
 4821 0100 00000000 		.4byte	.LFB31
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 138


 4822 0104 28000000 		.4byte	.LFE31-.LFB31
 4823 0108 00000000 		.4byte	.LFB32
 4824 010c 84000000 		.4byte	.LFE32-.LFB32
 4825 0110 00000000 		.4byte	.LFB33
 4826 0114 24000000 		.4byte	.LFE33-.LFB33
 4827 0118 00000000 		.4byte	.LFB34
 4828 011c 64000000 		.4byte	.LFE34-.LFB34
 4829 0120 00000000 		.4byte	.LFB35
 4830 0124 1C000000 		.4byte	.LFE35-.LFB35
 4831 0128 00000000 		.4byte	.LFB36
 4832 012c 18000000 		.4byte	.LFE36-.LFB36
 4833 0130 00000000 		.4byte	.LFB37
 4834 0134 18000000 		.4byte	.LFE37-.LFB37
 4835 0138 00000000 		.4byte	.LFB38
 4836 013c 18000000 		.4byte	.LFE38-.LFB38
 4837 0140 00000000 		.4byte	.LFB39
 4838 0144 1C000000 		.4byte	.LFE39-.LFB39
 4839 0148 00000000 		.4byte	.LFB40
 4840 014c 18000000 		.4byte	.LFE40-.LFB40
 4841 0150 00000000 		.4byte	.LFB41
 4842 0154 18000000 		.4byte	.LFE41-.LFB41
 4843 0158 00000000 		.4byte	.LFB42
 4844 015c 34000000 		.4byte	.LFE42-.LFB42
 4845 0160 00000000 		.4byte	.LFB43
 4846 0164 18000000 		.4byte	.LFE43-.LFB43
 4847 0168 00000000 		.4byte	.LFB44
 4848 016c 14000000 		.4byte	.LFE44-.LFB44
 4849 0170 00000000 		.4byte	.LFB45
 4850 0174 2C000000 		.4byte	.LFE45-.LFB45
 4851 0178 00000000 		.4byte	.LFB46
 4852 017c 1C000000 		.4byte	.LFE46-.LFB46
 4853 0180 00000000 		.4byte	.LFB47
 4854 0184 44000000 		.4byte	.LFE47-.LFB47
 4855 0188 00000000 		.4byte	.LFB48
 4856 018c C0000000 		.4byte	.LFE48-.LFB48
 4857 0190 00000000 		.4byte	.LFB49
 4858 0194 38000000 		.4byte	.LFE49-.LFB49
 4859 0198 00000000 		.4byte	.LFB50
 4860 019c 38000000 		.4byte	.LFE50-.LFB50
 4861 01a0 00000000 		.4byte	.LFB51
 4862 01a4 38000000 		.4byte	.LFE51-.LFB51
 4863 01a8 00000000 		.4byte	.LFB52
 4864 01ac A0000000 		.4byte	.LFE52-.LFB52
 4865 01b0 00000000 		.4byte	0
 4866 01b4 00000000 		.4byte	0
 4867              		.section	.debug_ranges,"",%progbits
 4868              	.Ldebug_ranges0:
 4869 0000 00000000 		.4byte	.LFB1
 4870 0004 1C000000 		.4byte	.LFE1
 4871 0008 00000000 		.4byte	.LFB2
 4872 000c 1C000000 		.4byte	.LFE2
 4873 0010 00000000 		.4byte	.LFB3
 4874 0014 44010000 		.4byte	.LFE3
 4875 0018 00000000 		.4byte	.LFB4
 4876 001c 1C000000 		.4byte	.LFE4
 4877 0020 00000000 		.4byte	.LFB5
 4878 0024 20000000 		.4byte	.LFE5
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 139


 4879 0028 00000000 		.4byte	.LFB6
 4880 002c 48000000 		.4byte	.LFE6
 4881 0030 00000000 		.4byte	.LFB7
 4882 0034 34000000 		.4byte	.LFE7
 4883 0038 00000000 		.4byte	.LFB8
 4884 003c 44000000 		.4byte	.LFE8
 4885 0040 00000000 		.4byte	.LFB9
 4886 0044 B8000000 		.4byte	.LFE9
 4887 0048 00000000 		.4byte	.LFB10
 4888 004c 60000000 		.4byte	.LFE10
 4889 0050 00000000 		.4byte	.LFB11
 4890 0054 28000000 		.4byte	.LFE11
 4891 0058 00000000 		.4byte	.LFB12
 4892 005c 18000000 		.4byte	.LFE12
 4893 0060 00000000 		.4byte	.LFB13
 4894 0064 14000000 		.4byte	.LFE13
 4895 0068 00000000 		.4byte	.LFB14
 4896 006c 30000000 		.4byte	.LFE14
 4897 0070 00000000 		.4byte	.LFB15
 4898 0074 24000000 		.4byte	.LFE15
 4899 0078 00000000 		.4byte	.LFB16
 4900 007c 18000000 		.4byte	.LFE16
 4901 0080 00000000 		.4byte	.LFB17
 4902 0084 48000000 		.4byte	.LFE17
 4903 0088 00000000 		.4byte	.LFB18
 4904 008c 34000000 		.4byte	.LFE18
 4905 0090 00000000 		.4byte	.LFB19
 4906 0094 4C000000 		.4byte	.LFE19
 4907 0098 00000000 		.4byte	.LFB20
 4908 009c 36000000 		.4byte	.LFE20
 4909 00a0 00000000 		.4byte	.LFB21
 4910 00a4 A8000000 		.4byte	.LFE21
 4911 00a8 00000000 		.4byte	.LFB22
 4912 00ac 5C000000 		.4byte	.LFE22
 4913 00b0 00000000 		.4byte	.LFB23
 4914 00b4 28000000 		.4byte	.LFE23
 4915 00b8 00000000 		.4byte	.LFB24
 4916 00bc 30000000 		.4byte	.LFE24
 4917 00c0 00000000 		.4byte	.LFB25
 4918 00c4 28000000 		.4byte	.LFE25
 4919 00c8 00000000 		.4byte	.LFB26
 4920 00cc 28000000 		.4byte	.LFE26
 4921 00d0 00000000 		.4byte	.LFB27
 4922 00d4 28000000 		.4byte	.LFE27
 4923 00d8 00000000 		.4byte	.LFB28
 4924 00dc 14000000 		.4byte	.LFE28
 4925 00e0 00000000 		.4byte	.LFB29
 4926 00e4 20000000 		.4byte	.LFE29
 4927 00e8 00000000 		.4byte	.LFB30
 4928 00ec 48000000 		.4byte	.LFE30
 4929 00f0 00000000 		.4byte	.LFB31
 4930 00f4 28000000 		.4byte	.LFE31
 4931 00f8 00000000 		.4byte	.LFB32
 4932 00fc 84000000 		.4byte	.LFE32
 4933 0100 00000000 		.4byte	.LFB33
 4934 0104 24000000 		.4byte	.LFE33
 4935 0108 00000000 		.4byte	.LFB34
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 140


 4936 010c 64000000 		.4byte	.LFE34
 4937 0110 00000000 		.4byte	.LFB35
 4938 0114 1C000000 		.4byte	.LFE35
 4939 0118 00000000 		.4byte	.LFB36
 4940 011c 18000000 		.4byte	.LFE36
 4941 0120 00000000 		.4byte	.LFB37
 4942 0124 18000000 		.4byte	.LFE37
 4943 0128 00000000 		.4byte	.LFB38
 4944 012c 18000000 		.4byte	.LFE38
 4945 0130 00000000 		.4byte	.LFB39
 4946 0134 1C000000 		.4byte	.LFE39
 4947 0138 00000000 		.4byte	.LFB40
 4948 013c 18000000 		.4byte	.LFE40
 4949 0140 00000000 		.4byte	.LFB41
 4950 0144 18000000 		.4byte	.LFE41
 4951 0148 00000000 		.4byte	.LFB42
 4952 014c 34000000 		.4byte	.LFE42
 4953 0150 00000000 		.4byte	.LFB43
 4954 0154 18000000 		.4byte	.LFE43
 4955 0158 00000000 		.4byte	.LFB44
 4956 015c 14000000 		.4byte	.LFE44
 4957 0160 00000000 		.4byte	.LFB45
 4958 0164 2C000000 		.4byte	.LFE45
 4959 0168 00000000 		.4byte	.LFB46
 4960 016c 1C000000 		.4byte	.LFE46
 4961 0170 00000000 		.4byte	.LFB47
 4962 0174 44000000 		.4byte	.LFE47
 4963 0178 00000000 		.4byte	.LFB48
 4964 017c C0000000 		.4byte	.LFE48
 4965 0180 00000000 		.4byte	.LFB49
 4966 0184 38000000 		.4byte	.LFE49
 4967 0188 00000000 		.4byte	.LFB50
 4968 018c 38000000 		.4byte	.LFE50
 4969 0190 00000000 		.4byte	.LFB51
 4970 0194 38000000 		.4byte	.LFE51
 4971 0198 00000000 		.4byte	.LFB52
 4972 019c A0000000 		.4byte	.LFE52
 4973 01a0 00000000 		.4byte	0
 4974 01a4 00000000 		.4byte	0
 4975              		.section	.debug_line,"",%progbits
 4976              	.Ldebug_line0:
 4977 0000 12050000 		.section	.debug_str,"MS",%progbits,1
 4977      02004D00 
 4977      00000201 
 4977      FB0E0D00 
 4977      01010101 
 4978              	.LASF57:
 4979 0000 72616D56 		.ascii	"ramVectorTable\000"
 4979      6563746F 
 4979      72546162 
 4979      6C6500
 4980              	.LASF10:
 4981 000f 75696E74 		.ascii	"uint16\000"
 4981      313600
 4982              	.LASF50:
 4983 0016 696E7453 		.ascii	"intState\000"
 4983      74617465 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 141


 4983      00
 4984              	.LASF29:
 4985 001f 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 4985      73436C6B 
 4985      57726974 
 4985      65486663 
 4985      6C6B4469 
 4986              	.LASF56:
 4987 0038 6F6C6449 		.ascii	"oldIsr\000"
 4987      737200
 4988              	.LASF93:
 4989 003f 72657456 		.ascii	"retVal\000"
 4989      616C00
 4990              	.LASF49:
 4991 0046 43794469 		.ascii	"CyDisableInts\000"
 4991      7361626C 
 4991      65496E74 
 4991      7300
 4992              	.LASF7:
 4993 0054 6C6F6E67 		.ascii	"long long unsigned int\000"
 4993      206C6F6E 
 4993      6720756E 
 4993      7369676E 
 4993      65642069 
 4994              	.LASF36:
 4995 006b 70617261 		.ascii	"parameters\000"
 4995      6D657465 
 4995      727300
 4996              	.LASF51:
 4997 0076 4379456E 		.ascii	"CyEnableInts\000"
 4997      61626C65 
 4997      496E7473 
 4997      00
 4998              	.LASF102:
 4999 0083 696E7465 		.ascii	"interfaceNumber\000"
 4999      72666163 
 4999      654E756D 
 4999      62657200 
 5000              	.LASF72:
 5001 0093 4379536F 		.ascii	"CySoftwareReset\000"
 5001      66747761 
 5001      72655265 
 5001      73657400 
 5002              	.LASF82:
 5003 00a3 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 5003      73546963 
 5003      6B456E61 
 5003      626C6549 
 5003      6E746572 
 5004              	.LASF67:
 5005 00bc 4379496E 		.ascii	"CyIntGetState\000"
 5005      74476574 
 5005      53746174 
 5005      6500
 5006              	.LASF6:
 5007 00ca 6C6F6E67 		.ascii	"long long int\000"
 5007      206C6F6E 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 142


 5007      6720696E 
 5007      7400
 5008              	.LASF0:
 5009 00d8 7369676E 		.ascii	"signed char\000"
 5009      65642063 
 5009      68617200 
 5010              	.LASF22:
 5011 00e4 66726571 		.ascii	"freq\000"
 5011      00
 5012              	.LASF77:
 5013 00e9 43794465 		.ascii	"CyDelayFreq\000"
 5013      6C617946 
 5013      72657100 
 5014              	.LASF23:
 5015 00f5 696E7465 		.ascii	"interruptState\000"
 5015      72727570 
 5015      74537461 
 5015      746500
 5016              	.LASF25:
 5017 0104 6C664C69 		.ascii	"lfLimit\000"
 5017      6D697400 
 5018              	.LASF85:
 5019 010c 43795379 		.ascii	"CySysTickGetReload\000"
 5019      73546963 
 5019      6B476574 
 5019      52656C6F 
 5019      616400
 5020              	.LASF42:
 5021 011f 43795379 		.ascii	"CySysClkImoGetWcoLock\000"
 5021      73436C6B 
 5021      496D6F47 
 5021      65745763 
 5021      6F4C6F63 
 5022              	.LASF38:
 5023 0135 77636F4C 		.ascii	"wcoLock\000"
 5023      6F636B00 
 5024              	.LASF4:
 5025 013d 6C6F6E67 		.ascii	"long int\000"
 5025      20696E74 
 5025      00
 5026              	.LASF68:
 5027 0146 4379496E 		.ascii	"CyIntDisable\000"
 5027      74446973 
 5027      61626C65 
 5027      00
 5028              	.LASF37:
 5029 0153 72656756 		.ascii	"regValues\000"
 5029      616C7565 
 5029      7300
 5030              	.LASF9:
 5031 015d 75696E74 		.ascii	"uint8\000"
 5031      3800
 5032              	.LASF105:
 5033 0163 63796465 		.ascii	"cydelayFreqKhz\000"
 5033      6C617946 
 5033      7265714B 
 5033      687A00
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 143


 5034              	.LASF75:
 5035 0172 43794465 		.ascii	"CyDelayUs\000"
 5035      6C617955 
 5035      7300
 5036              	.LASF13:
 5037 017c 646F7562 		.ascii	"double\000"
 5037      6C6500
 5038              	.LASF63:
 5039 0183 73686966 		.ascii	"shift\000"
 5039      7400
 5040              	.LASF44:
 5041 0189 43795379 		.ascii	"CySysLvdClearInterrupt\000"
 5041      734C7664 
 5041      436C6561 
 5041      72496E74 
 5041      65727275 
 5042              	.LASF11:
 5043 01a0 75696E74 		.ascii	"uint32\000"
 5043      333200
 5044              	.LASF52:
 5045 01a7 6D61736B 		.ascii	"mask\000"
 5045      00
 5046              	.LASF45:
 5047 01ac 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 5047      73436C6B 
 5047      47657453 
 5047      7973636C 
 5047      6B536F75 
 5048              	.LASF28:
 5049 01c4 43795379 		.ascii	"CySysClkImoEnableWcoLock\000"
 5049      73436C6B 
 5049      496D6F45 
 5049      6E61626C 
 5049      6557636F 
 5050              	.LASF65:
 5051 01dd 4379496E 		.ascii	"CyIntGetPriority\000"
 5051      74476574 
 5051      5072696F 
 5051      72697479 
 5051      00
 5052              	.LASF107:
 5053 01ee 63796465 		.ascii	"cydelay32kMs\000"
 5053      6C617933 
 5053      326B4D73 
 5053      00
 5054              	.LASF79:
 5055 01fb 43795379 		.ascii	"CySysTickInit\000"
 5055      73546963 
 5055      6B496E69 
 5055      7400
 5056              	.LASF64:
 5057 0209 76616C75 		.ascii	"value\000"
 5057      6500
 5058              	.LASF88:
 5059 020f 636C6F63 		.ascii	"clockSource\000"
 5059      6B536F75 
 5059      72636500 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 144


 5060              	.LASF95:
 5061 021b 43794765 		.ascii	"CyGetUniqueId\000"
 5061      74556E69 
 5061      71756549 
 5061      6400
 5062              	.LASF89:
 5063 0229 43795379 		.ascii	"CySysTickGetCountFlag\000"
 5063      73546963 
 5063      6B476574 
 5063      436F756E 
 5063      74466C61 
 5064              	.LASF8:
 5065 023f 756E7369 		.ascii	"unsigned int\000"
 5065      676E6564 
 5065      20696E74 
 5065      00
 5066              	.LASF90:
 5067 024c 43795379 		.ascii	"CySysTickClear\000"
 5067      73546963 
 5067      6B436C65 
 5067      617200
 5068              	.LASF5:
 5069 025b 6C6F6E67 		.ascii	"long unsigned int\000"
 5069      20756E73 
 5069      69676E65 
 5069      6420696E 
 5069      7400
 5070              	.LASF43:
 5071 026d 43795379 		.ascii	"CySysLvdGetInterruptSource\000"
 5071      734C7664 
 5071      47657449 
 5071      6E746572 
 5071      72757074 
 5072              	.LASF21:
 5073 0288 43795379 		.ascii	"CySysClkImoStop\000"
 5073      73436C6B 
 5073      496D6F53 
 5073      746F7000 
 5074              	.LASF69:
 5075 0298 4379496E 		.ascii	"CyIntSetPending\000"
 5075      74536574 
 5075      50656E64 
 5075      696E6700 
 5076              	.LASF94:
 5077 02a8 43795379 		.ascii	"CySysTickGetCallback\000"
 5077      73546963 
 5077      6B476574 
 5077      43616C6C 
 5077      6261636B 
 5078              	.LASF46:
 5079 02bd 43795379 		.ascii	"CySysGetResetReason\000"
 5079      73476574 
 5079      52657365 
 5079      74526561 
 5079      736F6E00 
 5080              	.LASF3:
 5081 02d1 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 145


 5081      7420756E 
 5081      7369676E 
 5081      65642069 
 5081      6E7400
 5082              	.LASF24:
 5083 02e4 72656754 		.ascii	"regTmp\000"
 5083      6D7000
 5084              	.LASF87:
 5085 02eb 43795379 		.ascii	"CySysTickSetClockSource\000"
 5085      73546963 
 5085      6B536574 
 5085      436C6F63 
 5085      6B536F75 
 5086              	.LASF59:
 5087 0303 4379496E 		.ascii	"CyIntSetVector\000"
 5087      74536574 
 5087      56656374 
 5087      6F7200
 5088              	.LASF54:
 5089 0312 6E756D62 		.ascii	"number\000"
 5089      657200
 5090              	.LASF62:
 5091 0319 7072696F 		.ascii	"priority\000"
 5091      72697479 
 5091      00
 5092              	.LASF35:
 5093 0322 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 5093      73436C6B 
 5093      57726974 
 5093      65496D6F 
 5093      46726571 
 5094              	.LASF99:
 5095 0337 43795379 		.ascii	"CySysSetFlashAccessArbPriority\000"
 5095      73536574 
 5095      466C6173 
 5095      68416363 
 5095      65737341 
 5096              	.LASF53:
 5097 0356 4379496E 		.ascii	"CyIntSetSysVector\000"
 5097      74536574 
 5097      53797356 
 5097      6563746F 
 5097      7200
 5098              	.LASF27:
 5099 0368 43795379 		.ascii	"CySysClkImoDisableWcoLock\000"
 5099      73436C6B 
 5099      496D6F44 
 5099      69736162 
 5099      6C655763 
 5100              	.LASF16:
 5101 0382 72656733 		.ascii	"reg32\000"
 5101      3200
 5102              	.LASF78:
 5103 0388 43795379 		.ascii	"CySysTickStart\000"
 5103      73546963 
 5103      6B537461 
 5103      727400
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 146


 5104              	.LASF48:
 5105 0397 72657475 		.ascii	"returnStatus\000"
 5105      726E5374 
 5105      61747573 
 5105      00
 5106              	.LASF98:
 5107 03a4 736F7572 		.ascii	"source\000"
 5107      636500
 5108              	.LASF18:
 5109 03ab 73697A65 		.ascii	"sizetype\000"
 5109      74797065 
 5109      00
 5110              	.LASF108:
 5111 03b4 43795379 		.ascii	"CySysTickInitVar\000"
 5111      73546963 
 5111      6B496E69 
 5111      74566172 
 5111      00
 5112              	.LASF101:
 5113 03c5 43795379 		.ascii	"CySysSetPeripheralAccessArbPriority\000"
 5113      73536574 
 5113      50657269 
 5113      70686572 
 5113      616C4163 
 5114              	.LASF70:
 5115 03e9 4379496E 		.ascii	"CyIntClearPending\000"
 5115      74436C65 
 5115      61725065 
 5115      6E64696E 
 5115      6700
 5116              	.LASF55:
 5117 03fb 61646472 		.ascii	"address\000"
 5117      65737300 
 5118              	.LASF31:
 5119 0403 73797363 		.ascii	"sysclkSource\000"
 5119      6C6B536F 
 5119      75726365 
 5119      00
 5120              	.LASF92:
 5121 0410 66756E63 		.ascii	"function\000"
 5121      74696F6E 
 5121      00
 5122              	.LASF109:
 5123 0419 6379496D 		.ascii	"cyImoFreqMhz2Reg\000"
 5123      6F467265 
 5123      714D687A 
 5123      32526567 
 5123      00
 5124              	.LASF86:
 5125 042a 43795379 		.ascii	"CySysTickGetValue\000"
 5125      73546963 
 5125      6B476574 
 5125      56616C75 
 5125      6500
 5126              	.LASF104:
 5127 043c 63796465 		.ascii	"cydelayFreqHz\000"
 5127      6C617946 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 147


 5127      72657148 
 5127      7A00
 5128              	.LASF61:
 5129 044a 4379496E 		.ascii	"CyIntSetPriority\000"
 5129      74536574 
 5129      5072696F 
 5129      72697479 
 5129      00
 5130              	.LASF12:
 5131 045b 666C6F61 		.ascii	"float\000"
 5131      7400
 5132              	.LASF39:
 5133 0461 43795379 		.ascii	"CySysLvdEnable\000"
 5133      734C7664 
 5133      456E6162 
 5133      6C6500
 5134              	.LASF19:
 5135 0470 63795379 		.ascii	"cySysTickCallback\000"
 5135      73546963 
 5135      6B43616C 
 5135      6C626163 
 5135      6B00
 5136              	.LASF60:
 5137 0482 4379496E 		.ascii	"CyIntGetVector\000"
 5137      74476574 
 5137      56656374 
 5137      6F7200
 5138              	.LASF74:
 5139 0491 6D696C6C 		.ascii	"milliseconds\000"
 5139      69736563 
 5139      6F6E6473 
 5139      00
 5140              	.LASF15:
 5141 049e 72656738 		.ascii	"reg8\000"
 5141      00
 5142              	.LASF40:
 5143 04a3 74687265 		.ascii	"threshold\000"
 5143      73686F6C 
 5143      6400
 5144              	.LASF71:
 5145 04ad 43794861 		.ascii	"CyHalt\000"
 5145      6C7400
 5146              	.LASF97:
 5147 04b4 43795379 		.ascii	"CySysSetRamAccessArbPriority\000"
 5147      73536574 
 5147      52616D41 
 5147      63636573 
 5147      73417262 
 5148              	.LASF1:
 5149 04d1 756E7369 		.ascii	"unsigned char\000"
 5149      676E6564 
 5149      20636861 
 5149      7200
 5150              	.LASF2:
 5151 04df 73686F72 		.ascii	"short int\000"
 5151      7420696E 
 5151      7400
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 148


 5152              	.LASF66:
 5153 04e9 4379496E 		.ascii	"CyIntEnable\000"
 5153      74456E61 
 5153      626C6500 
 5154              	.LASF58:
 5155 04f5 4379496E 		.ascii	"CyIntGetSysVector\000"
 5155      74476574 
 5155      53797356 
 5155      6563746F 
 5155      7200
 5156              	.LASF33:
 5157 0507 636C6B53 		.ascii	"clkSelect\000"
 5157      656C6563 
 5157      7400
 5158              	.LASF47:
 5159 0511 72656173 		.ascii	"reason\000"
 5159      6F6E00
 5160              	.LASF113:
 5161 0518 433A5C55 		.ascii	"C:\\Users\\glenn\\OneDrive\\PSOC\\moisture_sensor_4"
 5161      73657273 
 5161      5C676C65 
 5161      6E6E5C4F 
 5161      6E654472 
 5162 0546 6D5C4D6F 		.ascii	"m\\Moisture_Sensor\\Moisture_Sensor.cydsn\000"
 5162      69737475 
 5162      72655F53 
 5162      656E736F 
 5162      725C4D6F 
 5163              	.LASF14:
 5164 056e 63686172 		.ascii	"char\000"
 5164      00
 5165              	.LASF110:
 5166 0573 6379496D 		.ascii	"cyImoFreqMhz2DpllOffset\000"
 5166      6F467265 
 5166      714D687A 
 5166      3244706C 
 5166      6C4F6666 
 5167              	.LASF17:
 5168 058b 63796973 		.ascii	"cyisraddress\000"
 5168      72616464 
 5168      72657373 
 5168      00
 5169              	.LASF80:
 5170 0598 43795379 		.ascii	"CySysTickEnable\000"
 5170      73546963 
 5170      6B456E61 
 5170      626C6500 
 5171              	.LASF32:
 5172 05a8 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 5172      73436C6B 
 5172      57726974 
 5172      65537973 
 5172      636C6B44 
 5173              	.LASF91:
 5174 05bf 43795379 		.ascii	"CySysTickSetCallback\000"
 5174      73546963 
 5174      6B536574 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 149


 5174      43616C6C 
 5174      6261636B 
 5175              	.LASF103:
 5176 05d4 43795379 		.ascii	"CySysTickCallbacks\000"
 5176      73546963 
 5176      6B43616C 
 5176      6C626163 
 5176      6B7300
 5177              	.LASF96:
 5178 05e7 756E6971 		.ascii	"uniqueId\000"
 5178      75654964 
 5178      00
 5179              	.LASF26:
 5180 05f0 666C6173 		.ascii	"flashCtlReg\000"
 5180      6843746C 
 5180      52656700 
 5181              	.LASF73:
 5182 05fc 43794465 		.ascii	"CyDelay\000"
 5182      6C617900 
 5183              	.LASF83:
 5184 0604 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 5184      73546963 
 5184      6B446973 
 5184      61626C65 
 5184      496E7465 
 5185              	.LASF41:
 5186 061e 43795379 		.ascii	"CySysLvdDisable\000"
 5186      734C7664 
 5186      44697361 
 5186      626C6500 
 5187              	.LASF106:
 5188 062e 63796465 		.ascii	"cydelayFreqMhz\000"
 5188      6C617946 
 5188      7265714D 
 5188      687A00
 5189              	.LASF100:
 5190 063d 43795379 		.ascii	"CySysSetDmacAccessArbPriority\000"
 5190      73536574 
 5190      446D6163 
 5190      41636365 
 5190      73734172 
 5191              	.LASF81:
 5192 065b 43795379 		.ascii	"CySysTickStop\000"
 5192      73546963 
 5192      6B53746F 
 5192      7000
 5193              	.LASF34:
 5194 0669 64697669 		.ascii	"divider\000"
 5194      64657200 
 5195              	.LASF111:
 5196 0671 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 5196      4320342E 
 5196      392E3320 
 5196      32303135 
 5196      30333033 
 5197 06a4 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 5197      20726576 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccWMQpvc.s 			page 150


 5197      6973696F 
 5197      6E203232 
 5197      31323230 
 5198 06d7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5198      66756E63 
 5198      74696F6E 
 5198      2D736563 
 5198      74696F6E 
 5199              	.LASF20:
 5200 06ff 43795379 		.ascii	"CySysClkImoStart\000"
 5200      73436C6B 
 5200      496D6F53 
 5200      74617274 
 5200      00
 5201              	.LASF112:
 5202 0710 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLib.c\000"
 5202      72617465 
 5202      645F536F 
 5202      75726365 
 5202      5C50536F 
 5203              	.LASF76:
 5204 072f 6D696372 		.ascii	"microseconds\000"
 5204      6F736563 
 5204      6F6E6473 
 5204      00
 5205              	.LASF30:
 5206 073c 746D7052 		.ascii	"tmpReg\000"
 5206      656700
 5207              	.LASF84:
 5208 0743 43795379 		.ascii	"CySysTickSetReload\000"
 5208      73546963 
 5208      6B536574 
 5208      52656C6F 
 5208      616400
 5209              	.LASF114:
 5210 0756 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 5210      73546963 
 5210      6B536572 
 5210      76696365 
 5210      43616C6C 
 5211              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
