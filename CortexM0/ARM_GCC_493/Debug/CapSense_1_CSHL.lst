ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CapSense_1_CSHL.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	CapSense_1_rawFilterData1,16,4
  18              		.global	CapSense_1_sensorBaseline
  19              		.bss
  20              		.align	2
  21              		.type	CapSense_1_sensorBaseline, %object
  22              		.size	CapSense_1_sensorBaseline, 16
  23              	CapSense_1_sensorBaseline:
  24 0000 00000000 		.space	16
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.global	CapSense_1_sensorBaselineLow
  26              		.align	2
  27              		.type	CapSense_1_sensorBaselineLow, %object
  28              		.size	CapSense_1_sensorBaselineLow, 8
  29              	CapSense_1_sensorBaselineLow:
  30 0010 00000000 		.space	8
  30      00000000 
  31              		.global	CapSense_1_sensorSignal
  32              		.align	2
  33              		.type	CapSense_1_sensorSignal, %object
  34              		.size	CapSense_1_sensorSignal, 8
  35              	CapSense_1_sensorSignal:
  36 0018 00000000 		.space	8
  36      00000000 
  37              		.global	CapSense_1_sensorOnMask
  38              		.align	2
  39              		.type	CapSense_1_sensorOnMask, %object
  40              		.size	CapSense_1_sensorOnMask, 1
  41              	CapSense_1_sensorOnMask:
  42 0020 00       		.space	1
  43              		.comm	CapSense_1_lowBaselineResetCnt,8,4
  44              		.global	CapSense_1_lowBaselineReset
  45              		.data
  46              		.align	2
  47              		.type	CapSense_1_lowBaselineReset, %object
  48              		.size	CapSense_1_lowBaselineReset, 8
  49              	CapSense_1_lowBaselineReset:
  50 0000 05       		.byte	5
  51 0001 05       		.byte	5
  52 0002 05       		.byte	5
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 2


  53 0003 05       		.byte	5
  54 0004 05       		.byte	5
  55 0005 05       		.byte	5
  56 0006 05       		.byte	5
  57 0007 05       		.byte	5
  58              		.global	CapSense_1_enableRawFilters
  59              		.type	CapSense_1_enableRawFilters, %object
  60              		.size	CapSense_1_enableRawFilters, 1
  61              	CapSense_1_enableRawFilters:
  62 0008 01       		.byte	1
  63              		.global	CapSense_1_fingerThreshold
  64 0009 000000   		.section	.rodata
  65              		.align	2
  66              		.type	CapSense_1_fingerThreshold, %object
  67              		.size	CapSense_1_fingerThreshold, 8
  68              	CapSense_1_fingerThreshold:
  69 0000 64       		.byte	100
  70 0001 64       		.byte	100
  71 0002 64       		.byte	100
  72 0003 64       		.byte	100
  73 0004 64       		.byte	100
  74 0005 64       		.byte	100
  75 0006 64       		.byte	100
  76 0007 64       		.byte	100
  77              		.global	CapSense_1_noiseThreshold
  78              		.align	2
  79              		.type	CapSense_1_noiseThreshold, %object
  80              		.size	CapSense_1_noiseThreshold, 8
  81              	CapSense_1_noiseThreshold:
  82 0008 14       		.byte	20
  83 0009 14       		.byte	20
  84 000a 14       		.byte	20
  85 000b 14       		.byte	20
  86 000c 14       		.byte	20
  87 000d 14       		.byte	20
  88 000e 14       		.byte	20
  89 000f 14       		.byte	20
  90              		.global	CapSense_1_hysteresis
  91              		.align	2
  92              		.type	CapSense_1_hysteresis, %object
  93              		.size	CapSense_1_hysteresis, 8
  94              	CapSense_1_hysteresis:
  95 0010 0A       		.byte	10
  96 0011 0A       		.byte	10
  97 0012 0A       		.byte	10
  98 0013 0A       		.byte	10
  99 0014 0A       		.byte	10
 100 0015 0A       		.byte	10
 101 0016 0A       		.byte	10
 102 0017 0A       		.byte	10
 103              		.global	CapSense_1_debounce
 104              		.align	2
 105              		.type	CapSense_1_debounce, %object
 106              		.size	CapSense_1_debounce, 8
 107              	CapSense_1_debounce:
 108 0018 05       		.byte	5
 109 0019 05       		.byte	5
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 3


 110 001a 05       		.byte	5
 111 001b 05       		.byte	5
 112 001c 05       		.byte	5
 113 001d 05       		.byte	5
 114 001e 05       		.byte	5
 115 001f 05       		.byte	5
 116              		.bss
 117 0021 000000   		.align	2
 118              	CapSense_1_debounceCounter:
 119 0024 00000000 		.space	9
 119      00000000 
 119      00
 120              		.global	CapSense_1_rawDataIndex
 121 002d 000000   		.section	.rodata
 122              		.align	2
 123              		.type	CapSense_1_rawDataIndex, %object
 124              		.size	CapSense_1_rawDataIndex, 8
 125              	CapSense_1_rawDataIndex:
 126 0020 00       		.byte	0
 127 0021 01       		.byte	1
 128 0022 02       		.byte	2
 129 0023 03       		.byte	3
 130 0024 04       		.byte	4
 131 0025 05       		.byte	5
 132 0026 06       		.byte	6
 133 0027 07       		.byte	7
 134              		.global	CapSense_1_numberOfSensors
 135              		.align	2
 136              		.type	CapSense_1_numberOfSensors, %object
 137              		.size	CapSense_1_numberOfSensors, 8
 138              	CapSense_1_numberOfSensors:
 139 0028 01       		.byte	1
 140 0029 01       		.byte	1
 141 002a 01       		.byte	1
 142 002b 01       		.byte	1
 143 002c 01       		.byte	1
 144 002d 01       		.byte	1
 145 002e 01       		.byte	1
 146 002f 01       		.byte	1
 147              		.section	.text.CapSense_1_BaseInit,"ax",%progbits
 148              		.align	2
 149              		.global	CapSense_1_BaseInit
 150              		.code	16
 151              		.thumb_func
 152              		.type	CapSense_1_BaseInit, %function
 153              	CapSense_1_BaseInit:
 154              	.LFB35:
 155              		.file 1 "Generated_Source\\PSoC4\\CapSense_1_CSHL.c"
   1:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * File Name: CapSense_1_CSHL.c
   3:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Version 2.40
   4:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
   5:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Description:
   6:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
   9:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Note:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 4


  10:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
  11:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  18:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #include "CapSense_1_CSHL.h"
  19:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #include "CapSense_1_PVT.h"
  20:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  21:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /* SmartSense functions */
  22:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)
  23:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     extern void CapSense_1_UpdateThresholds(uint32 sensor);
  24:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO) */
  25:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  26:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /* Storage of filters data */
  27:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)) || \
  28:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER)) )
  29:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  30:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_rawFilterData1[CapSense_1_TOTAL_SENSOR_COUNT];
  31:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_rawFilterData2[CapSense_1_TOTAL_SENSOR_COUNT];
  32:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  33:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #elif ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER))   || \
  34:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER))   || \
  35:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER)) || \
  36:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER))   || \
  37:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER)) )
  38:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  39:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_rawFilterData1[CapSense_1_TOTAL_SENSOR_COUNT];
  40:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif  /* ( (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER) || \
  41:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         *    (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER) )
  42:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         */
  43:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  44:Generated_Source\PSoC4/CapSense_1_CSHL.c **** extern uint16 CapSense_1_sensorRaw[CapSense_1_TOTAL_SENSOR_COUNT];
  45:Generated_Source\PSoC4/CapSense_1_CSHL.c **** extern uint8 CapSense_1_sensorEnableMask[CapSense_1_TOTAL_SENSOR_MASK];
  46:Generated_Source\PSoC4/CapSense_1_CSHL.c **** extern const uint8 CapSense_1_widgetNumber[CapSense_1_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  48:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
  49:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     extern uint32 CapSense_1_widgetResolution[CapSense_1_RESOLUTIONS_TBL_SIZE];
  50:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
  51:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  52:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_sensorBaseline[CapSense_1_TOTAL_SENSOR_COUNT] = {0u};
  53:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_sensorBaselineLow[CapSense_1_TOTAL_SENSOR_COUNT] = {0u};
  54:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_sensorSignal[CapSense_1_TOTAL_SENSOR_COUNT] = {0u};
  55:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_sensorOnMask[CapSense_1_TOTAL_SENSOR_MASK] = {0u};
  56:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  57:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_lowBaselineResetCnt[CapSense_1_TOTAL_SENSOR_COUNT];
  58:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_lowBaselineReset[CapSense_1_TOTAL_SENSOR_COUNT] = {
  59:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     5u, 5u, 5u, 5u, 5u, 5u, 5u, 5u, 
  60:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  61:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  62:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  63:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  64:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)
  65:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     extern CapSense_1_CONFIG_TYPE_P4_v2_40 CapSense_1_config;
  66:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif  /* (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO) */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 5


  67:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  68:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_RAW_FILTER_MASK != 0u)
  69:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_enableRawFilters = CapSense_1_RAW_FILTERS_ENABLED;
  70:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif  /* (CapSense_1_RAW_FILTER_MASK != 0u) */
  71:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  72:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /* Generated by Customizer */
  73:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_fingerThreshold[] = {
  74:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     100u, 100u, 100u, 100u, 100u, 100u, 100u, 100u, 
  75:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  76:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  77:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_noiseThreshold[] = {
  78:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     20u, 20u, 20u, 20u, 20u, 20u, 20u, 20u, 
  79:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  80:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  81:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_hysteresis[] = {
  82:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     10u, 10u, 10u, 10u, 10u, 10u, 10u, 10u, 
  83:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  84:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  85:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_debounce[] = {
  86:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     5u, 5u, 5u, 5u, 5u, 5u, 5u, 5u, 
  87:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  88:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  89:Generated_Source\PSoC4/CapSense_1_CSHL.c **** static uint8 CapSense_1_debounceCounter[] = {
  90:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 0u, 
  91:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
  92:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
  93:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_rawDataIndex[] = {
  94:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     0u, /* ProximitySensor0__PROX */
  95:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor1__PROX */
  96:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     2u, /* ProximitySensor2__PROX */
  97:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     3u, /* ProximitySensor3__PROX */
  98:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     4u, /* ProximitySensor4__PROX */
  99:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     5u, /* ProximitySensor5__PROX */
 100:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     6u, /* ProximitySensor6__PROX */
 101:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     7u, /* ProximitySensor7__PROX */
 102:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
 103:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 104:Generated_Source\PSoC4/CapSense_1_CSHL.c **** const uint8 CapSense_1_numberOfSensors[] = {
 105:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor0__PROX */
 106:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor1__PROX */
 107:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor2__PROX */
 108:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor3__PROX */
 109:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor4__PROX */
 110:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor5__PROX */
 111:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor6__PROX */
 112:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     1u, /* ProximitySensor7__PROX */
 113:Generated_Source\PSoC4/CapSense_1_CSHL.c **** };
 114:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 115:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 116:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 117:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 118:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 119:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_BaseInit
 120:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 121:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 122:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 123:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Loads the CapSense_1_sensorBaseline[sensor] array element with an
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 6


 124:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  initial value which is equal to the raw count value.
 125:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Resets to zero CapSense_1_sensorBaselineLow[sensor] and
 126:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[sensor] array element.
 127:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Loads the CapSense_1_rawFilterData2[sensor] and
 128:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData2[sensor] array element with an
 129:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  initial value which is equal to the raw count value if the raw data filter is enabled.
 130:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 131:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 132:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 133:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 134:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 135:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 136:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 137:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 138:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[]    - used to store the baseline value.
 139:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaselineLow[] - used to store the fraction byte of
 140:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the baseline value.
 141:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[]      - used to store a difference between
 142:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the current value of raw data and the previous value of the baseline.
 143:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData1[]    - used to store a previous sample of
 144:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  any enabled raw data filter.
 145:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData2[]    - used to store before a previous sample
 146:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  of the enabled raw data filter. Required only for median or average filters.
 147:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 148:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 149:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 150:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 151:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 152:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_BaseInit(uint32 sensor)
 153:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 156              		.loc 1 153 0
 157              		.cfi_startproc
 158 0000 80B5     		push	{r7, lr}
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 7, -8
 161              		.cfi_offset 14, -4
 162 0002 84B0     		sub	sp, sp, #16
 163              		.cfi_def_cfa_offset 24
 164 0004 00AF     		add	r7, sp, #0
 165              		.cfi_def_cfa_register 7
 166 0006 7860     		str	r0, [r7, #4]
 154:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if ((CapSense_1_TOTAL_BUTTONS_COUNT) || (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT) || \
 155:Generated_Source\PSoC4/CapSense_1_CSHL.c ****          (CapSense_1_TOTAL_GENERICS_COUNT))
 156:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 widget = CapSense_1_widgetNumber[sensor];
 167              		.loc 1 156 0
 168 0008 0F23     		mov	r3, #15
 169 000a FB18     		add	r3, r7, r3
 170 000c 1549     		ldr	r1, .L2
 171 000e 7A68     		ldr	r2, [r7, #4]
 172 0010 8A18     		add	r2, r1, r2
 173 0012 1278     		ldrb	r2, [r2]
 174 0014 1A70     		strb	r2, [r3]
 157:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* ((CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT)) 
 158:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 159:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT)
 160:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 debounceIndex;
 161:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT) */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 7


 162:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 163:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 164:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 165:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(widget < CapSense_1_END_OF_WIDGETS_INDEX)
 166:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 167:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 168:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 169:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Initialize Baseline */
 170:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorBaseline[sensor] = CapSense_1_sensorRaw[sensor];
 175              		.loc 1 170 0
 176 0016 144B     		ldr	r3, .L2+4
 177 0018 7A68     		ldr	r2, [r7, #4]
 178 001a 5200     		lsl	r2, r2, #1
 179 001c D15A     		ldrh	r1, [r2, r3]
 180 001e 134B     		ldr	r3, .L2+8
 181 0020 7A68     		ldr	r2, [r7, #4]
 182 0022 5200     		lsl	r2, r2, #1
 183 0024 D152     		strh	r1, [r2, r3]
 171:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorBaselineLow[sensor] = 0u;
 184              		.loc 1 171 0
 185 0026 124A     		ldr	r2, .L2+12
 186 0028 7B68     		ldr	r3, [r7, #4]
 187 002a D318     		add	r3, r2, r3
 188 002c 0022     		mov	r2, #0
 189 002e 1A70     		strb	r2, [r3]
 172:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorSignal[sensor] = 0u;
 190              		.loc 1 172 0
 191 0030 104A     		ldr	r2, .L2+16
 192 0032 7B68     		ldr	r3, [r7, #4]
 193 0034 D318     		add	r3, r2, r3
 194 0036 0022     		mov	r2, #0
 195 0038 1A70     		strb	r2, [r3]
 173:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 174:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_debounceCounter[widget] =  CapSense_1_debounce[widget];
 196              		.loc 1 174 0
 197 003a 0F23     		mov	r3, #15
 198 003c FB18     		add	r3, r7, r3
 199 003e 1B78     		ldrb	r3, [r3]
 200 0040 0F22     		mov	r2, #15
 201 0042 BA18     		add	r2, r7, r2
 202 0044 1278     		ldrb	r2, [r2]
 203 0046 0C49     		ldr	r1, .L2+20
 204 0048 895C     		ldrb	r1, [r1, r2]
 205 004a 0C4A     		ldr	r2, .L2+24
 206 004c D154     		strb	r1, [r2, r3]
 175:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 176:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 177:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if ((0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)) ||\
 178:Generated_Source\PSoC4/CapSense_1_CSHL.c ****          (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER)))
 179:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 180:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_rawFilterData1[sensor] = CapSense_1_sensorRaw[sensor];
 181:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_rawFilterData2[sensor] = CapSense_1_sensorRaw[sensor];
 182:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 183:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #elif ((CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER) ||\
 184:Generated_Source\PSoC4/CapSense_1_CSHL.c ****            (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER) ||\
 185:Generated_Source\PSoC4/CapSense_1_CSHL.c ****            (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER) ||\
 186:Generated_Source\PSoC4/CapSense_1_CSHL.c ****            (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER) ||\
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 8


 187:Generated_Source\PSoC4/CapSense_1_CSHL.c ****            (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER))
 188:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 189:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_rawFilterData1[sensor] = CapSense_1_sensorRaw[sensor];
 207              		.loc 1 189 0
 208 004e 064B     		ldr	r3, .L2+4
 209 0050 7A68     		ldr	r2, [r7, #4]
 210 0052 5200     		lsl	r2, r2, #1
 211 0054 D15A     		ldrh	r1, [r2, r3]
 212 0056 0A4B     		ldr	r3, .L2+28
 213 0058 7A68     		ldr	r2, [r7, #4]
 214 005a 5200     		lsl	r2, r2, #1
 215 005c D152     		strh	r1, [r2, r3]
 190:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 191:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #else
 192:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* No Raw filters */
 193:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* ((CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER) || \
 194:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             *   (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER))
 195:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             */
 196:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 197:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 198:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 199:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 200:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 201:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 216              		.loc 1 201 0
 217 005e BD46     		mov	sp, r7
 218 0060 04B0     		add	sp, sp, #16
 219              		@ sp needed
 220 0062 80BD     		pop	{r7, pc}
 221              	.L3:
 222              		.align	2
 223              	.L2:
 224 0064 00000000 		.word	CapSense_1_widgetNumber
 225 0068 00000000 		.word	CapSense_1_sensorRaw
 226 006c 00000000 		.word	CapSense_1_sensorBaseline
 227 0070 00000000 		.word	CapSense_1_sensorBaselineLow
 228 0074 00000000 		.word	CapSense_1_sensorSignal
 229 0078 00000000 		.word	CapSense_1_debounce
 230 007c 24000000 		.word	CapSense_1_debounceCounter
 231 0080 00000000 		.word	CapSense_1_rawFilterData1
 232              		.cfi_endproc
 233              	.LFE35:
 234              		.size	CapSense_1_BaseInit, .-CapSense_1_BaseInit
 235              		.section	.text.CapSense_1_InitializeSensorBaseline,"ax",%progbits
 236              		.align	2
 237              		.global	CapSense_1_InitializeSensorBaseline
 238              		.code	16
 239              		.thumb_func
 240              		.type	CapSense_1_InitializeSensorBaseline, %function
 241              	CapSense_1_InitializeSensorBaseline:
 242              	.LFB36:
 202:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 203:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 204:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 205:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_InitializeSensorBaseline
 206:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 207:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 9


 208:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 209:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Loads the CapSense_1_sensorBaseline[sensor] array element with an
 210:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or a pair
 211:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the
 212:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if
 213:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  enabled.
 214:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 215:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 216:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 217:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 218:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 219:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 220:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 221:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 222:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 223:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 224:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 225:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 226:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 227:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 228:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_InitializeSensorBaseline(uint32 sensor)
 229:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 243              		.loc 1 229 0
 244              		.cfi_startproc
 245 0000 80B5     		push	{r7, lr}
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 7, -8
 248              		.cfi_offset 14, -4
 249 0002 82B0     		sub	sp, sp, #8
 250              		.cfi_def_cfa_offset 16
 251 0004 00AF     		add	r7, sp, #0
 252              		.cfi_def_cfa_register 7
 253 0006 7860     		str	r0, [r7, #4]
 230:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Scan sensor */
 231:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_ScanSensor(sensor);
 254              		.loc 1 231 0
 255 0008 7B68     		ldr	r3, [r7, #4]
 256 000a 181C     		mov	r0, r3
 257 000c FFF7FEFF 		bl	CapSense_1_ScanSensor
 232:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(CapSense_1_IsBusy() != 0u)
 258              		.loc 1 232 0
 259 0010 C046     		mov	r8, r8
 260              	.L5:
 261              		.loc 1 232 0 is_stmt 0 discriminator 1
 262 0012 FFF7FEFF 		bl	CapSense_1_IsBusy
 263 0016 031E     		sub	r3, r0, #0
 264 0018 FBD1     		bne	.L5
 233:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 234:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Wait while sensor is busy */
 235:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 236:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 237:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Initialize Baseline, Signal and debounce counters */
 238:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_BaseInit(sensor);
 265              		.loc 1 238 0 is_stmt 1
 266 001a 7B68     		ldr	r3, [r7, #4]
 267 001c 181C     		mov	r0, r3
 268 001e FFF7FEFF 		bl	CapSense_1_BaseInit
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 10


 239:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 269              		.loc 1 239 0
 270 0022 BD46     		mov	sp, r7
 271 0024 02B0     		add	sp, sp, #8
 272              		@ sp needed
 273 0026 80BD     		pop	{r7, pc}
 274              		.cfi_endproc
 275              	.LFE36:
 276              		.size	CapSense_1_InitializeSensorBaseline, .-CapSense_1_InitializeSensorBaseline
 277              		.section	.text.CapSense_1_InitializeAllBaselines,"ax",%progbits
 278              		.align	2
 279              		.global	CapSense_1_InitializeAllBaselines
 280              		.code	16
 281              		.thumb_func
 282              		.type	CapSense_1_InitializeAllBaselines, %function
 283              	CapSense_1_InitializeAllBaselines:
 284              	.LFB37:
 240:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 241:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 242:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 243:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_InitializeAllBaselines
 244:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 245:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 246:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 247:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Uses the CapSense_1_InitializeSensorBaseline function to load the
 248:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[] array with an initial values by scanning
 249:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  all the sensors. The raw count values are copied into the baseline array for
 250:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  all the sensors. The raw data filters are initialized if enabled.
 251:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 252:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 253:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 254:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 255:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 256:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 257:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 258:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 259:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 260:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 261:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 262:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 263:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 264:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 265:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_InitializeAllBaselines(void)
 266:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 285              		.loc 1 266 0
 286              		.cfi_startproc
 287 0000 80B5     		push	{r7, lr}
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 7, -8
 290              		.cfi_offset 14, -4
 291 0002 82B0     		sub	sp, sp, #8
 292              		.cfi_def_cfa_offset 16
 293 0004 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
 267:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 i;
 268:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 269:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = 0u; i < CapSense_1_TOTAL_SCANSLOT_COUNT; i++)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 11


 295              		.loc 1 269 0
 296 0006 0023     		mov	r3, #0
 297 0008 7B60     		str	r3, [r7, #4]
 298 000a 06E0     		b	.L7
 299              	.L8:
 270:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 271:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_InitializeSensorBaseline(i);
 300              		.loc 1 271 0 discriminator 3
 301 000c 7B68     		ldr	r3, [r7, #4]
 302 000e 181C     		mov	r0, r3
 303 0010 FFF7FEFF 		bl	CapSense_1_InitializeSensorBaseline
 269:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 304              		.loc 1 269 0 discriminator 3
 305 0014 7B68     		ldr	r3, [r7, #4]
 306 0016 0133     		add	r3, r3, #1
 307 0018 7B60     		str	r3, [r7, #4]
 308              	.L7:
 269:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 309              		.loc 1 269 0 is_stmt 0 discriminator 1
 310 001a 7B68     		ldr	r3, [r7, #4]
 311 001c 072B     		cmp	r3, #7
 312 001e F5D9     		bls	.L8
 272:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 273:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 313              		.loc 1 273 0 is_stmt 1
 314 0020 BD46     		mov	sp, r7
 315 0022 02B0     		add	sp, sp, #8
 316              		@ sp needed
 317 0024 80BD     		pop	{r7, pc}
 318              		.cfi_endproc
 319              	.LFE37:
 320              		.size	CapSense_1_InitializeAllBaselines, .-CapSense_1_InitializeAllBaselines
 321 0026 C046     		.section	.text.CapSense_1_InitializeEnabledBaselines,"ax",%progbits
 322              		.align	2
 323              		.global	CapSense_1_InitializeEnabledBaselines
 324              		.code	16
 325              		.thumb_func
 326              		.type	CapSense_1_InitializeEnabledBaselines, %function
 327              	CapSense_1_InitializeEnabledBaselines:
 328              	.LFB38:
 274:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 275:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 276:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 277:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_InitializeEnabledBaselines
 278:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 279:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 280:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 281:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Scans all the enabled widgets and the raw count values are copied into the
 282:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  baseline array for all the sensors enabled in the scanning process. The baselines
 283:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  are initialized with zero values for sensors disabled from the scanning process.
 284:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  The raw data filters are initialized if enabled.
 285:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 286:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 287:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 288:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 289:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 290:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 12


 291:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 292:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 293:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorRaw[] - used to store the sensors raw data.
 294:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[ ] - used to store bit masks of the enabled sensors.
 295:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 296:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 297:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 298:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 299:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 300:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_InitializeEnabledBaselines(void)
 301:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 329              		.loc 1 301 0
 330              		.cfi_startproc
 331 0000 80B5     		push	{r7, lr}
 332              		.cfi_def_cfa_offset 8
 333              		.cfi_offset 7, -8
 334              		.cfi_offset 14, -4
 335 0002 82B0     		sub	sp, sp, #8
 336              		.cfi_def_cfa_offset 16
 337 0004 00AF     		add	r7, sp, #0
 338              		.cfi_def_cfa_register 7
 302:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 i;
 303:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 isSensorEnabled;
 304:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 305:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_ScanEnabledWidgets();
 339              		.loc 1 305 0
 340 0006 FFF7FEFF 		bl	CapSense_1_ScanEnabledWidgets
 306:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(CapSense_1_IsBusy() != 0u)
 341              		.loc 1 306 0
 342 000a C046     		mov	r8, r8
 343              	.L10:
 344              		.loc 1 306 0 is_stmt 0 discriminator 1
 345 000c FFF7FEFF 		bl	CapSense_1_IsBusy
 346 0010 031E     		sub	r3, r0, #0
 347 0012 FBD1     		bne	.L10
 307:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 308:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Wait while sensor is busy */
 309:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 310:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 311:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = 0u; i < CapSense_1_TOTAL_SENSOR_COUNT; i++)
 348              		.loc 1 311 0 is_stmt 1
 349 0014 0023     		mov	r3, #0
 350 0016 7B60     		str	r3, [r7, #4]
 351 0018 11E0     		b	.L11
 352              	.L13:
 312:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 313:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         isSensorEnabled = CapSense_1_GetBitValue(CapSense_1_sensorEnableMask, i);
 353              		.loc 1 313 0
 354 001a 0C4A     		ldr	r2, .L14
 355 001c 7B68     		ldr	r3, [r7, #4]
 356 001e 101C     		mov	r0, r2
 357 0020 191C     		mov	r1, r3
 358 0022 FFF7FEFF 		bl	CapSense_1_GetBitValue
 359 0026 031C     		mov	r3, r0
 360 0028 3B60     		str	r3, [r7]
 314:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 315:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 13


 316:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(isSensorEnabled != 0u)
 361              		.loc 1 316 0
 362 002a 3B68     		ldr	r3, [r7]
 363 002c 002B     		cmp	r3, #0
 364 002e 03D0     		beq	.L12
 317:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 318:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Initialize baselines */
 319:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_BaseInit(i);
 365              		.loc 1 319 0
 366 0030 7B68     		ldr	r3, [r7, #4]
 367 0032 181C     		mov	r0, r3
 368 0034 FFF7FEFF 		bl	CapSense_1_BaseInit
 369              	.L12:
 311:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 370              		.loc 1 311 0 discriminator 2
 371 0038 7B68     		ldr	r3, [r7, #4]
 372 003a 0133     		add	r3, r3, #1
 373 003c 7B60     		str	r3, [r7, #4]
 374              	.L11:
 311:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 375              		.loc 1 311 0 is_stmt 0 discriminator 1
 376 003e 7B68     		ldr	r3, [r7, #4]
 377 0040 072B     		cmp	r3, #7
 378 0042 EAD9     		bls	.L13
 320:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 321:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 322:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 379              		.loc 1 322 0 is_stmt 1
 380 0044 BD46     		mov	sp, r7
 381 0046 02B0     		add	sp, sp, #8
 382              		@ sp needed
 383 0048 80BD     		pop	{r7, pc}
 384              	.L15:
 385 004a C046     		.align	2
 386              	.L14:
 387 004c 00000000 		.word	CapSense_1_sensorEnableMask
 388              		.cfi_endproc
 389              	.LFE38:
 390              		.size	CapSense_1_InitializeEnabledBaselines, .-CapSense_1_InitializeEnabledBaselines
 391              		.section	.text.CapSense_1_UpdateBaselineNoThreshold,"ax",%progbits
 392              		.align	2
 393              		.global	CapSense_1_UpdateBaselineNoThreshold
 394              		.code	16
 395              		.thumb_func
 396              		.type	CapSense_1_UpdateBaselineNoThreshold, %function
 397              	CapSense_1_UpdateBaselineNoThreshold:
 398              	.LFB39:
 323:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 324:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 325:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 326:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_UpdateBaselineNoThreshold
 327:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 328:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 329:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 330:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Updates the CapSense_1_sensorBaseline[sensor] array element using the
 331:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by
 332:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 14


 333:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  it in CapSense_1_sensorSignal[sensor].
 334:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold.
 335:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating; baseline is loaded
 336:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  with a raw count value if a signal is greater than zero and if signal is less
 337:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  than noise threshold.
 338:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline
 339:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  calculation.
 340:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 341:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API does not update the thresholds in the Smartsense Mode.
 342:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 343:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 344:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 345:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 346:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 347:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 348:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 349:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 350:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_widgetNumber[]  - stores widget numbers.
 351:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[]    - used to store baseline value.
 352:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaselineLow[] - used to store fraction byte of
 353:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  baseline value.
 354:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[]      - used to store difference between
 355:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  current value of raw data and previous value of baseline.
 356:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData1[]    - used to store previous sample of
 357:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  any enabled raw data filter.
 358:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_rawFilterData2[]    - used to store before previous sample
 359:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 360:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 361:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 362:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 363:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 364:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_UpdateBaselineNoThreshold(uint32 sensor)
 366:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 399              		.loc 1 366 0
 400              		.cfi_startproc
 401 0000 90B5     		push	{r4, r7, lr}
 402              		.cfi_def_cfa_offset 12
 403              		.cfi_offset 4, -12
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 406 0002 87B0     		sub	sp, sp, #28
 407              		.cfi_def_cfa_offset 40
 408 0004 00AF     		add	r7, sp, #0
 409              		.cfi_def_cfa_register 7
 410 0006 7860     		str	r0, [r7, #4]
 367:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 calc;
 368:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 sign;
 369:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 tempRaw;
 370:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 filteredRawData;
 371:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 widget = CapSense_1_widgetNumber[sensor];
 411              		.loc 1 371 0
 412 0008 0F23     		mov	r3, #15
 413 000a FB18     		add	r3, r7, r3
 414 000c 7349     		ldr	r1, .L29
 415 000e 7A68     		ldr	r2, [r7, #4]
 416 0010 8A18     		add	r2, r1, r2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 15


 417 0012 1278     		ldrb	r2, [r2]
 418 0014 1A70     		strb	r2, [r3]
 372:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 noiseThreshold;
 373:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 374:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 375:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 376:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(widget < CapSense_1_END_OF_WIDGETS_INDEX)
 377:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 378:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 379:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 380:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     noiseThreshold = CapSense_1_noiseThreshold[widget];
 419              		.loc 1 380 0
 420 0016 0F23     		mov	r3, #15
 421 0018 FB18     		add	r3, r7, r3
 422 001a 1A78     		ldrb	r2, [r3]
 423 001c 0E23     		mov	r3, #14
 424 001e FB18     		add	r3, r7, r3
 425 0020 6F49     		ldr	r1, .L29+4
 426 0022 8A5C     		ldrb	r2, [r1, r2]
 427 0024 1A70     		strb	r2, [r3]
 381:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     filteredRawData = CapSense_1_sensorRaw[sensor];
 428              		.loc 1 381 0
 429 0026 1023     		mov	r3, #16
 430 0028 FB18     		add	r3, r7, r3
 431 002a 6E4A     		ldr	r2, .L29+8
 432 002c 7968     		ldr	r1, [r7, #4]
 433 002e 4900     		lsl	r1, r1, #1
 434 0030 8A5A     		ldrh	r2, [r1, r2]
 435 0032 1A80     		strh	r2, [r3]
 382:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 383:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_RAW_FILTER_MASK != 0u)
 384:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if(CapSense_1_enableRawFilters != 0u)
 436              		.loc 1 384 0
 437 0034 6C4B     		ldr	r3, .L29+12
 438 0036 1B78     		ldrb	r3, [r3]
 439 0038 002B     		cmp	r3, #0
 440 003a 15D0     		beq	.L17
 385:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 386:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)
 387:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             tempRaw = filteredRawData;
 388:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_MedianFilter(filteredRawData, CapSense_1_rawFilterData1[se
 389:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                             CapSense_1_rawFilterData2[sensor]);
 390:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData2[sensor] = CapSense_1_rawFilterData1[sensor];
 391:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = tempRaw;
 392:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 393:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER)
 394:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             tempRaw = filteredRawData;
 395:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_AveragingFilter(filteredRawData, CapSense_1_rawFilterData1
 396:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                CapSense_1_rawFilterData2[sensor]);
 397:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData2[sensor] = CapSense_1_rawFilterData1[sensor];
 398:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = tempRaw;
 399:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 400:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER)
 401:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_IIR2Filter(filteredRawData, CapSense_1_rawFilterData1[sens
 402:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 403:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 404:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 16


 405:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_IIR4Filter(filteredRawData, CapSense_1_rawFilterData1[sens
 441              		.loc 1 405 0
 442 003c 6B4B     		ldr	r3, .L29+16
 443 003e 7A68     		ldr	r2, [r7, #4]
 444 0040 5200     		lsl	r2, r2, #1
 445 0042 D25A     		ldrh	r2, [r2, r3]
 446 0044 1023     		mov	r3, #16
 447 0046 FC18     		add	r4, r7, r3
 448 0048 1023     		mov	r3, #16
 449 004a FB18     		add	r3, r7, r3
 450 004c 1B88     		ldrh	r3, [r3]
 451 004e 181C     		mov	r0, r3
 452 0050 111C     		mov	r1, r2
 453 0052 FFF7FEFF 		bl	CapSense_1_IIR4Filter
 454 0056 031C     		mov	r3, r0
 455 0058 2380     		strh	r3, [r4]
 406:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 456              		.loc 1 406 0
 457 005a 644B     		ldr	r3, .L29+16
 458 005c 7A68     		ldr	r2, [r7, #4]
 459 005e 5200     		lsl	r2, r2, #1
 460 0060 1021     		mov	r1, #16
 461 0062 7918     		add	r1, r7, r1
 462 0064 0988     		ldrh	r1, [r1]
 463 0066 D152     		strh	r1, [r2, r3]
 464              	.L17:
 407:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 408:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER)
 409:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_JitterFilter(filteredRawData, CapSense_1_rawFilterData1[se
 410:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 411:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 412:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER)
 413:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_IIR8Filter(filteredRawData, CapSense_1_rawFilterData1[sens
 414:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 415:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 416:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #elif (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER)
 417:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             filteredRawData = CapSense_1_IIR16Filter(filteredRawData, CapSense_1_rawFilterData1[sen
 418:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_rawFilterData1[sensor] = filteredRawData;
 419:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 420:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
 421:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* No Raw filters */
 422:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif  /* (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER) */
 423:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 424:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* (CapSense_1_RAW_FILTER_MASK != 0u) */
 425:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 426:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)
 427:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         MeasureNoiseEnvelope_P4_v2_40(&CapSense_1_config, (uint8)sensor, CapSense_1_sensorRaw);
 428:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO) */
 429:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 430:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Baseline calculation */
 431:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 432:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if(filteredRawData >= CapSense_1_sensorBaseline[sensor])
 465              		.loc 1 432 0
 466 0068 614B     		ldr	r3, .L29+20
 467 006a 7A68     		ldr	r2, [r7, #4]
 468 006c 5200     		lsl	r2, r2, #1
 469 006e D35A     		ldrh	r3, [r2, r3]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 17


 470 0070 1022     		mov	r2, #16
 471 0072 BA18     		add	r2, r7, r2
 472 0074 1288     		ldrh	r2, [r2]
 473 0076 9A42     		cmp	r2, r3
 474 0078 12D3     		bcc	.L18
 433:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 434:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_lowBaselineResetCnt[sensor] = 0u;
 475              		.loc 1 434 0
 476 007a 5E4A     		ldr	r2, .L29+24
 477 007c 7B68     		ldr	r3, [r7, #4]
 478 007e D318     		add	r3, r2, r3
 479 0080 0022     		mov	r2, #0
 480 0082 1A70     		strb	r2, [r3]
 435:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tempRaw = filteredRawData - CapSense_1_sensorBaseline[sensor];
 481              		.loc 1 435 0
 482 0084 5A4B     		ldr	r3, .L29+20
 483 0086 7A68     		ldr	r2, [r7, #4]
 484 0088 5200     		lsl	r2, r2, #1
 485 008a D25A     		ldrh	r2, [r2, r3]
 486 008c 1223     		mov	r3, #18
 487 008e FB18     		add	r3, r7, r3
 488 0090 1021     		mov	r1, #16
 489 0092 7918     		add	r1, r7, r1
 490 0094 0988     		ldrh	r1, [r1]
 491 0096 8A1A     		sub	r2, r1, r2
 492 0098 1A80     		strh	r2, [r3]
 436:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         sign = 1u;    /* Positive difference - Calculate the Signal */
 493              		.loc 1 436 0
 494 009a 0123     		mov	r3, #1
 495 009c 7B61     		str	r3, [r7, #20]
 496 009e 0CE0     		b	.L19
 497              	.L18:
 437:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 438:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     else
 439:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 440:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tempRaw = CapSense_1_sensorBaseline[sensor] - filteredRawData;
 498              		.loc 1 440 0
 499 00a0 534B     		ldr	r3, .L29+20
 500 00a2 7A68     		ldr	r2, [r7, #4]
 501 00a4 5200     		lsl	r2, r2, #1
 502 00a6 D15A     		ldrh	r1, [r2, r3]
 503 00a8 1223     		mov	r3, #18
 504 00aa FB18     		add	r3, r7, r3
 505 00ac 1022     		mov	r2, #16
 506 00ae BA18     		add	r2, r7, r2
 507 00b0 1288     		ldrh	r2, [r2]
 508 00b2 8A1A     		sub	r2, r1, r2
 509 00b4 1A80     		strh	r2, [r3]
 441:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         sign = 0u;    /* Negative difference - Do NOT calculate the Signal */
 510              		.loc 1 441 0
 511 00b6 0023     		mov	r3, #0
 512 00b8 7B61     		str	r3, [r7, #20]
 513              	.L19:
 442:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 443:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 444:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
 445:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if((sign == 0u) && (tempRaw > (uint16) CapSense_1_negativeNoiseThreshold[widget]))
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 18


 446:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #else
 447:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if((sign == 0u) && (tempRaw > (uint16) CapSense_1_NEGATIVE_NOISE_THRESHOLD))
 514              		.loc 1 447 0
 515 00ba 7B69     		ldr	r3, [r7, #20]
 516 00bc 002B     		cmp	r3, #0
 517 00be 24D1     		bne	.L20
 518              		.loc 1 447 0 is_stmt 0 discriminator 1
 519 00c0 1223     		mov	r3, #18
 520 00c2 FB18     		add	r3, r7, r3
 521 00c4 1B88     		ldrh	r3, [r3]
 522 00c6 142B     		cmp	r3, #20
 523 00c8 1FD9     		bls	.L20
 448:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
 449:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 450:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(CapSense_1_lowBaselineResetCnt[sensor] >= CapSense_1_lowBaselineReset[sensor])
 524              		.loc 1 450 0 is_stmt 1
 525 00ca 4A4A     		ldr	r2, .L29+24
 526 00cc 7B68     		ldr	r3, [r7, #4]
 527 00ce D318     		add	r3, r2, r3
 528 00d0 1A78     		ldrb	r2, [r3]
 529 00d2 4949     		ldr	r1, .L29+28
 530 00d4 7B68     		ldr	r3, [r7, #4]
 531 00d6 CB18     		add	r3, r1, r3
 532 00d8 1B78     		ldrb	r3, [r3]
 533 00da 9A42     		cmp	r2, r3
 534 00dc 09D3     		bcc	.L21
 451:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 452:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_BaseInit(sensor);
 535              		.loc 1 452 0
 536 00de 7B68     		ldr	r3, [r7, #4]
 537 00e0 181C     		mov	r0, r3
 538 00e2 FFF7FEFF 		bl	CapSense_1_BaseInit
 453:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_lowBaselineResetCnt[sensor] = 0u;
 539              		.loc 1 453 0
 540 00e6 434A     		ldr	r2, .L29+24
 541 00e8 7B68     		ldr	r3, [r7, #4]
 542 00ea D318     		add	r3, r2, r3
 543 00ec 0022     		mov	r2, #0
 544 00ee 1A70     		strb	r2, [r3]
 450:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 545              		.loc 1 450 0
 546 00f0 4BE0     		b	.L23
 547              	.L21:
 454:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 455:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
 456:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 457:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_lowBaselineResetCnt[sensor]++;
 548              		.loc 1 457 0
 549 00f2 404A     		ldr	r2, .L29+24
 550 00f4 7B68     		ldr	r3, [r7, #4]
 551 00f6 D318     		add	r3, r2, r3
 552 00f8 1B78     		ldrb	r3, [r3]
 553 00fa 0133     		add	r3, r3, #1
 554 00fc D9B2     		uxtb	r1, r3
 555 00fe 3D4A     		ldr	r2, .L29+24
 556 0100 7B68     		ldr	r3, [r7, #4]
 557 0102 D318     		add	r3, r2, r3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 19


 558 0104 0A1C     		add	r2, r1, #0
 559 0106 1A70     		strb	r2, [r3]
 450:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 560              		.loc 1 450 0
 561 0108 3FE0     		b	.L23
 562              	.L20:
 458:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 459:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 460:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     else
 461:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 462:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_AUTO_RESET == CapSense_1_AUTO_RESET_DISABLE)
 463:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
 464:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Update Baseline if lower than noiseThreshold */
 465:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if ( (tempRaw <= noiseThreshold) ||
 466:Generated_Source\PSoC4/CapSense_1_CSHL.c ****              ((tempRaw < (uint16) CapSense_1_negativeNoiseThreshold[widget])
 467:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                && (sign == 0u)))
 468:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 469:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
 470:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Update Baseline if lower than noiseThreshold */
 471:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if ( (tempRaw <= noiseThreshold) ||
 563              		.loc 1 471 0
 564 010a 0E23     		mov	r3, #14
 565 010c FB18     		add	r3, r7, r3
 566 010e 1B78     		ldrb	r3, [r3]
 567 0110 9BB2     		uxth	r3, r3
 568 0112 1222     		mov	r2, #18
 569 0114 BA18     		add	r2, r7, r2
 570 0116 1288     		ldrh	r2, [r2]
 571 0118 9A42     		cmp	r2, r3
 572 011a 07D9     		bls	.L24
 573              		.loc 1 471 0 is_stmt 0 discriminator 1
 574 011c 1223     		mov	r3, #18
 575 011e FB18     		add	r3, r7, r3
 576 0120 1B88     		ldrh	r3, [r3]
 577 0122 132B     		cmp	r3, #19
 578 0124 31D8     		bhi	.L23
 472:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                  ((tempRaw < (uint16) CapSense_1_NEGATIVE_NOISE_THRESHOLD)
 473:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                    && (sign == 0u)))
 579              		.loc 1 473 0 is_stmt 1
 580 0126 7B69     		ldr	r3, [r7, #20]
 581 0128 002B     		cmp	r3, #0
 582 012a 2ED1     		bne	.L23
 583              	.L24:
 474:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 475:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
 476:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_AUTO_RESET == CapSense_1_AUTO_RESET_DISABLE) */
 477:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Make full Baseline 23 bits */
 478:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 calc = (uint32) CapSense_1_sensorBaseline[sensor] << 8u;
 584              		.loc 1 478 0
 585 012c 304B     		ldr	r3, .L29+20
 586 012e 7A68     		ldr	r2, [r7, #4]
 587 0130 5200     		lsl	r2, r2, #1
 588 0132 D35A     		ldrh	r3, [r2, r3]
 589 0134 1B02     		lsl	r3, r3, #8
 590 0136 BB60     		str	r3, [r7, #8]
 479:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 calc |= (uint32) CapSense_1_sensorBaselineLow[sensor];
 591              		.loc 1 479 0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 20


 592 0138 304A     		ldr	r2, .L29+32
 593 013a 7B68     		ldr	r3, [r7, #4]
 594 013c D318     		add	r3, r2, r3
 595 013e 1B78     		ldrb	r3, [r3]
 596 0140 1A1C     		mov	r2, r3
 597 0142 BB68     		ldr	r3, [r7, #8]
 598 0144 1343     		orr	r3, r2
 599 0146 BB60     		str	r3, [r7, #8]
 480:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 481:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Add Raw Data to Baseline */
 482:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 calc += filteredRawData;
 600              		.loc 1 482 0
 601 0148 1023     		mov	r3, #16
 602 014a FB18     		add	r3, r7, r3
 603 014c 1B88     		ldrh	r3, [r3]
 604 014e BA68     		ldr	r2, [r7, #8]
 605 0150 D318     		add	r3, r2, r3
 606 0152 BB60     		str	r3, [r7, #8]
 483:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 484:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Sub the high Baseline */
 485:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 calc -= CapSense_1_sensorBaseline[sensor];
 607              		.loc 1 485 0
 608 0154 264B     		ldr	r3, .L29+20
 609 0156 7A68     		ldr	r2, [r7, #4]
 610 0158 5200     		lsl	r2, r2, #1
 611 015a D35A     		ldrh	r3, [r2, r3]
 612 015c 1A1C     		mov	r2, r3
 613 015e BB68     		ldr	r3, [r7, #8]
 614 0160 9B1A     		sub	r3, r3, r2
 615 0162 BB60     		str	r3, [r7, #8]
 486:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 487:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Put Baseline and BaselineLow */
 488:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 616              		.loc 1 488 0
 617 0164 BB68     		ldr	r3, [r7, #8]
 618 0166 1B0A     		lsr	r3, r3, #8
 619 0168 99B2     		uxth	r1, r3
 620 016a 214B     		ldr	r3, .L29+20
 621 016c 7A68     		ldr	r2, [r7, #4]
 622 016e 5200     		lsl	r2, r2, #1
 623 0170 D152     		strh	r1, [r2, r3]
 489:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_sensorBaselineLow[sensor] = ((uint8) calc);
 624              		.loc 1 489 0
 625 0172 BB68     		ldr	r3, [r7, #8]
 626 0174 D9B2     		uxtb	r1, r3
 627 0176 214A     		ldr	r2, .L29+32
 628 0178 7B68     		ldr	r3, [r7, #4]
 629 017a D318     		add	r3, r2, r3
 630 017c 0A1C     		add	r2, r1, #0
 631 017e 1A70     		strb	r2, [r3]
 490:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 491:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_lowBaselineResetCnt[sensor] = 0u;
 632              		.loc 1 491 0
 633 0180 1C4A     		ldr	r2, .L29+24
 634 0182 7B68     		ldr	r3, [r7, #4]
 635 0184 D318     		add	r3, r2, r3
 636 0186 0022     		mov	r2, #0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 21


 637 0188 1A70     		strb	r2, [r3]
 638              	.L23:
 492:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_AUTO_RESET == CapSense_1_AUTO_RESET_DISABLE)
 493:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
 494:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_AUTO_RESET == CapSense_1_AUTO_RESET_DISABLE) */
 495:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 496:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 497:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Calculate Signal if positive difference > noiseThreshold */
 498:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (sign != 0u))
 639              		.loc 1 498 0
 640 018a 0E23     		mov	r3, #14
 641 018c FB18     		add	r3, r7, r3
 642 018e 1B78     		ldrb	r3, [r3]
 643 0190 9BB2     		uxth	r3, r3
 644 0192 1222     		mov	r2, #18
 645 0194 BA18     		add	r2, r7, r2
 646 0196 1288     		ldrh	r2, [r2]
 647 0198 9A42     		cmp	r2, r3
 648 019a 17D9     		bls	.L25
 649              		.loc 1 498 0 is_stmt 0 discriminator 1
 650 019c 7B69     		ldr	r3, [r7, #20]
 651 019e 002B     		cmp	r3, #0
 652 01a0 14D0     		beq	.L25
 499:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 500:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_SIGNAL_SIZE == CapSense_1_SIGNAL_SIZE_UINT8)
 501:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Over flow defence for uint8 */
 502:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if (tempRaw > 0xFFu)
 653              		.loc 1 502 0 is_stmt 1
 654 01a2 1223     		mov	r3, #18
 655 01a4 FB18     		add	r3, r7, r3
 656 01a6 1B88     		ldrh	r3, [r3]
 657 01a8 FF2B     		cmp	r3, #255
 658 01aa 05D9     		bls	.L26
 503:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 504:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_sensorSignal[sensor] = 0xFFu;
 659              		.loc 1 504 0
 660 01ac 144A     		ldr	r2, .L29+36
 661 01ae 7B68     		ldr	r3, [r7, #4]
 662 01b0 D318     		add	r3, r2, r3
 663 01b2 FF22     		mov	r2, #255
 664 01b4 1A70     		strb	r2, [r3]
 502:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 665              		.loc 1 502 0
 666 01b6 0EE0     		b	.L16
 667              	.L26:
 505:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
 506:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             else
 507:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 508:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_sensorSignal[sensor] = ((uint8) tempRaw);
 668              		.loc 1 508 0
 669 01b8 1223     		mov	r3, #18
 670 01ba FB18     		add	r3, r7, r3
 671 01bc 1B88     		ldrh	r3, [r3]
 672 01be D9B2     		uxtb	r1, r3
 673 01c0 0F4A     		ldr	r2, .L29+36
 674 01c2 7B68     		ldr	r3, [r7, #4]
 675 01c4 D318     		add	r3, r2, r3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 22


 676 01c6 0A1C     		add	r2, r1, #0
 677 01c8 1A70     		strb	r2, [r3]
 502:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
 678              		.loc 1 502 0
 679 01ca 04E0     		b	.L16
 680              	.L25:
 509:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
 510:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
 511:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_sensorSignal[sensor] = ((uint16) tempRaw);
 512:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif  /* (CapSense_1_SIGNAL_SIZE == CapSense_1_SIGNAL_SIZE_UINT8) */
 513:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 514:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     else
 515:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 516:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Signal is zero */
 517:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_sensorSignal[sensor] = 0u;
 681              		.loc 1 517 0
 682 01cc 0C4A     		ldr	r2, .L29+36
 683 01ce 7B68     		ldr	r3, [r7, #4]
 684 01d0 D318     		add	r3, r2, r3
 685 01d2 0022     		mov	r2, #0
 686 01d4 1A70     		strb	r2, [r3]
 687              	.L16:
 518:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 519:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 520:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 521:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 522:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 523:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 524:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 688              		.loc 1 524 0
 689 01d6 BD46     		mov	sp, r7
 690 01d8 07B0     		add	sp, sp, #28
 691              		@ sp needed
 692 01da 90BD     		pop	{r4, r7, pc}
 693              	.L30:
 694              		.align	2
 695              	.L29:
 696 01dc 00000000 		.word	CapSense_1_widgetNumber
 697 01e0 00000000 		.word	CapSense_1_noiseThreshold
 698 01e4 00000000 		.word	CapSense_1_sensorRaw
 699 01e8 00000000 		.word	CapSense_1_enableRawFilters
 700 01ec 00000000 		.word	CapSense_1_rawFilterData1
 701 01f0 00000000 		.word	CapSense_1_sensorBaseline
 702 01f4 00000000 		.word	CapSense_1_lowBaselineResetCnt
 703 01f8 00000000 		.word	CapSense_1_lowBaselineReset
 704 01fc 00000000 		.word	CapSense_1_sensorBaselineLow
 705 0200 00000000 		.word	CapSense_1_sensorSignal
 706              		.cfi_endproc
 707              	.LFE39:
 708              		.size	CapSense_1_UpdateBaselineNoThreshold, .-CapSense_1_UpdateBaselineNoThreshold
 709              		.section	.text.CapSense_1_UpdateSensorBaseline,"ax",%progbits
 710              		.align	2
 711              		.global	CapSense_1_UpdateSensorBaseline
 712              		.code	16
 713              		.thumb_func
 714              		.type	CapSense_1_UpdateSensorBaseline, %function
 715              	CapSense_1_UpdateSensorBaseline:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 23


 716              	.LFB40:
 525:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 526:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 527:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 528:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_UpdateSensorBaseline
 529:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 530:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 531:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 532:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Updates the CapSense_1_sensorBaseline[sensor] array element using the
 533:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by
 534:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 535:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  it in CapSense_1_sensorSignal[sensor].
 536:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the auto reset option is enabled, the baseline updated regards the noise threshold.
 537:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the auto reset option is disabled, the baseline stops updating.
 538:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Baseline is loaded with raw count value if a signal is greater than zero and
 539:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  if signal is less than noise threshold.
 540:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline
 541:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  calculation.
 542:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API updates the thresholds in the Smartsense Mode.
 543:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 544:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 545:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 546:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 547:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 548:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 549:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 550:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 551:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_widgetNumber[]  - stores widget numbers.
 552:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 553:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 554:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 555:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 556:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 557:Generated_Source\PSoC4/CapSense_1_CSHL.c ****  void CapSense_1_UpdateSensorBaseline(uint32 sensor)
 558:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 717              		.loc 1 558 0
 718              		.cfi_startproc
 719 0000 80B5     		push	{r7, lr}
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 7, -8
 722              		.cfi_offset 14, -4
 723 0002 82B0     		sub	sp, sp, #8
 724              		.cfi_def_cfa_offset 16
 725 0004 00AF     		add	r7, sp, #0
 726              		.cfi_def_cfa_register 7
 727 0006 7860     		str	r0, [r7, #4]
 559:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 560:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 widget;
 561:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 562:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         widget = CapSense_1_widgetNumber[sensor];
 563:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 564:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 565:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(widget < CapSense_1_END_OF_WIDGETS_INDEX)
 566:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 567:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 568:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 569:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 24


 570:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_UpdateThresholds(sensor);
 571:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* (CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO) */
 572:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 573:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_UpdateBaselineNoThreshold(sensor);
 728              		.loc 1 573 0
 729 0008 7B68     		ldr	r3, [r7, #4]
 730 000a 181C     		mov	r0, r3
 731 000c FFF7FEFF 		bl	CapSense_1_UpdateBaselineNoThreshold
 574:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 575:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_TOTAL_GENERICS_COUNT)
 576:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Exclude generic widget */
 577:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 578:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif  /* CapSense_1_TOTAL_GENERICS_COUNT */
 579:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 732              		.loc 1 579 0
 733 0010 BD46     		mov	sp, r7
 734 0012 02B0     		add	sp, sp, #8
 735              		@ sp needed
 736 0014 80BD     		pop	{r7, pc}
 737              		.cfi_endproc
 738              	.LFE40:
 739              		.size	CapSense_1_UpdateSensorBaseline, .-CapSense_1_UpdateSensorBaseline
 740 0016 C046     		.section	.text.CapSense_1_UpdateEnabledBaselines,"ax",%progbits
 741              		.align	2
 742              		.global	CapSense_1_UpdateEnabledBaselines
 743              		.code	16
 744              		.thumb_func
 745              		.type	CapSense_1_UpdateEnabledBaselines, %function
 746              	CapSense_1_UpdateEnabledBaselines:
 747              	.LFB41:
 580:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 581:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 582:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 583:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_UpdateEnabledBaselines
 584:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 585:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 586:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 587:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Checks CapSense_1_sensorEnableMask[] array and calls the
 588:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_UpdateSensorBaseline function to update the baselines
 589:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  for the enabled sensors.
 590:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 591:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 592:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 593:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 594:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 595:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 596:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 597:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 598:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[] - used to store the sensor scanning
 599:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  state.
 600:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[0] contains the masked bits for sensors
 601:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 602:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
 603:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 604:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor doesn't scan by CapSense_1_ScanEnabledWidgets().
 605:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor scans by CapSense_1_ScanEnabledWidgets().
 606:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 25


 607:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 608:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 609:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 610:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 611:Generated_Source\PSoC4/CapSense_1_CSHL.c ****  void CapSense_1_UpdateEnabledBaselines(void)
 612:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 748              		.loc 1 612 0
 749              		.cfi_startproc
 750 0000 80B5     		push	{r7, lr}
 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 82B0     		sub	sp, sp, #8
 755              		.cfi_def_cfa_offset 16
 756 0004 00AF     		add	r7, sp, #0
 757              		.cfi_def_cfa_register 7
 613:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 i;
 614:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 isSensorEnabled;
 615:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 616:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = 0u; i < CapSense_1_TOTAL_SENSOR_COUNT; i++)
 758              		.loc 1 616 0
 759 0006 0023     		mov	r3, #0
 760 0008 7B60     		str	r3, [r7, #4]
 761 000a 11E0     		b	.L33
 762              	.L35:
 617:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 618:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         isSensorEnabled = CapSense_1_GetBitValue(CapSense_1_sensorEnableMask, i);
 763              		.loc 1 618 0
 764 000c 0B4A     		ldr	r2, .L36
 765 000e 7B68     		ldr	r3, [r7, #4]
 766 0010 101C     		mov	r0, r2
 767 0012 191C     		mov	r1, r3
 768 0014 FFF7FEFF 		bl	CapSense_1_GetBitValue
 769 0018 031C     		mov	r3, r0
 770 001a 3B60     		str	r3, [r7]
 619:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 620:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(0u != isSensorEnabled)
 771              		.loc 1 620 0
 772 001c 3B68     		ldr	r3, [r7]
 773 001e 002B     		cmp	r3, #0
 774 0020 03D0     		beq	.L34
 621:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 622:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_UpdateSensorBaseline(i);
 775              		.loc 1 622 0
 776 0022 7B68     		ldr	r3, [r7, #4]
 777 0024 181C     		mov	r0, r3
 778 0026 FFF7FEFF 		bl	CapSense_1_UpdateSensorBaseline
 779              	.L34:
 616:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 780              		.loc 1 616 0 discriminator 2
 781 002a 7B68     		ldr	r3, [r7, #4]
 782 002c 0133     		add	r3, r3, #1
 783 002e 7B60     		str	r3, [r7, #4]
 784              	.L33:
 616:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 785              		.loc 1 616 0 is_stmt 0 discriminator 1
 786 0030 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 26


 787 0032 072B     		cmp	r3, #7
 788 0034 EAD9     		bls	.L35
 623:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 624:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 625:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 789              		.loc 1 625 0 is_stmt 1
 790 0036 BD46     		mov	sp, r7
 791 0038 02B0     		add	sp, sp, #8
 792              		@ sp needed
 793 003a 80BD     		pop	{r7, pc}
 794              	.L37:
 795              		.align	2
 796              	.L36:
 797 003c 00000000 		.word	CapSense_1_sensorEnableMask
 798              		.cfi_endproc
 799              	.LFE41:
 800              		.size	CapSense_1_UpdateEnabledBaselines, .-CapSense_1_UpdateEnabledBaselines
 801              		.section	.text.CapSense_1_UpdateWidgetBaseline,"ax",%progbits
 802              		.align	2
 803              		.global	CapSense_1_UpdateWidgetBaseline
 804              		.code	16
 805              		.thumb_func
 806              		.type	CapSense_1_UpdateWidgetBaseline, %function
 807              	CapSense_1_UpdateWidgetBaseline:
 808              	.LFB42:
 626:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 627:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 628:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_UpdateWidgetBaseline
 629:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 630:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 631:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 632:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Checks CapSense_1_sensorEnableMask[] array and calls the
 633:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_UpdateSensorBaseline function to update the baselines
 634:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  for the enabled sensors that belong to widget.
 635:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 636:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 637:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  Widget number.
 638:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 639:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 640:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 641:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 642:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 643:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[] - used to store the sensor scanning
 644:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  state.
 645:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[0] contains the masked bits for sensors
 646:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 647:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
 648:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 649:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor doesn't scan by CapSense_1_ScanEnabledWidgets().
 650:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor scans by CapSense_1_ScanEnabledWidgets().
 651:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 652:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 653:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 654:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 655:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 656:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_UpdateWidgetBaseline(uint32 widget)
 657:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 27


 809              		.loc 1 657 0
 810              		.cfi_startproc
 811 0000 80B5     		push	{r7, lr}
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 7, -8
 814              		.cfi_offset 14, -4
 815 0002 88B0     		sub	sp, sp, #32
 816              		.cfi_def_cfa_offset 40
 817 0004 00AF     		add	r7, sp, #0
 818              		.cfi_def_cfa_register 7
 819 0006 7860     		str	r0, [r7, #4]
 658:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 sensorsPerWidget;
 659:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 firstSensor;
 660:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 lastSensor;
 661:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 i;
 662:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 isSensorEnabled;
 663:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 664:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Get number of sensors in widget */
 665:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     sensorsPerWidget = CapSense_1_numberOfSensors[widget];
 820              		.loc 1 665 0
 821 0008 164A     		ldr	r2, .L42
 822 000a 7B68     		ldr	r3, [r7, #4]
 823 000c D318     		add	r3, r2, r3
 824 000e 1B78     		ldrb	r3, [r3]
 825 0010 BB61     		str	r3, [r7, #24]
 666:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 667:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Get first sensor in widget */
 668:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     firstSensor = CapSense_1_rawDataIndex[widget];
 826              		.loc 1 668 0
 827 0012 154A     		ldr	r2, .L42+4
 828 0014 7B68     		ldr	r3, [r7, #4]
 829 0016 D318     		add	r3, r2, r3
 830 0018 1B78     		ldrb	r3, [r3]
 831 001a 7B61     		str	r3, [r7, #20]
 669:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 670:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Get last sensor in widget */
 671:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     lastSensor = (CapSense_1_rawDataIndex[widget] + sensorsPerWidget);
 832              		.loc 1 671 0
 833 001c 124A     		ldr	r2, .L42+4
 834 001e 7B68     		ldr	r3, [r7, #4]
 835 0020 D318     		add	r3, r2, r3
 836 0022 1B78     		ldrb	r3, [r3]
 837 0024 1A1C     		mov	r2, r3
 838 0026 BB69     		ldr	r3, [r7, #24]
 839 0028 D318     		add	r3, r2, r3
 840 002a 3B61     		str	r3, [r7, #16]
 672:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 673:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = firstSensor; i < lastSensor; i++)
 841              		.loc 1 673 0
 842 002c 7B69     		ldr	r3, [r7, #20]
 843 002e FB61     		str	r3, [r7, #28]
 844 0030 11E0     		b	.L39
 845              	.L41:
 674:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 675:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         isSensorEnabled = CapSense_1_GetBitValue(CapSense_1_sensorEnableMask, i);
 846              		.loc 1 675 0
 847 0032 0E4A     		ldr	r2, .L42+8
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 28


 848 0034 FB69     		ldr	r3, [r7, #28]
 849 0036 101C     		mov	r0, r2
 850 0038 191C     		mov	r1, r3
 851 003a FFF7FEFF 		bl	CapSense_1_GetBitValue
 852 003e 031C     		mov	r3, r0
 853 0040 FB60     		str	r3, [r7, #12]
 676:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 677:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(0u != isSensorEnabled)
 854              		.loc 1 677 0
 855 0042 FB68     		ldr	r3, [r7, #12]
 856 0044 002B     		cmp	r3, #0
 857 0046 03D0     		beq	.L40
 678:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
 679:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_UpdateSensorBaseline(i);
 858              		.loc 1 679 0
 859 0048 FB69     		ldr	r3, [r7, #28]
 860 004a 181C     		mov	r0, r3
 861 004c FFF7FEFF 		bl	CapSense_1_UpdateSensorBaseline
 862              	.L40:
 673:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 863              		.loc 1 673 0 discriminator 2
 864 0050 FB69     		ldr	r3, [r7, #28]
 865 0052 0133     		add	r3, r3, #1
 866 0054 FB61     		str	r3, [r7, #28]
 867              	.L39:
 673:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 868              		.loc 1 673 0 is_stmt 0 discriminator 1
 869 0056 FA69     		ldr	r2, [r7, #28]
 870 0058 3B69     		ldr	r3, [r7, #16]
 871 005a 9A42     		cmp	r2, r3
 872 005c E9D3     		bcc	.L41
 680:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
 681:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 682:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 873              		.loc 1 682 0 is_stmt 1
 874 005e BD46     		mov	sp, r7
 875 0060 08B0     		add	sp, sp, #32
 876              		@ sp needed
 877 0062 80BD     		pop	{r7, pc}
 878              	.L43:
 879              		.align	2
 880              	.L42:
 881 0064 00000000 		.word	CapSense_1_numberOfSensors
 882 0068 00000000 		.word	CapSense_1_rawDataIndex
 883 006c 00000000 		.word	CapSense_1_sensorEnableMask
 884              		.cfi_endproc
 885              	.LFE42:
 886              		.size	CapSense_1_UpdateWidgetBaseline, .-CapSense_1_UpdateWidgetBaseline
 887              		.section	.text.CapSense_1_GetBaselineData,"ax",%progbits
 888              		.align	2
 889              		.global	CapSense_1_GetBaselineData
 890              		.code	16
 891              		.thumb_func
 892              		.type	CapSense_1_GetBaselineData, %function
 893              	CapSense_1_GetBaselineData:
 894              	.LFB43:
 683:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 29


 684:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 685:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 686:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetBaselineData
 687:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 688:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 689:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 690:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the sensor baseline from the component.
 691:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 692:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 693:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 694:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 695:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 696:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the baseline value of the sensor indicated by an argument.
 697:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 698:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 699:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[] - the array with an initial values by scanning
 700:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 701:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 702:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 703:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 704:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 705:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint16 CapSense_1_GetBaselineData(uint32 sensor)
 706:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 895              		.loc 1 706 0
 896              		.cfi_startproc
 897 0000 80B5     		push	{r7, lr}
 898              		.cfi_def_cfa_offset 8
 899              		.cfi_offset 7, -8
 900              		.cfi_offset 14, -4
 901 0002 82B0     		sub	sp, sp, #8
 902              		.cfi_def_cfa_offset 16
 903 0004 00AF     		add	r7, sp, #0
 904              		.cfi_def_cfa_register 7
 905 0006 7860     		str	r0, [r7, #4]
 707:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return (CapSense_1_sensorBaseline[sensor]);
 906              		.loc 1 707 0
 907 0008 034B     		ldr	r3, .L46
 908 000a 7A68     		ldr	r2, [r7, #4]
 909 000c 5200     		lsl	r2, r2, #1
 910 000e D35A     		ldrh	r3, [r2, r3]
 708:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 911              		.loc 1 708 0
 912 0010 181C     		mov	r0, r3
 913 0012 BD46     		mov	sp, r7
 914 0014 02B0     		add	sp, sp, #8
 915              		@ sp needed
 916 0016 80BD     		pop	{r7, pc}
 917              	.L47:
 918              		.align	2
 919              	.L46:
 920 0018 00000000 		.word	CapSense_1_sensorBaseline
 921              		.cfi_endproc
 922              	.LFE43:
 923              		.size	CapSense_1_GetBaselineData, .-CapSense_1_GetBaselineData
 924              		.section	.text.CapSense_1_SetBaselineData,"ax",%progbits
 925              		.align	2
 926              		.global	CapSense_1_SetBaselineData
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 30


 927              		.code	16
 928              		.thumb_func
 929              		.type	CapSense_1_SetBaselineData, %function
 930              	CapSense_1_SetBaselineData:
 931              	.LFB44:
 709:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 710:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 711:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 712:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_SetBaselineData
 713:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 714:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 715:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 716:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API writes the data value passed as an argument to the sensor baseline array.
 717:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 718:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 719:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 720:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  data:    Sensor baseline.
 721:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 722:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 723:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None.
 724:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 725:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 726:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorBaseline[] - the array with initial values by scanning
 727:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 728:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 729:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 730:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 731:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 732:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_SetBaselineData(uint32 sensor, uint16 data)
 733:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 932              		.loc 1 733 0
 933              		.cfi_startproc
 934 0000 80B5     		push	{r7, lr}
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 7, -8
 937              		.cfi_offset 14, -4
 938 0002 82B0     		sub	sp, sp, #8
 939              		.cfi_def_cfa_offset 16
 940 0004 00AF     		add	r7, sp, #0
 941              		.cfi_def_cfa_register 7
 942 0006 7860     		str	r0, [r7, #4]
 943 0008 0A1C     		mov	r2, r1
 944 000a BB1C     		add	r3, r7, #2
 945 000c 1A80     		strh	r2, [r3]
 734:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorBaseline[sensor] = data;
 946              		.loc 1 734 0
 947 000e 044B     		ldr	r3, .L49
 948 0010 7A68     		ldr	r2, [r7, #4]
 949 0012 5200     		lsl	r2, r2, #1
 950 0014 B91C     		add	r1, r7, #2
 951 0016 0988     		ldrh	r1, [r1]
 952 0018 D152     		strh	r1, [r2, r3]
 735:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 953              		.loc 1 735 0
 954 001a BD46     		mov	sp, r7
 955 001c 02B0     		add	sp, sp, #8
 956              		@ sp needed
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 31


 957 001e 80BD     		pop	{r7, pc}
 958              	.L50:
 959              		.align	2
 960              	.L49:
 961 0020 00000000 		.word	CapSense_1_sensorBaseline
 962              		.cfi_endproc
 963              	.LFE44:
 964              		.size	CapSense_1_SetBaselineData, .-CapSense_1_SetBaselineData
 965              		.section	.text.CapSense_1_GetDiffCountData,"ax",%progbits
 966              		.align	2
 967              		.global	CapSense_1_GetDiffCountData
 968              		.code	16
 969              		.thumb_func
 970              		.type	CapSense_1_GetDiffCountData, %function
 971              	CapSense_1_GetDiffCountData:
 972              	.LFB45:
 736:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 737:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 738:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 739:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetDiffCountData
 740:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 741:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 742:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 743:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function returns the Sensor Signal from the component.
 744:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 745:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 746:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 747:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 748:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 749:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the difference count value of the sensor indicated by the
 750:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  argument.
 751:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 752:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 753:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[] - the array with difference counts for sensors
 754:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 755:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 756:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 757:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 758:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 759:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetDiffCountData(uint32 sensor)
 760:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 973              		.loc 1 760 0
 974              		.cfi_startproc
 975 0000 80B5     		push	{r7, lr}
 976              		.cfi_def_cfa_offset 8
 977              		.cfi_offset 7, -8
 978              		.cfi_offset 14, -4
 979 0002 82B0     		sub	sp, sp, #8
 980              		.cfi_def_cfa_offset 16
 981 0004 00AF     		add	r7, sp, #0
 982              		.cfi_def_cfa_register 7
 983 0006 7860     		str	r0, [r7, #4]
 761:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return (CapSense_1_sensorSignal[sensor]);
 984              		.loc 1 761 0
 985 0008 034A     		ldr	r2, .L53
 986 000a 7B68     		ldr	r3, [r7, #4]
 987 000c D318     		add	r3, r2, r3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 32


 988 000e 1B78     		ldrb	r3, [r3]
 762:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 989              		.loc 1 762 0
 990 0010 181C     		mov	r0, r3
 991 0012 BD46     		mov	sp, r7
 992 0014 02B0     		add	sp, sp, #8
 993              		@ sp needed
 994 0016 80BD     		pop	{r7, pc}
 995              	.L54:
 996              		.align	2
 997              	.L53:
 998 0018 00000000 		.word	CapSense_1_sensorSignal
 999              		.cfi_endproc
 1000              	.LFE45:
 1001              		.size	CapSense_1_GetDiffCountData, .-CapSense_1_GetDiffCountData
 1002              		.section	.text.CapSense_1_SetDiffCountData,"ax",%progbits
 1003              		.align	2
 1004              		.global	CapSense_1_SetDiffCountData
 1005              		.code	16
 1006              		.thumb_func
 1007              		.type	CapSense_1_SetDiffCountData, %function
 1008              	CapSense_1_SetDiffCountData:
 1009              	.LFB46:
 763:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 764:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 765:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 766:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_SetDiffCountData
 767:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 768:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 769:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 770:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API writes the data value passed as an argument to the sensor signal array.
 771:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 772:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 773:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
 774:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  value:   Sensor signal.
 775:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 776:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 777:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None.
 778:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 779:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 780:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[] - the array with difference counts for sensors
 781:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 782:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 783:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 784:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 785:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 786:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_SetDiffCountData(uint32 sensor, uint8 value)
 787:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1010              		.loc 1 787 0
 1011              		.cfi_startproc
 1012 0000 80B5     		push	{r7, lr}
 1013              		.cfi_def_cfa_offset 8
 1014              		.cfi_offset 7, -8
 1015              		.cfi_offset 14, -4
 1016 0002 82B0     		sub	sp, sp, #8
 1017              		.cfi_def_cfa_offset 16
 1018 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 33


 1019              		.cfi_def_cfa_register 7
 1020 0006 7860     		str	r0, [r7, #4]
 1021 0008 0A1C     		mov	r2, r1
 1022 000a FB1C     		add	r3, r7, #3
 1023 000c 1A70     		strb	r2, [r3]
 788:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     CapSense_1_sensorSignal[sensor] = value;
 1024              		.loc 1 788 0
 1025 000e 044A     		ldr	r2, .L56
 1026 0010 7B68     		ldr	r3, [r7, #4]
 1027 0012 D318     		add	r3, r2, r3
 1028 0014 FA1C     		add	r2, r7, #3
 1029 0016 1278     		ldrb	r2, [r2]
 1030 0018 1A70     		strb	r2, [r3]
 789:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1031              		.loc 1 789 0
 1032 001a BD46     		mov	sp, r7
 1033 001c 02B0     		add	sp, sp, #8
 1034              		@ sp needed
 1035 001e 80BD     		pop	{r7, pc}
 1036              	.L57:
 1037              		.align	2
 1038              	.L56:
 1039 0020 00000000 		.word	CapSense_1_sensorSignal
 1040              		.cfi_endproc
 1041              	.LFE46:
 1042              		.size	CapSense_1_SetDiffCountData, .-CapSense_1_SetDiffCountData
 1043              		.section	.text.CapSense_1_GetFingerThreshold,"ax",%progbits
 1044              		.align	2
 1045              		.global	CapSense_1_GetFingerThreshold
 1046              		.code	16
 1047              		.thumb_func
 1048              		.type	CapSense_1_GetFingerThreshold, %function
 1049              	CapSense_1_GetFingerThreshold:
 1050              	.LFB47:
 790:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 791:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 792:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 793:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetFingerThreshold
 794:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 795:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 796:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 797:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the finger threshold from the component.
 798:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 799:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 800:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
 801:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 802:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 803:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the finger threshold of the widget indicated by the argument.
 804:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 805:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 806:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_fingerThreshold[] - This array contains the level of signal
 807:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  for each widget that is determined if a finger is present on the widget.
 808:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 809:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 810:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 811:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 812:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 34


 813:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetFingerThreshold(uint32 widget)
 814:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1051              		.loc 1 814 0
 1052              		.cfi_startproc
 1053 0000 80B5     		push	{r7, lr}
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 7, -8
 1056              		.cfi_offset 14, -4
 1057 0002 82B0     		sub	sp, sp, #8
 1058              		.cfi_def_cfa_offset 16
 1059 0004 00AF     		add	r7, sp, #0
 1060              		.cfi_def_cfa_register 7
 1061 0006 7860     		str	r0, [r7, #4]
 815:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_fingerThreshold[widget]);
 1062              		.loc 1 815 0
 1063 0008 034A     		ldr	r2, .L60
 1064 000a 7B68     		ldr	r3, [r7, #4]
 1065 000c D318     		add	r3, r2, r3
 1066 000e 1B78     		ldrb	r3, [r3]
 816:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1067              		.loc 1 816 0
 1068 0010 181C     		mov	r0, r3
 1069 0012 BD46     		mov	sp, r7
 1070 0014 02B0     		add	sp, sp, #8
 1071              		@ sp needed
 1072 0016 80BD     		pop	{r7, pc}
 1073              	.L61:
 1074              		.align	2
 1075              	.L60:
 1076 0018 00000000 		.word	CapSense_1_fingerThreshold
 1077              		.cfi_endproc
 1078              	.LFE47:
 1079              		.size	CapSense_1_GetFingerThreshold, .-CapSense_1_GetFingerThreshold
 1080              		.section	.text.CapSense_1_GetNoiseThreshold,"ax",%progbits
 1081              		.align	2
 1082              		.global	CapSense_1_GetNoiseThreshold
 1083              		.code	16
 1084              		.thumb_func
 1085              		.type	CapSense_1_GetNoiseThreshold, %function
 1086              	CapSense_1_GetNoiseThreshold:
 1087              	.LFB48:
 817:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 818:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 819:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 820:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetNoiseThreshold
 821:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 822:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 823:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 824:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the noise threshold from the component.
 825:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 826:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 827:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
 828:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 829:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 830:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the noise threshold of the widget indicated by the argument.
 831:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 832:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 35


 833:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_noiseThreshold[] - This array contains the level of signal
 834:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  for each widget that determines the level of noise in the capacitive scan.
 835:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 836:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 837:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 838:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 839:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 840:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetNoiseThreshold(uint32 widget)
 841:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1088              		.loc 1 841 0
 1089              		.cfi_startproc
 1090 0000 80B5     		push	{r7, lr}
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 82B0     		sub	sp, sp, #8
 1095              		.cfi_def_cfa_offset 16
 1096 0004 00AF     		add	r7, sp, #0
 1097              		.cfi_def_cfa_register 7
 1098 0006 7860     		str	r0, [r7, #4]
 842:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return (CapSense_1_noiseThreshold[widget]);
 1099              		.loc 1 842 0
 1100 0008 034A     		ldr	r2, .L64
 1101 000a 7B68     		ldr	r3, [r7, #4]
 1102 000c D318     		add	r3, r2, r3
 1103 000e 1B78     		ldrb	r3, [r3]
 843:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1104              		.loc 1 843 0
 1105 0010 181C     		mov	r0, r3
 1106 0012 BD46     		mov	sp, r7
 1107 0014 02B0     		add	sp, sp, #8
 1108              		@ sp needed
 1109 0016 80BD     		pop	{r7, pc}
 1110              	.L65:
 1111              		.align	2
 1112              	.L64:
 1113 0018 00000000 		.word	CapSense_1_noiseThreshold
 1114              		.cfi_endproc
 1115              	.LFE48:
 1116              		.size	CapSense_1_GetNoiseThreshold, .-CapSense_1_GetNoiseThreshold
 1117              		.section	.text.CapSense_1_GetFingerHysteresis,"ax",%progbits
 1118              		.align	2
 1119              		.global	CapSense_1_GetFingerHysteresis
 1120              		.code	16
 1121              		.thumb_func
 1122              		.type	CapSense_1_GetFingerHysteresis, %function
 1123              	CapSense_1_GetFingerHysteresis:
 1124              	.LFB49:
 844:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 845:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 846:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 847:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetFingerHysteresis
 848:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 849:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 850:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 851:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the Hysteresis value from the component.
 852:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 36


 853:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 854:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
 855:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 856:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
 857:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the Hysteresis of the widget indicated by the argument.
 858:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 859:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 860:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_hysteresis[] - This array contains the hysteresis value
 861:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   for each widget.
 862:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_widgetNumberSld - structure with dynamic sliders' parameters.
 863:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 864:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 865:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 866:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 867:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 868:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetFingerHysteresis(uint32 widget)
 869:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1125              		.loc 1 869 0
 1126              		.cfi_startproc
 1127 0000 80B5     		push	{r7, lr}
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 7, -8
 1130              		.cfi_offset 14, -4
 1131 0002 82B0     		sub	sp, sp, #8
 1132              		.cfi_def_cfa_offset 16
 1133 0004 00AF     		add	r7, sp, #0
 1134              		.cfi_def_cfa_register 7
 1135 0006 7860     		str	r0, [r7, #4]
 870:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_hysteresis[widget]);
 1136              		.loc 1 870 0
 1137 0008 034A     		ldr	r2, .L68
 1138 000a 7B68     		ldr	r3, [r7, #4]
 1139 000c D318     		add	r3, r2, r3
 1140 000e 1B78     		ldrb	r3, [r3]
 871:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1141              		.loc 1 871 0
 1142 0010 181C     		mov	r0, r3
 1143 0012 BD46     		mov	sp, r7
 1144 0014 02B0     		add	sp, sp, #8
 1145              		@ sp needed
 1146 0016 80BD     		pop	{r7, pc}
 1147              	.L69:
 1148              		.align	2
 1149              	.L68:
 1150 0018 00000000 		.word	CapSense_1_hysteresis
 1151              		.cfi_endproc
 1152              	.LFE49:
 1153              		.size	CapSense_1_GetFingerHysteresis, .-CapSense_1_GetFingerHysteresis
 1154              		.section	.text.CapSense_1_GetNegativeNoiseThreshold,"ax",%progbits
 1155              		.align	2
 1156              		.global	CapSense_1_GetNegativeNoiseThreshold
 1157              		.code	16
 1158              		.thumb_func
 1159              		.type	CapSense_1_GetNegativeNoiseThreshold, %function
 1160              	CapSense_1_GetNegativeNoiseThreshold:
 1161              	.LFB50:
 872:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 37


 873:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 874:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
 875:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetNegativeNoiseThreshold
 876:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
 877:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 878:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
 879:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function reads the negative noise threshold from the component.
 880:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 881:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
 882:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None.
 883:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 884:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return Value:
 885:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the negative noise threshold
 886:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 887:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
 888:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_negativeNoiseThreshold - This variable specifies the negative
 889:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   difference between the raw count and baseline levels for Baseline resetting
 890:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   to the raw count level.
 891:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 892:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
 893:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
 894:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
 895:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
 896:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetNegativeNoiseThreshold(uint32 widget)
 897:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1162              		.loc 1 897 0
 1163              		.cfi_startproc
 1164 0000 80B5     		push	{r7, lr}
 1165              		.cfi_def_cfa_offset 8
 1166              		.cfi_offset 7, -8
 1167              		.cfi_offset 14, -4
 1168 0002 82B0     		sub	sp, sp, #8
 1169              		.cfi_def_cfa_offset 16
 1170 0004 00AF     		add	r7, sp, #0
 1171              		.cfi_def_cfa_register 7
 1172 0006 7860     		str	r0, [r7, #4]
 898:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
 899:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_negativeNoiseThreshold[widget]);
 900:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #else
 901:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_NEGATIVE_NOISE_THRESHOLD);
 1173              		.loc 1 901 0
 1174 0008 1423     		mov	r3, #20
 902:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
 903:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1175              		.loc 1 903 0
 1176 000a 181C     		mov	r0, r3
 1177 000c BD46     		mov	sp, r7
 1178 000e 02B0     		add	sp, sp, #8
 1179              		@ sp needed
 1180 0010 80BD     		pop	{r7, pc}
 1181              		.cfi_endproc
 1182              	.LFE50:
 1183              		.size	CapSense_1_GetNegativeNoiseThreshold, .-CapSense_1_GetNegativeNoiseThreshold
 1184 0012 C046     		.section	.text.CapSense_1_CheckIsSensorActive,"ax",%progbits
 1185              		.align	2
 1186              		.global	CapSense_1_CheckIsSensorActive
 1187              		.code	16
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 38


 1188              		.thumb_func
 1189              		.type	CapSense_1_CheckIsSensorActive, %function
 1190              	CapSense_1_CheckIsSensorActive:
 1191              	.LFB51:
 904:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 905:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 906:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if(CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE)
 907:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
 908:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetFingerThreshold
 909:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
 910:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 911:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
 912:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the finger threshold value for a widget.
 913:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 914:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
 915:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  sensorNumber:  widget index.
 916:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:  Finger threshold value for the widget.
 917:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 918:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
 919:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 920:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 921:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
 922:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_fingerThreshold[] - This array contains the level of signal
 923:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   for each widget that determines if a finger is present on the widget.
 924:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 925:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
 926:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 927:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 928:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
 929:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetFingerThreshold(uint32 widget, uint8 value)
 930:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 931:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_fingerThreshold[widget] = value;
 932:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 933:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 934:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 935:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
 936:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetNoiseThreshold
 937:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
 938:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 939:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
 940:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the Noise Threshold value for each widget.
 941:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 942:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
 943:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  Sensor index number.
 944:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:   Noise Threshold value for widget.
 945:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 946:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
 947:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 948:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 949:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
 950:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_noiseThreshold[] - This array contains the level of signal
 951:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   for each widget that determines the level of noise in the capacitive scan.
 952:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 953:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
 954:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 955:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 956:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 39


 957:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetNoiseThreshold(uint32 widget, uint8 value)
 958:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 959:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_noiseThreshold[widget] = value;
 960:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 961:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 962:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 963:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
 964:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetFingerHysteresis
 965:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
 966:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 967:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
 968:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the Hysteresis value of a widget
 969:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 970:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
 971:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:  Hysteresis value for widgets.
 972:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  widget number
 973:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 974:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
 975:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 976:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 977:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
 978:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_hysteresis[] - This array contains the hysteresis value for each widget.
 979:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_widgetNumberSld - structure with dynamic sliders' parameters.
 980:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 981:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
 982:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
 983:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 984:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
 985:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetFingerHysteresis(uint32 widget, uint8 value)
 986:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 987:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_hysteresis[widget] = value;
 988:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 989:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 990:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
 991:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
 992:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetNegativeNoiseThreshold
 993:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
 994:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 995:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
 996:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the Negative Noise Threshold value of a widget
 997:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
 998:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
 999:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:  Negative Noise Threshold value for widgets.
1000:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget: widget number
1001:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1002:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
1003:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1004:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1005:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1006:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_negativeNoiseThreshold  - This parameter specifies the negative
1007:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   difference between the raw count and baseline levels for Baseline resetting to
1008:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   the raw count level.
1009:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1010:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1011:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1012:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1013:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 40


1014:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetNegativeNoiseThreshold(uint32 widget, uint8 value)
1015:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1016:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_negativeNoiseThreshold[widget] = value;
1017:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1018:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1019:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1020:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1021:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetDebounce
1022:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1023:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1024:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1025:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the debounce value for a widget.
1026:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1027:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1028:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value:  Debounce value for widget.
1029:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget: widget index.
1030:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1031:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
1032:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1033:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1034:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1035:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_debounce[] - This array contains the debounce value for each widget.
1036:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_widgetNumberSld - structure with dynamic sliders' parameters.
1037:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1038:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1039:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1040:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1041:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1042:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetDebounce(uint32 widget, uint8 value)
1043:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1044:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_debounce[widget] = value;
1045:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1046:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1047:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1048:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1049:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_SetLowBaselineReset
1050:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1051:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1052:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1053:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This API sets the low baseline reset threshold value for the sensor.
1054:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1055:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1056:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  value: low baseline reset threshold value.
1057:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  sensor: Sensor index.
1058:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1059:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return Value:
1060:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1061:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1062:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1063:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_lowBaselineReset[] - This array contains the Baseline update
1064:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold value for each sensor.
1065:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1066:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1067:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1068:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1069:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1070:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_SetLowBaselineReset(uint32 sensor, uint8 value)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 41


1071:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1072:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_lowBaselineReset[sensor] = value;
1073:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1074:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TUNING_METHOD != CapSense_1__TUNING_NONE) */
1075:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1076:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1077:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1078:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_CheckIsSensorActive
1079:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1080:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1081:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1082:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Compares the CapSense_1_sensorSignal[sensor] array element to the finger
1083:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  threshold of the widget it belongs to. The hysteresis and debounce are taken into
1084:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold
1085:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  based on whether the sensor is currently active.
1086:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
1087:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
1088:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  The debounce counter is added to the sensor active transition.
1089:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This function updates the CapSense_1_sensorOnMask[] array element.
1090:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1091:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1092:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor:  Sensor number.
1093:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1094:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1095:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
1096:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1097:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1098:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorSignal[] - used to store the difference between
1099:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the current value of raw data and a previous value of the baseline.
1100:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_debounceCounter[]   - used to store the current debounce
1101:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  counter of the sensor. the widget which have this parameter are buttons, matrix
1102:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  buttons, proximity, and guard. All other widgets don't have the  debounce parameter
1103:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
1104:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorOnMask[] - used to store the sensors on/off state.
1105:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorOnMask[0] contains the masked bits for sensors
1106:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1107:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
1108:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1109:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor is inactive.
1110:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor is active.
1111:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1112:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1113:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1114:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1115:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1116:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint32 CapSense_1_CheckIsSensorActive(uint32 sensor)
1117:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1192              		.loc 1 1117 0
 1193              		.cfi_startproc
 1194 0000 80B5     		push	{r7, lr}
 1195              		.cfi_def_cfa_offset 8
 1196              		.cfi_offset 7, -8
 1197              		.cfi_offset 14, -4
 1198 0002 84B0     		sub	sp, sp, #16
 1199              		.cfi_def_cfa_offset 24
 1200 0004 00AF     		add	r7, sp, #0
 1201              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 42


 1202 0006 7860     		str	r0, [r7, #4]
1118:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 widget;
1119:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 debounce;
1120:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 debounceIndex;
1121:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1122:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 fingerThreshold;
1123:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 hysteresis;
1124:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     
1125:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1126:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Prepare to find debounce counter index */
1127:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     widget = CapSense_1_widgetNumber[sensor];
 1203              		.loc 1 1127 0
 1204 0008 0F23     		mov	r3, #15
 1205 000a FB18     		add	r3, r7, r3
 1206 000c 4249     		ldr	r1, .L81
 1207 000e 7A68     		ldr	r2, [r7, #4]
 1208 0010 8A18     		add	r2, r1, r2
 1209 0012 1278     		ldrb	r2, [r2]
 1210 0014 1A70     		strb	r2, [r3]
1128:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1129:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     fingerThreshold = CapSense_1_fingerThreshold[widget];
 1211              		.loc 1 1129 0
 1212 0016 0F23     		mov	r3, #15
 1213 0018 FB18     		add	r3, r7, r3
 1214 001a 1A78     		ldrb	r2, [r3]
 1215 001c 0E23     		mov	r3, #14
 1216 001e FB18     		add	r3, r7, r3
 1217 0020 3E49     		ldr	r1, .L81+4
 1218 0022 8A5C     		ldrb	r2, [r1, r2]
 1219 0024 1A70     		strb	r2, [r3]
1130:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     hysteresis = CapSense_1_hysteresis[widget];
 1220              		.loc 1 1130 0
 1221 0026 0F23     		mov	r3, #15
 1222 0028 FB18     		add	r3, r7, r3
 1223 002a 1A78     		ldrb	r2, [r3]
 1224 002c 0D23     		mov	r3, #13
 1225 002e FB18     		add	r3, r7, r3
 1226 0030 3B49     		ldr	r1, .L81+8
 1227 0032 8A5C     		ldrb	r2, [r1, r2]
 1228 0034 1A70     		strb	r2, [r3]
1131:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     debounce = CapSense_1_debounce[widget];
 1229              		.loc 1 1131 0
 1230 0036 0F23     		mov	r3, #15
 1231 0038 FB18     		add	r3, r7, r3
 1232 003a 1A78     		ldrb	r2, [r3]
 1233 003c 0C23     		mov	r3, #12
 1234 003e FB18     		add	r3, r7, r3
 1235 0040 3849     		ldr	r1, .L81+12
 1236 0042 8A5C     		ldrb	r2, [r1, r2]
 1237 0044 1A70     		strb	r2, [r3]
1132:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1133:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         debounceIndex = widget;
 1238              		.loc 1 1133 0
 1239 0046 0B23     		mov	r3, #11
 1240 0048 FB18     		add	r3, r7, r3
 1241 004a 0F22     		mov	r2, #15
 1242 004c BA18     		add	r2, r7, r2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 43


 1243 004e 1278     		ldrb	r2, [r2]
 1244 0050 1A70     		strb	r2, [r3]
1134:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1135:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1136:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Was on */
1137:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     if (0u != CapSense_1_GetBitValue(CapSense_1_sensorOnMask, sensor))
 1245              		.loc 1 1137 0
 1246 0052 354A     		ldr	r2, .L81+16
 1247 0054 7B68     		ldr	r3, [r7, #4]
 1248 0056 101C     		mov	r0, r2
 1249 0058 191C     		mov	r1, r3
 1250 005a FFF7FEFF 		bl	CapSense_1_GetBitValue
 1251 005e 031E     		sub	r3, r0, #0
 1252 0060 1DD0     		beq	.L73
1138:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1139:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Hysteresis minus */
1140:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (CapSense_1_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 1253              		.loc 1 1140 0
 1254 0062 324A     		ldr	r2, .L81+20
 1255 0064 7B68     		ldr	r3, [r7, #4]
 1256 0066 D318     		add	r3, r2, r3
 1257 0068 1B78     		ldrb	r3, [r3]
 1258 006a 191C     		mov	r1, r3
 1259 006c 0E23     		mov	r3, #14
 1260 006e FB18     		add	r3, r7, r3
 1261 0070 1A78     		ldrb	r2, [r3]
 1262 0072 0D23     		mov	r3, #13
 1263 0074 FB18     		add	r3, r7, r3
 1264 0076 1B78     		ldrb	r3, [r3]
 1265 0078 D31A     		sub	r3, r2, r3
 1266 007a 9942     		cmp	r1, r3
 1267 007c 3DDA     		bge	.L75
1141:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1142:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_SetBitValue(CapSense_1_sensorOnMask, sensor, 0u);
 1268              		.loc 1 1142 0
 1269 007e 2A4A     		ldr	r2, .L81+16
 1270 0080 7B68     		ldr	r3, [r7, #4]
 1271 0082 101C     		mov	r0, r2
 1272 0084 191C     		mov	r1, r3
 1273 0086 0022     		mov	r2, #0
 1274 0088 FFF7FEFF 		bl	CapSense_1_SetBitValue
1143:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
1144:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_debounceCounter[debounceIndex] = debounce;
 1275              		.loc 1 1144 0
 1276 008c 0B23     		mov	r3, #11
 1277 008e FB18     		add	r3, r7, r3
 1278 0090 1B78     		ldrb	r3, [r3]
 1279 0092 274A     		ldr	r2, .L81+24
 1280 0094 0C21     		mov	r1, #12
 1281 0096 7918     		add	r1, r7, r1
 1282 0098 0978     		ldrb	r1, [r1]
 1283 009a D154     		strb	r1, [r2, r3]
 1284 009c 2DE0     		b	.L75
 1285              	.L73:
1145:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1146:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1147:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     else    /* Was off */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 44


1148:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1149:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Hysteresis plus */
1150:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (CapSense_1_sensorSignal[sensor] >= (fingerThreshold + hysteresis))
 1286              		.loc 1 1150 0
 1287 009e 234A     		ldr	r2, .L81+20
 1288 00a0 7B68     		ldr	r3, [r7, #4]
 1289 00a2 D318     		add	r3, r2, r3
 1290 00a4 1B78     		ldrb	r3, [r3]
 1291 00a6 191C     		mov	r1, r3
 1292 00a8 0E23     		mov	r3, #14
 1293 00aa FB18     		add	r3, r7, r3
 1294 00ac 1A78     		ldrb	r2, [r3]
 1295 00ae 0D23     		mov	r3, #13
 1296 00b0 FB18     		add	r3, r7, r3
 1297 00b2 1B78     		ldrb	r3, [r3]
 1298 00b4 D318     		add	r3, r2, r3
 1299 00b6 9942     		cmp	r1, r3
 1300 00b8 17DB     		blt	.L76
1151:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1152:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_debounceCounter[debounceIndex]--;
 1301              		.loc 1 1152 0
 1302 00ba 0B23     		mov	r3, #11
 1303 00bc FB18     		add	r3, r7, r3
 1304 00be 1B78     		ldrb	r3, [r3]
 1305 00c0 1B4A     		ldr	r2, .L81+24
 1306 00c2 D25C     		ldrb	r2, [r2, r3]
 1307 00c4 013A     		sub	r2, r2, #1
 1308 00c6 D1B2     		uxtb	r1, r2
 1309 00c8 194A     		ldr	r2, .L81+24
 1310 00ca D154     		strb	r1, [r2, r3]
1153:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Sensor active, decrement debounce counter */
1154:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(CapSense_1_debounceCounter[debounceIndex] == 0u)
 1311              		.loc 1 1154 0
 1312 00cc 0B23     		mov	r3, #11
 1313 00ce FB18     		add	r3, r7, r3
 1314 00d0 1B78     		ldrb	r3, [r3]
 1315 00d2 174A     		ldr	r2, .L81+24
 1316 00d4 D35C     		ldrb	r3, [r2, r3]
 1317 00d6 002B     		cmp	r3, #0
 1318 00d8 0FD1     		bne	.L75
1155:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1156:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_SetBitValue(CapSense_1_sensorOnMask, sensor, 1u);
 1319              		.loc 1 1156 0
 1320 00da 134A     		ldr	r2, .L81+16
 1321 00dc 7B68     		ldr	r3, [r7, #4]
 1322 00de 101C     		mov	r0, r2
 1323 00e0 191C     		mov	r1, r3
 1324 00e2 0122     		mov	r2, #1
 1325 00e4 FFF7FEFF 		bl	CapSense_1_SetBitValue
 1326 00e8 07E0     		b	.L75
 1327              	.L76:
1157:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1158:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1159:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
1160:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1161:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
1162:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_debounceCounter[debounceIndex] = debounce;
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 45


 1328              		.loc 1 1162 0
 1329 00ea 0B23     		mov	r3, #11
 1330 00ec FB18     		add	r3, r7, r3
 1331 00ee 1B78     		ldrb	r3, [r3]
 1332 00f0 0F4A     		ldr	r2, .L81+24
 1333 00f2 0C21     		mov	r1, #12
 1334 00f4 7918     		add	r1, r7, r1
 1335 00f6 0978     		ldrb	r1, [r1]
 1336 00f8 D154     		strb	r1, [r2, r3]
 1337              	.L75:
1163:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1164:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1165:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1166:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return ((uint32)((0u != CapSense_1_GetBitValue(CapSense_1_sensorOnMask, sensor)) ? 1u : 0u));
 1338              		.loc 1 1166 0
 1339 00fa 0B4A     		ldr	r2, .L81+16
 1340 00fc 7B68     		ldr	r3, [r7, #4]
 1341 00fe 101C     		mov	r0, r2
 1342 0100 191C     		mov	r1, r3
 1343 0102 FFF7FEFF 		bl	CapSense_1_GetBitValue
 1344 0106 031E     		sub	r3, r0, #0
 1345 0108 01D0     		beq	.L78
 1346              		.loc 1 1166 0 is_stmt 0 discriminator 1
 1347 010a 0123     		mov	r3, #1
 1348 010c 00E0     		b	.L79
 1349              	.L78:
 1350              		.loc 1 1166 0 discriminator 2
 1351 010e 0023     		mov	r3, #0
 1352              	.L79:
1167:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1353              		.loc 1 1167 0 is_stmt 1 discriminator 4
 1354 0110 181C     		mov	r0, r3
 1355 0112 BD46     		mov	sp, r7
 1356 0114 04B0     		add	sp, sp, #16
 1357              		@ sp needed
 1358 0116 80BD     		pop	{r7, pc}
 1359              	.L82:
 1360              		.align	2
 1361              	.L81:
 1362 0118 00000000 		.word	CapSense_1_widgetNumber
 1363 011c 00000000 		.word	CapSense_1_fingerThreshold
 1364 0120 00000000 		.word	CapSense_1_hysteresis
 1365 0124 00000000 		.word	CapSense_1_debounce
 1366 0128 00000000 		.word	CapSense_1_sensorOnMask
 1367 012c 00000000 		.word	CapSense_1_sensorSignal
 1368 0130 24000000 		.word	CapSense_1_debounceCounter
 1369              		.cfi_endproc
 1370              	.LFE51:
 1371              		.size	CapSense_1_CheckIsSensorActive, .-CapSense_1_CheckIsSensorActive
 1372              		.section	.text.CapSense_1_CheckIsWidgetActive,"ax",%progbits
 1373              		.align	2
 1374              		.global	CapSense_1_CheckIsWidgetActive
 1375              		.code	16
 1376              		.thumb_func
 1377              		.type	CapSense_1_CheckIsWidgetActive, %function
 1378              	CapSense_1_CheckIsWidgetActive:
 1379              	.LFB52:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 46


1168:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1169:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1170:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1171:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_CheckIsWidgetActive
1172:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1173:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1174:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1175:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Compares the CapSense_sensorSignal[] array element to the finger threshold of
1176:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * the widget it belongs to. The hysteresis and debounce are taken into account.
1177:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * The hysteresis is added or subtracted from the finger threshold based on whether
1178:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the sensor is currently active. If the sensor is active, the threshold is
1179:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  lowered by the hysteresis amount. If the sensor is inactive, the threshold
1180:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  is raised by the hysteresis amount.
1181:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * The debounce counter added to the sensor active transition.
1182:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * This function updates CapSense_sensorOnMask[] array element
1183:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1184:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1185:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
1186:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1187:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1188:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are
1189:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
1190:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1191:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1192:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  rawDataIndex[]: Contains the  1st sensor position in the widget
1193:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1194:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1195:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1196:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1197:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1198:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint32 CapSense_1_CheckIsWidgetActive(uint32 widget)
1199:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1380              		.loc 1 1199 0
 1381              		.cfi_startproc
 1382 0000 80B5     		push	{r7, lr}
 1383              		.cfi_def_cfa_offset 8
 1384              		.cfi_offset 7, -8
 1385              		.cfi_offset 14, -4
 1386 0002 86B0     		sub	sp, sp, #24
 1387              		.cfi_def_cfa_offset 32
 1388 0004 00AF     		add	r7, sp, #0
 1389              		.cfi_def_cfa_register 7
 1390 0006 7860     		str	r0, [r7, #4]
1200:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 rawIndex = (uint32)CapSense_1_rawDataIndex[widget];
 1391              		.loc 1 1200 0
 1392 0008 114A     		ldr	r2, .L87
 1393 000a 7B68     		ldr	r3, [r7, #4]
 1394 000c D318     		add	r3, r2, r3
 1395 000e 1B78     		ldrb	r3, [r3]
 1396 0010 7B61     		str	r3, [r7, #20]
1201:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 numOfSensors = (uint32)CapSense_1_numberOfSensors[widget] + rawIndex;
 1397              		.loc 1 1201 0
 1398 0012 104A     		ldr	r2, .L87+4
 1399 0014 7B68     		ldr	r3, [r7, #4]
 1400 0016 D318     		add	r3, r2, r3
 1401 0018 1B78     		ldrb	r3, [r3]
 1402 001a 1A1C     		mov	r2, r3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 47


 1403 001c 7B69     		ldr	r3, [r7, #20]
 1404 001e D318     		add	r3, r2, r3
 1405 0020 FB60     		str	r3, [r7, #12]
1202:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 state = 0u;
 1406              		.loc 1 1202 0
 1407 0022 0023     		mov	r3, #0
 1408 0024 3B61     		str	r3, [r7, #16]
 1409              	.L85:
1203:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1204:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Check all sensors of widget */
1205:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     do
1206:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1207:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(CapSense_1_CheckIsSensorActive((uint32)rawIndex) != 0u)
 1410              		.loc 1 1207 0
 1411 0026 7B69     		ldr	r3, [r7, #20]
 1412 0028 181C     		mov	r0, r3
 1413 002a FFF7FEFF 		bl	CapSense_1_CheckIsSensorActive
 1414 002e 031E     		sub	r3, r0, #0
 1415 0030 01D0     		beq	.L84
1208:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1209:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             state = CapSense_1_SENSOR_IS_ACTIVE;
 1416              		.loc 1 1209 0
 1417 0032 0123     		mov	r3, #1
 1418 0034 3B61     		str	r3, [r7, #16]
 1419              	.L84:
1210:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1211:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         rawIndex++;
 1420              		.loc 1 1211 0
 1421 0036 7B69     		ldr	r3, [r7, #20]
 1422 0038 0133     		add	r3, r3, #1
 1423 003a 7B61     		str	r3, [r7, #20]
1212:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1213:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(rawIndex < numOfSensors);
 1424              		.loc 1 1213 0
 1425 003c 7A69     		ldr	r2, [r7, #20]
 1426 003e FB68     		ldr	r3, [r7, #12]
 1427 0040 9A42     		cmp	r2, r3
 1428 0042 F0D3     		bcc	.L85
1214:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1215:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1216:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1217:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return state;
 1429              		.loc 1 1217 0
 1430 0044 3B69     		ldr	r3, [r7, #16]
1218:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1431              		.loc 1 1218 0
 1432 0046 181C     		mov	r0, r3
 1433 0048 BD46     		mov	sp, r7
 1434 004a 06B0     		add	sp, sp, #24
 1435              		@ sp needed
 1436 004c 80BD     		pop	{r7, pc}
 1437              	.L88:
 1438 004e C046     		.align	2
 1439              	.L87:
 1440 0050 00000000 		.word	CapSense_1_rawDataIndex
 1441 0054 00000000 		.word	CapSense_1_numberOfSensors
 1442              		.cfi_endproc
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 48


 1443              	.LFE52:
 1444              		.size	CapSense_1_CheckIsWidgetActive, .-CapSense_1_CheckIsWidgetActive
 1445              		.section	.text.CapSense_1_CheckIsAnyWidgetActive,"ax",%progbits
 1446              		.align	2
 1447              		.global	CapSense_1_CheckIsAnyWidgetActive
 1448              		.code	16
 1449              		.thumb_func
 1450              		.type	CapSense_1_CheckIsAnyWidgetActive, %function
 1451              	CapSense_1_CheckIsAnyWidgetActive:
 1452              	.LFB53:
1219:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1220:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1221:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1222:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_CheckIsAnyWidgetActive
1223:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1224:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1225:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1226:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Compares all the sensors of the CapSense_1_Signal[] array to their finger
1227:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  threshold. Calls CapSense_1_CheckIsWidgetActive() for each widget so
1228:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  the CapSense_1_sensorOnMask[] array is up to date after calling this
1229:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  function.
1230:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1231:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1232:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
1233:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1234:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1235:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
1236:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1237:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1238:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1239:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1240:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1241:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1242:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1243:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1244:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint32 CapSense_1_CheckIsAnyWidgetActive(void)
1245:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1453              		.loc 1 1245 0
 1454              		.cfi_startproc
 1455 0000 80B5     		push	{r7, lr}
 1456              		.cfi_def_cfa_offset 8
 1457              		.cfi_offset 7, -8
 1458              		.cfi_offset 14, -4
 1459 0002 82B0     		sub	sp, sp, #8
 1460              		.cfi_def_cfa_offset 16
 1461 0004 00AF     		add	r7, sp, #0
 1462              		.cfi_def_cfa_register 7
1246:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1247:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 i;
1248:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 state = 0u;
 1463              		.loc 1 1248 0
 1464 0006 0023     		mov	r3, #0
 1465 0008 3B60     		str	r3, [r7]
1249:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     
1250:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     for(i = 0u; i < CapSense_1_TOTAL_WIDGET_COUNT; i++)
 1466              		.loc 1 1250 0
 1467 000a 0023     		mov	r3, #0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 49


 1468 000c 7B60     		str	r3, [r7, #4]
 1469 000e 0AE0     		b	.L90
 1470              	.L92:
1251:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1252:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (CapSense_1_CheckIsWidgetActive(i) != 0u)
 1471              		.loc 1 1252 0
 1472 0010 7B68     		ldr	r3, [r7, #4]
 1473 0012 181C     		mov	r0, r3
 1474 0014 FFF7FEFF 		bl	CapSense_1_CheckIsWidgetActive
 1475 0018 031E     		sub	r3, r0, #0
 1476 001a 01D0     		beq	.L91
1253:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1254:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             state = CapSense_1_WIDGET_IS_ACTIVE;
 1477              		.loc 1 1254 0
 1478 001c 0123     		mov	r3, #1
 1479 001e 3B60     		str	r3, [r7]
 1480              	.L91:
1250:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1481              		.loc 1 1250 0 discriminator 2
 1482 0020 7B68     		ldr	r3, [r7, #4]
 1483 0022 0133     		add	r3, r3, #1
 1484 0024 7B60     		str	r3, [r7, #4]
 1485              	.L90:
1250:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1486              		.loc 1 1250 0 is_stmt 0 discriminator 1
 1487 0026 7B68     		ldr	r3, [r7, #4]
 1488 0028 072B     		cmp	r3, #7
 1489 002a F1D9     		bls	.L92
1255:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1256:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1257:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     
1258:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1259:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1260:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return state;
 1490              		.loc 1 1260 0 is_stmt 1
 1491 002c 3B68     		ldr	r3, [r7]
1261:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1492              		.loc 1 1261 0
 1493 002e 181C     		mov	r0, r3
 1494 0030 BD46     		mov	sp, r7
 1495 0032 02B0     		add	sp, sp, #8
 1496              		@ sp needed
 1497 0034 80BD     		pop	{r7, pc}
 1498              		.cfi_endproc
 1499              	.LFE53:
 1500              		.size	CapSense_1_CheckIsAnyWidgetActive, .-CapSense_1_CheckIsAnyWidgetActive
 1501 0036 C046     		.section	.text.CapSense_1_EnableWidget,"ax",%progbits
 1502              		.align	2
 1503              		.global	CapSense_1_EnableWidget
 1504              		.code	16
 1505              		.thumb_func
 1506              		.type	CapSense_1_EnableWidget, %function
 1507              	CapSense_1_EnableWidget:
 1508              	.LFB54:
1262:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1263:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1264:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 50


1265:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_EnableWidget
1266:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1267:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1268:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1269:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Enables all the widget elements (sensors) to the scanning process.
1270:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1271:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1272:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
1273:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1274:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1275:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1276:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1277:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1278:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[] - used to store the sensor scanning
1279:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  state.
1280:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[0] contains the masked bits for sensors
1281:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1282:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
1283:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1284:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor doesn't scan by CapSense_1_ScanEnabledWidgets().
1285:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor scans by CapSense_1_ScanEnabledWidgets().
1286:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1287:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1288:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1289:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1290:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1291:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_EnableWidget(uint32 widget)
1292:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1509              		.loc 1 1292 0
 1510              		.cfi_startproc
 1511 0000 80B5     		push	{r7, lr}
 1512              		.cfi_def_cfa_offset 8
 1513              		.cfi_offset 7, -8
 1514              		.cfi_offset 14, -4
 1515 0002 84B0     		sub	sp, sp, #16
 1516              		.cfi_def_cfa_offset 24
 1517 0004 00AF     		add	r7, sp, #0
 1518              		.cfi_def_cfa_register 7
 1519 0006 7860     		str	r0, [r7, #4]
1293:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1294:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 rawIndex = CapSense_1_rawDataIndex[widget];
 1520              		.loc 1 1294 0
 1521 0008 0F23     		mov	r3, #15
 1522 000a FB18     		add	r3, r7, r3
 1523 000c 1549     		ldr	r1, .L96
 1524 000e 7A68     		ldr	r2, [r7, #4]
 1525 0010 8A18     		add	r2, r1, r2
 1526 0012 1278     		ldrb	r2, [r2]
 1527 0014 1A70     		strb	r2, [r3]
1295:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 numOfSensors = CapSense_1_numberOfSensors[widget] + rawIndex;
 1528              		.loc 1 1295 0
 1529 0016 144A     		ldr	r2, .L96+4
 1530 0018 7B68     		ldr	r3, [r7, #4]
 1531 001a D318     		add	r3, r2, r3
 1532 001c 1978     		ldrb	r1, [r3]
 1533 001e 0E23     		mov	r3, #14
 1534 0020 FB18     		add	r3, r7, r3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 51


 1535 0022 0F22     		mov	r2, #15
 1536 0024 BA18     		add	r2, r7, r2
 1537 0026 1278     		ldrb	r2, [r2]
 1538 0028 8A18     		add	r2, r1, r2
 1539 002a 1A70     		strb	r2, [r3]
 1540              	.L95:
1296:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1297:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Enable all sensors of widget */
1298:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     do
1299:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1300:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_SetBitValue(CapSense_1_sensorEnableMask, (uint32)rawIndex, 1u);
 1541              		.loc 1 1300 0 discriminator 1
 1542 002c 0F23     		mov	r3, #15
 1543 002e FB18     		add	r3, r7, r3
 1544 0030 1B78     		ldrb	r3, [r3]
 1545 0032 0E4A     		ldr	r2, .L96+8
 1546 0034 101C     		mov	r0, r2
 1547 0036 191C     		mov	r1, r3
 1548 0038 0122     		mov	r2, #1
 1549 003a FFF7FEFF 		bl	CapSense_1_SetBitValue
1301:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         rawIndex++;
 1550              		.loc 1 1301 0 discriminator 1
 1551 003e 0F23     		mov	r3, #15
 1552 0040 FB18     		add	r3, r7, r3
 1553 0042 1A78     		ldrb	r2, [r3]
 1554 0044 0F23     		mov	r3, #15
 1555 0046 FB18     		add	r3, r7, r3
 1556 0048 0132     		add	r2, r2, #1
 1557 004a 1A70     		strb	r2, [r3]
1302:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1303:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(rawIndex < numOfSensors);
 1558              		.loc 1 1303 0 discriminator 1
 1559 004c 0F23     		mov	r3, #15
 1560 004e FA18     		add	r2, r7, r3
 1561 0050 0E23     		mov	r3, #14
 1562 0052 FB18     		add	r3, r7, r3
 1563 0054 1278     		ldrb	r2, [r2]
 1564 0056 1B78     		ldrb	r3, [r3]
 1565 0058 9A42     		cmp	r2, r3
 1566 005a E7D3     		bcc	.L95
1304:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1567              		.loc 1 1304 0
 1568 005c BD46     		mov	sp, r7
 1569 005e 04B0     		add	sp, sp, #16
 1570              		@ sp needed
 1571 0060 80BD     		pop	{r7, pc}
 1572              	.L97:
 1573 0062 C046     		.align	2
 1574              	.L96:
 1575 0064 00000000 		.word	CapSense_1_rawDataIndex
 1576 0068 00000000 		.word	CapSense_1_numberOfSensors
 1577 006c 00000000 		.word	CapSense_1_sensorEnableMask
 1578              		.cfi_endproc
 1579              	.LFE54:
 1580              		.size	CapSense_1_EnableWidget, .-CapSense_1_EnableWidget
 1581              		.section	.text.CapSense_1_DisableWidget,"ax",%progbits
 1582              		.align	2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 52


 1583              		.global	CapSense_1_DisableWidget
 1584              		.code	16
 1585              		.thumb_func
 1586              		.type	CapSense_1_DisableWidget, %function
 1587              	CapSense_1_DisableWidget:
 1588              	.LFB55:
1305:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1306:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1307:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
1308:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_DisableWidget
1309:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
1310:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1311:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
1312:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Disables all the widget elements (sensors) from the scanning process.
1313:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1314:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
1315:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  widget:  widget number.
1316:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1317:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
1318:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1319:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1320:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
1321:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[] - used to store the sensor scanning
1322:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  state.
1323:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[0] contains the masked bits for sensors
1324:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
1325:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_sensorEnableMask[1] contains the masked bits for
1326:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
1327:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  0 - sensor isn't scanned by CapSense_1_ScanEnabledWidgets().
1328:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  1 - sensor is scanned by CapSense_1_ScanEnabledWidgets().
1329:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1330:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
1331:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
1332:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
1333:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
1334:Generated_Source\PSoC4/CapSense_1_CSHL.c **** void CapSense_1_DisableWidget(uint32 widget)
1335:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1589              		.loc 1 1335 0
 1590              		.cfi_startproc
 1591 0000 80B5     		push	{r7, lr}
 1592              		.cfi_def_cfa_offset 8
 1593              		.cfi_offset 7, -8
 1594              		.cfi_offset 14, -4
 1595 0002 84B0     		sub	sp, sp, #16
 1596              		.cfi_def_cfa_offset 24
 1597 0004 00AF     		add	r7, sp, #0
 1598              		.cfi_def_cfa_register 7
 1599 0006 7860     		str	r0, [r7, #4]
1336:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 rawIndex = CapSense_1_rawDataIndex[widget];
 1600              		.loc 1 1336 0
 1601 0008 0F23     		mov	r3, #15
 1602 000a FB18     		add	r3, r7, r3
 1603 000c 1549     		ldr	r1, .L100
 1604 000e 7A68     		ldr	r2, [r7, #4]
 1605 0010 8A18     		add	r2, r1, r2
 1606 0012 1278     		ldrb	r2, [r2]
 1607 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 53


1337:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 numOfSensors = CapSense_1_numberOfSensors[widget] + rawIndex;
 1608              		.loc 1 1337 0
 1609 0016 144A     		ldr	r2, .L100+4
 1610 0018 7B68     		ldr	r3, [r7, #4]
 1611 001a D318     		add	r3, r2, r3
 1612 001c 1978     		ldrb	r1, [r3]
 1613 001e 0E23     		mov	r3, #14
 1614 0020 FB18     		add	r3, r7, r3
 1615 0022 0F22     		mov	r2, #15
 1616 0024 BA18     		add	r2, r7, r2
 1617 0026 1278     		ldrb	r2, [r2]
 1618 0028 8A18     		add	r2, r1, r2
 1619 002a 1A70     		strb	r2, [r3]
 1620              	.L99:
1338:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1339:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /* Disable all sensors of widget */
1340:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     do
1341:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1342:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1343:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_SetBitValue(CapSense_1_sensorEnableMask, (uint32)rawIndex, 0u);
 1621              		.loc 1 1343 0 discriminator 1
 1622 002c 0F23     		mov	r3, #15
 1623 002e FB18     		add	r3, r7, r3
 1624 0030 1B78     		ldrb	r3, [r3]
 1625 0032 0E4A     		ldr	r2, .L100+8
 1626 0034 101C     		mov	r0, r2
 1627 0036 191C     		mov	r1, r3
 1628 0038 0022     		mov	r2, #0
 1629 003a FFF7FEFF 		bl	CapSense_1_SetBitValue
1344:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         rawIndex++;
 1630              		.loc 1 1344 0 discriminator 1
 1631 003e 0F23     		mov	r3, #15
 1632 0040 FB18     		add	r3, r7, r3
 1633 0042 1A78     		ldrb	r2, [r3]
 1634 0044 0F23     		mov	r3, #15
 1635 0046 FB18     		add	r3, r7, r3
 1636 0048 0132     		add	r2, r2, #1
 1637 004a 1A70     		strb	r2, [r3]
1345:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1346:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     while(rawIndex < numOfSensors);
 1638              		.loc 1 1346 0 discriminator 1
 1639 004c 0F23     		mov	r3, #15
 1640 004e FA18     		add	r2, r7, r3
 1641 0050 0E23     		mov	r3, #14
 1642 0052 FB18     		add	r3, r7, r3
 1643 0054 1278     		ldrb	r2, [r2]
 1644 0056 1B78     		ldrb	r3, [r3]
 1645 0058 9A42     		cmp	r2, r3
 1646 005a E7D3     		bcc	.L99
1347:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1647              		.loc 1 1347 0
 1648 005c BD46     		mov	sp, r7
 1649 005e 04B0     		add	sp, sp, #16
 1650              		@ sp needed
 1651 0060 80BD     		pop	{r7, pc}
 1652              	.L101:
 1653 0062 C046     		.align	2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 54


 1654              	.L100:
 1655 0064 00000000 		.word	CapSense_1_rawDataIndex
 1656 0068 00000000 		.word	CapSense_1_numberOfSensors
 1657 006c 00000000 		.word	CapSense_1_sensorEnableMask
 1658              		.cfi_endproc
 1659              	.LFE55:
 1660              		.size	CapSense_1_DisableWidget, .-CapSense_1_DisableWidget
 1661              		.section	.text.CapSense_1_IIR4Filter,"ax",%progbits
 1662              		.align	2
 1663              		.global	CapSense_1_IIR4Filter
 1664              		.code	16
 1665              		.thumb_func
 1666              		.type	CapSense_1_IIR4Filter, %function
 1667              	CapSense_1_IIR4Filter:
 1668              	.LFB56:
1348:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1349:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1350:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if(CapSense_1_TOTAL_CENTROIDS_BASIC_COUNT)
1351:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1352:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_FindMaximum
1353:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1354:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1355:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1356:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Finds the index of the maximum element within a defined centroid. Checks
1357:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_sensorSignal[] within a defined centroid and
1358:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  returns the index of the maximum element. The values below the finger threshold are
1359:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  ignored.
1360:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The centroid is defined by offset of the first element and a number of elements - count.
1361:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The diplexed centroid requires at least two consecutive elements above
1362:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  FingerThreshold to find the index of the maximum element.
1363:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1364:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1365:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  offset:  Start index of centroid in CapSense_1_sensorSignal[] array.
1366:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  count:   number of elements within centroid.
1367:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  fingerThreshold:  Finger threshold.
1368:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  diplex:   pointer to diplex table.
1369:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1370:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
1371:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns the index of the maximum element within a defined centroid.
1372:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If the index of the maximum element isn't found it returns 0xFF.
1373:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1374:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1375:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_startOfSlider[] - contains the index of the first slider element
1376:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1377:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1378:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1379:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1380:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1381:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #if (CapSense_1_IS_DIPLEX_SLIDER)
1382:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 CapSense_1_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold, const uint8 
1383:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #else
1384:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 CapSense_1_FindMaximum(uint8 offset, uint8 count, uint8 fingerThreshold)
1385:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1386:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1387:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 i;
1388:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1389:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 curPos = 0u;
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 55


1390:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* No centroid at Start */
1391:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 curCntrdSize = 0u;
1392:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 curCtrdStartPos = CapSense_1_MAXIMUM_CENTROID;
1393:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Biggest centroid is zero */
1394:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 biggestCtrdSize = 0u;
1395:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
1396:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1397:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 maximum = CapSense_1_MAXIMUM_CENTROID;
1398:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1399:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 temp = 0u;
1400:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 *startOfSlider = &CapSense_1_sensorSignal[offset];
1401:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1402:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1403:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(diplex != 0u)
1404:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1405:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Initialize */
1406:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 i = 0u;
1407:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1408:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Make slider x2 as Diplexed */
1409:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 count <<= 1u;
1410:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 while(1u)
1411:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1412:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
1413:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1414:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         if (curCtrdStartPos == CapSense_1_MAXIMUM_CENTROID)
1415:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
1416:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             /* Start of centroid */
1417:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCtrdStartPos = i;
1418:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCntrdSize++;
1419:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
1420:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         else
1421:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
1422:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCntrdSize++;
1423:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
1424:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1425:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     else   /* Select biggest and indicate zero start */
1426:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1427:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         if(curCntrdSize > 0u)
1428:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
1429:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             /* We are at the end of current */
1430:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
1431:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1432:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
1433:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
1434:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1435:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1436:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCntrdSize = 0u;
1437:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curCtrdStartPos = CapSense_1_MAXIMUM_CENTROID;
1438:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
1439:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1440:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1441:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     i++;
1442:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     curPos = diplex[i];
1443:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if(i == count)
1444:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1445:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         break;
1446:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 56


1447:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1448:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1449:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Find biggest centroid if two are same size, last one wins
1450:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                        We are at the end of current */
1451:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize)
1452:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1453:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
1454:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
1455:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1456:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1457:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             else
1458:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1459:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Without diplexing */
1460:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 biggestCtrdSize = count;
1461:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1462:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1463:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1464:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Check centroid size */
1465:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (CapSense_1_IS_NON_DIPLEX_SLIDER)
1466:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
1467:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #else
1468:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if(biggestCtrdSize >= 2u)
1469:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (CapSense_1_IS_NON_DIPLEX_SLIDER) */
1470:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1471:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
1472:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1473:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (CapSense_1_IS_DIPLEX_SLIDER && CapSense_1_IS_NON_DIPLEX_SLIDER)
1474:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (diplex == 0u)
1475:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1476:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 curPos = i;
1477:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1478:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             else
1479:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1480:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 curPos = diplex[i];
1481:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1482:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #elif (CapSense_1_IS_DIPLEX_SLIDER)
1483:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             curPos = diplex[i];
1484:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (CapSense_1_IS_DIPLEX_SLIDER && CapSense_1_IS_NON_DIPLEX_SLIDER) 
1485:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Looking for greater element within centroid */
1486:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
1487:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
1488:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if(startOfSlider[curPos] > temp)
1489:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1490:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 maximum = i;
1491:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 temp = startOfSlider[curPos];
1492:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1493:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
1494:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1495:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1496:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
1497:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             for (i = 0u; i < count; i++)
1498:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1499:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Looking for greater element within centroid */
1500:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
1501:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1502:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if(startOfSlider[i] > temp)
1503:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 57


1504:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         maximum = i;
1505:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         temp = startOfSlider[i];
1506:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1507:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1508:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1509:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1510:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (maximum);
1511:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1512:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1513:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1514:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1515:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_CalcCentroid
1516:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1517:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1518:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1519:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a position value calculated according to the index of the maximum element and API
1520:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  resolution.
1521:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1522:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1523:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  type:  widget type.
1524:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  diplex:  pointer to diplex table.
1525:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
1526:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  offset:   Start index of centroid in CapSense_1_sensorSignal[] array.
1527:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  count:    Number of elements within centroid.
1528:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
1529:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  API resolution.
1530:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  noiseThreshold:  Noise threshold.
1531:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1532:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
1533:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a position value of the slider.
1534:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1535:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1536:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1537:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1538:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1539:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_TOTAL_TRACKPAD_GESTURES_COUNT > 0u)
1540:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 CapSense_1_CalcCentroid(uint8 maximum, uint8 offset,
1541:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         uint8 count, uint32 resolution, uint8 noiseThreshold)
1542:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #else
1543:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint8 CapSense_1_CalcCentroid(uint8 maximum, uint8 offset,
1544:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         uint8 count, uint16 resolution, uint8 noiseThreshold)
1545:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TOTAL_TRACKPAD_GESTURES_COUNT > 0u) */
1546:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1547:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC_COU
1548:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posPrev;
1549:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posNext;
1550:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC
1551:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1552:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Helps during centroid calculation */
1553:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_TOTAL_CENTROIDS_BASIC_COUNT)
1554:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             static uint8 CapSense_1_centroid[3u];
1555:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif  /* (CapSense_1_TOTAL_CENTROIDS_BASIC_COUNT) */
1556:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1557:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1558:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 pos;
1559:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1560:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 58


1561:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 position;
1562:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 numerator;
1563:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         int32 denominator;
1564:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1565:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8  *startOfSlider = &CapSense_1_sensorSignal[offset];
1566:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1567:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC_COU
1568:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             posPrev = 0u;
1569:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC
1570:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1571:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_ADD_SLIDER_TYPE)
1572:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(type == CapSense_1_TYPE_RADIAL_SLIDER)
1573:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1574:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_ADD_SLIDER_TYPE) */
1575:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1576:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1577:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Copy Signal to the centroid array */
1578:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 CapSense_1_centroid[CapSense_1_POS] = startOfSlider[maximum];
1579:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1580:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Check borders for ROTARY Slider */
1581:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1582:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1583:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[count - 1u];
1584:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[1u];
1585:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1586:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1587:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1588:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[maximum - 1u];
1589:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[0u];
1590:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1591:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 else                                /* Not first Not last */
1592:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1593:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[maximum - 1u];
1594:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[maximum + 1u];
1595:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1596:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1597:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1598:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_ADD_SLIDER_TYPE)
1599:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1600:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             else
1601:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1602:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_ADD_SLIDER_TYPE) */
1603:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1604:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_TOUCH_PADS_BASIC
1605:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #if (CapSense_1_IS_DIPLEX_SLIDER && CapSense_1_IS_NON_DIPLEX_SLIDER)
1606:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate next and previous near to maximum */
1607:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if(diplex == 0u)
1608:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1609:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         pos     = maximum;
1610:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posPrev = maximum - 1u;
1611:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posNext = maximum + 1u;
1612:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1613:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     else
1614:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1615:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         pos     = diplex[maximum];
1616:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1617:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posNext = diplex[maximum + 1u];
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 59


1618:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         count <<= 1u;
1619:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1620:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #elif (CapSense_1_IS_DIPLEX_SLIDER)
1621:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate next and previous near to maximum */
1622:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     pos     = diplex[maximum];
1623:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1624:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posNext = diplex[maximum + 1u];
1625:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     count <<= 1u;
1626:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #else
1627:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate next and previous near to maximum */
1628:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (maximum >= 1u)
1629:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1630:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posPrev = maximum - 1u;
1631:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1632:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posNext = maximum + 1u;
1633:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #endif /* (CapSense_1_IS_DIPLEX_SLIDER && CapSense_1_IS_NON_DIPLEX_SLIDER) */
1634:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1635:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Copy Signal to the centroid array */
1636:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #if (CapSense_1_IS_DIPLEX_SLIDER)
1637:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS] = startOfSlider[pos];
1638:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #else
1639:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS] = startOfSlider[maximum];
1640:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1641:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1642:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Check borders for LINEAR Slider */
1643:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1644:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1645:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = 0u;
1646:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[posNext];
1647:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1648:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1649:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1650:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[posPrev];
1651:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = 0u;
1652:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1653:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 else                                /* Not first Not last */
1654:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1655:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_PREV] = startOfSlider[posPrev];
1656:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_centroid[CapSense_1_POS_NEXT] = startOfSlider[posNext];
1657:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1658:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* ((CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_1_TOTAL_TOUCH_PADS_BAS
1659:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1660:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_ADD_SLIDER_TYPE)
1661:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1662:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_ADD_SLIDER_TYPE) */
1663:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1664:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Subtract noiseThreshold */
1665:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(CapSense_1_centroid[CapSense_1_POS_PREV] > noiseThreshold)
1666:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1667:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_centroid[CapSense_1_POS_PREV] -= noiseThreshold;
1668:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1669:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
1670:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1671:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_centroid[CapSense_1_POS_PREV] = 0u;
1672:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1673:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1674:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Maximum always greater than fingerThreshold, so greater than noiseThreshold */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 60


1675:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_centroid[CapSense_1_POS] -= noiseThreshold;
1676:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1677:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Subtract noiseThreshold */
1678:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if(CapSense_1_centroid[CapSense_1_POS_NEXT] > noiseThreshold)
1679:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1680:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_centroid[CapSense_1_POS_NEXT] -= noiseThreshold;
1681:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1682:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
1683:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1684:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             CapSense_1_centroid[CapSense_1_POS_NEXT] = 0u;
1685:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1686:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1687:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1688:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Si+1 - Si-1 */
1689:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         numerator = (uint32) CapSense_1_centroid[CapSense_1_POS_NEXT] -
1690:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     (uint32) CapSense_1_centroid[CapSense_1_POS_PREV];
1691:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1692:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Si+1 + Si + Si-1 */
1693:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         denominator = (int32) CapSense_1_centroid[CapSense_1_POS_PREV] +
1694:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                       (int32) CapSense_1_centroid[CapSense_1_POS] +
1695:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                       (int32) CapSense_1_centroid[CapSense_1_POS_NEXT];
1696:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1697:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* (numerator/denominator) + maximum */
1698:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1699:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1700:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if(CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1701:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Only required for RADIAL Slider */
1702:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(denominator < 0)
1703:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1704:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1705:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1706:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1707:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1708:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         denominator *= (int16)resolution;
1709:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1710:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Round result and put it to uint8 */
1711:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_1_CENTROID_ROUND_VALUE));
1712:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1713:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (position);
1714:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1715:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TOTAL_CENTROIDS_BASIC_COUNT) */
1716:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1717:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1718:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if((CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1719:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1720:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_GetCentroidPos
1721:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1722:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1723:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1724:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Checks the CapSense_1_Signal[ ] array for a centroid within
1725:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1726:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1727:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  result if enabled.
1728:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1729:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1730:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  Widget number.
1731:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  For every linear slider widget there are defines in this format:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 61


1732:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  #define CapSense_1_"widget_name"__LS           5
1733:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1734:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
1735:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a position value of the linear slider.
1736:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1737:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1738:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
1739:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1740:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1741:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1742:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1743:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1744:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1745:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1746:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1747:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1748:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Note:
1749:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1750:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1751:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1752:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  that noise will not generate a false centroid.
1753:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1754:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_GetCentroidPos(uint32 widget)
1755:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1756:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1757:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             const uint8 *diplex;
1758:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1759:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1760:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)
1761:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posIndex;
1762:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 firstTimeIndex = CapSense_1_posFiltersData[widget];
1763:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posFiltersMask = CapSense_1_posFiltersMask[widget];
1764:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1765:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1766:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1767:Generated_Source\PSoC4/CapSense_1_CSHL.c ****              (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1768:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 tempPos;
1769:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)) 
1770:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                *   (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK
1771:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                */
1772:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1773:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 maximum;
1774:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 position;
1775:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 offset = CapSense_1_rawDataIndex[widget];
1776:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 count = CapSense_1_numberOfSensors[widget];
1777:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1778:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1779:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(widget < CapSense_1_TOTAL_DIPLEXED_SLIDERS_COUNT)
1780:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1781:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 maximum = CapSense_1_diplexTable[widget];
1782:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 diplex = &CapSense_1_diplexTable[maximum];
1783:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1784:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             else
1785:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
1786:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 diplex = 0u;
1787:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
1788:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 62


1789:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1790:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Find Maximum within centroid */
1791:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1792:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             maximum = CapSense_1_FindMaximum(offset, count, (uint8)CapSense_1_fingerThreshold[widge
1793:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
1794:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             maximum = CapSense_1_FindMaximum(offset, count, (uint8)CapSense_1_fingerThreshold[widge
1795:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1796:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1797:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (maximum != 0xFFu)
1798:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1799:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Calculate centroid */
1800:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             position = (uint16) CapSense_1_CalcCentroid(maximum,
1801:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                          offset, count, CapSense_1_centroidMult[widget], CapSense_1_noiseThreshold[
1802:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1803:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)
1804:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1805:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_1_ANY_POS_FILTER))
1806:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1807:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate position to store filters data */
1808:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1809:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1810:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (0u == CapSense_1_posFiltersData[firstTimeIndex])
1811:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1812:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Init filters */
1813:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         CapSense_1_posFiltersData[posIndex] = (uint8) position;
1814:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if ((0u != (CapSense_1_MEDIAN_FILTER & \
1815:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1816:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                              (0u != (CapSense_1_AVERAGING_FILTER & \
1817:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1818:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1819:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER)) ||
1820:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER)) )
1821:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1822:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex + 1u] = (uint8) position;
1823:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1824:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & \
1825:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1826:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *   (0u != (CapSense_1_AVERAGING_FILTER & \
1827:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1828:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1829:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1830:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         CapSense_1_posFiltersData[firstTimeIndex] = 1u;
1831:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1832:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     else
1833:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1834:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Do filtering */
1835:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTER
1836:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER))
1837:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1838:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 tempPos = (uint8) position;
1839:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_MedianFilter(position,
1840:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                 (uint16)CapSense_1_posFiltersData[p
1841:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                 (uint16)CapSense_1_posFiltersData[p
1842:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex + 1u] =
1843:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                              CapSense_1_posFiltersD
1844:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = tempPos;
1845:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 63


1846:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /*(0u != (CapSense_1_MEDIAN_FILTER &
1847:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *         CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1848:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1849:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1850:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if(0u!=(CapSense_1_AVERAGING_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTER
1851:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER))
1852:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1853:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 tempPos = (uint8) position;
1854:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_AveragingFilter(position,
1855:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                 (uint16)CapSense_1_posFiltersData[p
1856:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                 (uint16)CapSense_1_posFiltersData[p
1857:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex+1u]=CapSense_1_posFiltersData[po
1858:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = tempPos;
1859:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1860:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_AVERAGING_FILTER & \
1861:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1862:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1863:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1864:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_IIR2_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_
1865:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_IIR2_FILTER))
1866:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1867:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_IIR2Filter(position,
1868:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
1869:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
1870:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1871:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_IIR2_FILTER & \
1872:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1873:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1874:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1875:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_IIR4_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTERS_
1876:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_IIR4_FILTER))
1877:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1878:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_IIR4Filter(position,
1879:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
1880:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
1881:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1882:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_IIR4_FILTER & \
1883:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1884:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1885:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1886:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_JITTER_FILTER & CapSense_1_LINEAR_SLIDERS_POS_FILTER
1887:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_JITTER_FILTER))
1888:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
1889:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_JitterFilter(position,
1890:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
1891:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
1892:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
1893:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_JITTER_FILTER & \
1894:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK))
1895:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
1896:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
1897:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1898:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1899:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1900:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1901:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
1902:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 64


1903:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Maximum wasn't found */
1904:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             position = 0xFFFFu;
1905:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1906:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if(0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK)
1907:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Reset filters */
1908:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_1_ANY_POS_FILTER))
1909:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1910:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_posFiltersData[firstTimeIndex] = 0u;
1911:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
1912:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (0u != CapSense_1_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1913:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
1914:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1915:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1916:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (position);
1917:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
1918:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ((CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT >
1919:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1920:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1921:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if((CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT > 0u))
1922:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
1923:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_GetRadialCentroidPos
1924:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
1925:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1926:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
1927:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Checks the CapSense_1_Signal[ ] array for a centroid within
1928:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  a slider specified range. The centroid position is calculated according to the resolution
1929:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1930:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  result if enabled.
1931:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1932:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
1933:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  Widget number.
1934:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1935:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  #define CapSense_1_"widget_name"__RS           5
1936:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1937:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
1938:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a position value of the radial slider.
1939:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1940:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
1941:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
1942:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1943:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
1944:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1945:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1946:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1947:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  There are no checks of the widget type argument provided to this function.
1948:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1949:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1950:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Note:
1951:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1952:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1953:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1954:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  that noise will not generate a false centroid.
1955:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
1956:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
1957:Generated_Source\PSoC4/CapSense_1_CSHL.c ****      uint16 CapSense_1_GetRadialCentroidPos(uint32 widget)
1958:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
1959:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 65


1960:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posIndex;
1961:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 firstTimeIndex = CapSense_1_posFiltersData[widget];
1962:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posFiltersMask = CapSense_1_posFiltersMask[widget];
1963:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1964:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1965:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1966:Generated_Source\PSoC4/CapSense_1_CSHL.c ****              (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1967:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 tempPos;
1968:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)) 
1969:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                *   (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK
1970:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                */
1971:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1972:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 maximum;
1973:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 position;
1974:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 offset = CapSense_1_rawDataIndex[widget];
1975:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 count = CapSense_1_numberOfSensors[widget];
1976:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1977:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Find Maximum within centroid */
1978:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
1979:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             maximum = CapSense_1_FindMaximum(offset, count, (uint8)CapSense_1_fingerThreshold[widge
1980:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
1981:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             maximum = CapSense_1_FindMaximum(offset, count, (uint8)CapSense_1_fingerThreshold[widge
1982:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
1983:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1984:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (maximum != CapSense_1_MAXIMUM_CENTROID)
1985:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
1986:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Calculate centroid */
1987:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             position = (uint16) CapSense_1_CalcCentroid(maximum,
1988:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                          offset, count, CapSense_1_centroidMult[widget], CapSense_1_noiseThreshold[
1989:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1990:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)
1991:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1992:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_1_ANY_POS_FILTER))
1993:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
1994:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Calculate position to store filters data */
1995:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1996:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
1997:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (0u == CapSense_1_posFiltersData[firstTimeIndex])
1998:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
1999:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Init filters */
2000:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         CapSense_1_posFiltersData[posIndex] = (uint8) position;
2001:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if ((0u != (CapSense_1_MEDIAN_FILTER & \
2002:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
2003:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                              (0u != (CapSense_1_AVERAGING_FILTER & \
2004:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)))
2005:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2006:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER))  ||
2007:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER)) )
2008:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2009:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex + 1u] = (uint8) position;
2010:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2011:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & \
2012:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
2013:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *   (0u != (CapSense_1_AVERAGING_FILTER & \
2014:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)))
2015:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2016:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 66


2017:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         CapSense_1_posFiltersData[firstTimeIndex] = 1u;
2018:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
2019:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     else
2020:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
2021:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Do filtering */
2022:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTER
2023:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER))
2024:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2025:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 tempPos = (uint8) position;
2026:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_MedianFilter(position,
2027:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                         CapSense_1_posFiltersData[p
2028:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                         CapSense_1_posFiltersData[p
2029:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex + 1u] =
2030:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                               CapSense_1_posFilters
2031:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = tempPos;
2032:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2033:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_MEDIAN_FILTER &
2034:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2035:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2036:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2037:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_AVERAGING_FILTER & \
2038:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2039:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER))
2040:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2041:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 tempPos = (uint8) position;
2042:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_AveragingFilter(position,
2043:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2044:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2045:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex+1u]= CapSense_1_posFiltersData[p
2046:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = tempPos;
2047:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2048:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_AVERAGING_FILTER & \
2049:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2050:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2051:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2052:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_IIR2_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_
2053:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_IIR2_FILTER))
2054:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2055:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_IIR2Filter(position,
2056:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
2057:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
2058:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2059:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_IIR2_FILTER &
2060:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2061:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2062:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2063:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_IIR4_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTERS_
2064:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_IIR4_FILTER))
2065:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2066:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_IIR4Filter(position,
2067:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
2068:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
2069:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2070:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_IIR4_FILTER &
2071:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *          CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2072:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2073:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 67


2074:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #if (0u != (CapSense_1_JITTER_FILTER & CapSense_1_RADIAL_SLIDERS_POS_FILTER
2075:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_1_JITTER_FILTER))
2076:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             {
2077:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 position = CapSense_1_JitterFilter(position,
2078:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                          CapSense_1_posFiltersData[
2079:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 CapSense_1_posFiltersData[posIndex] = (uint8) position;
2080:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             }
2081:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         #endif /* (0u != (CapSense_1_JITTER_FILTER &
2082:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                *           CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK))
2083:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                */
2084:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
2085:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2086:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2087:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2088:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2089:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
2090:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2091:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Maximum was not found */
2092:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             position = 0xFFFFu;
2093:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2094:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK)
2095:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Reset filters */
2096:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if((posFiltersMask & CapSense_1_ANY_POS_FILTER) != 0u)
2097:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
2098:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_posFiltersData[firstTimeIndex] = 0u;
2099:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2100:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (0u != CapSense_1_RADIAL_SLIDERS_POS_FILTERS_MASK) */
2101:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2102:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2103:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (position);
2104:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2105:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ((CapSense_1_TOTAL_RADIAL_SLIDERS_COUNT > 0u) || (CapSense_1_TOTAL_LINEAR_SLIDERS_COUNT >
2106:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2107:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2108:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if(CapSense_1_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u)
2109:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2110:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_GetTouchCentroidPos
2111:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2112:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2113:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2114:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  If a finger is present on a touchpad, this function calculates the X and Y
2115:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  position of the finger by calculating the centroids within touchpad specified
2116:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  range. The X and Y positions are calculated according to the API resolutions set in the
2117:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense customizer. Returns 1 if a finger is on the touchpad.
2118:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The position filter is applied to the result if enabled.
2119:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
2120:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  customizer.
2121:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2122:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2123:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  Widget number.
2124:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  For every touchpad widget there are defines in this format:
2125:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  #define CapSense_1_"widget_name"__TP            5
2126:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2127:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
2128:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  result of calculation of X and Y position are stored.
2129:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  pos[0u]  - position of X
2130:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  pos[1u]  - position of Y
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 68


2131:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2132:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2133:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
2134:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2135:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2136:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2137:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2138:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2139:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   There are no checks of the widget type argument provided to this function.
2140:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
2141:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *   calculations.
2142:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2143:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2144:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 CapSense_1_GetTouchCentroidPos(uint32 widget, uint16* pos)
2145:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2146:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)
2147:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posXIndex;
2148:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posYIndex;
2149:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 firstTimeIndex = CapSense_1_posFiltersData[widget];
2150:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint8 posFiltersMask = CapSense_1_posFiltersMask[widget];
2151:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK) */
2152:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2153:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)) || \
2154:Generated_Source\PSoC4/CapSense_1_CSHL.c ****              (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)))
2155:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             uint16 tempPos;
2156:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)) || \
2157:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                *   (0u != (CapSense_1_AVERAGING_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)))
2158:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                */
2159:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2160:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 MaxX;
2161:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 MaxY;
2162:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 posX;
2163:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 posY;
2164:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 touch = 0u;
2165:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 offset = CapSense_1_rawDataIndex[widget];
2166:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 count = CapSense_1_numberOfSensors[widget];
2167:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2168:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* Find Maximum within X centroid */
2169:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (CapSense_1_IS_DIPLEX_SLIDER)
2170:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             MaxX = CapSense_1_FindMaximum(offset, count, CapSense_1_fingerThreshold[widget], 0u);
2171:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #else
2172:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             MaxX = CapSense_1_FindMaximum(offset, count, CapSense_1_fingerThreshold[widget]);
2173:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
2174:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2175:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (MaxX != CapSense_1_MAXIMUM_CENTROID)
2176:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2177:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             offset = CapSense_1_rawDataIndex[widget + 1u];
2178:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             count = CapSense_1_numberOfSensors[widget + 1u];
2179:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2180:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Find Maximum within Y centroid */
2181:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #if (CapSense_1_IS_DIPLEX_SLIDER)
2182:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 MaxY = CapSense_1_FindMaximum(offset, count, CapSense_1_fingerThreshold[widget + 1u
2183:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #else
2184:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 MaxY = CapSense_1_FindMaximum(offset, count, CapSense_1_fingerThreshold[widget + 1u
2185:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             #endif /* (CapSense_1_IS_DIPLEX_SLIDER) */
2186:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2187:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if (MaxY != CapSense_1_MAXIMUM_CENTROID)
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 69


2188:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2189:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* X and Y maximums are found = true touch */
2190:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 touch = 1u;
2191:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2192:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Calculate Y centroid */
2193:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 posY = CapSense_1_CalcCentroid(MaxY, offset, count,
2194:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_centroidMult[widget + 1u], CapSense_1_noiseThreshold[widget 
2195:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2196:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Calculate X centroid */
2197:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 offset = CapSense_1_rawDataIndex[widget];
2198:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 count = CapSense_1_numberOfSensors[widget];
2199:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2200:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 posX = CapSense_1_CalcCentroid(MaxX, offset, count,
2201:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_centroidMult[widget],CapSense_1_noiseThreshold[widget]);
2202:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2203:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #if (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)
2204:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     /* Check if this TP has enabled filters */
2205:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_1_ANY_POS_FILTER))
2206:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     {
2207:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         /* Calculate position to store filters data */
2208:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
2209:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         posYIndex  = CapSense_1_posFiltersData[widget + 1u];
2210:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2211:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         if (0u == CapSense_1_posFiltersData[firstTimeIndex])
2212:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
2213:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             /* Init filters */
2214:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_posFiltersData[posXIndex] = posX;
2215:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_posFiltersData[posYIndex] = posY;
2216:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2217:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if((0u != (CapSense_1_MEDIAN_FILTER & \
2218:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))|| \
2219:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 (0u != (CapSense_1_AVERAGING_FILTER & \
2220:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)))
2221:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2222:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER)) ||
2223:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER)) )
2224:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2225:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex + 1u] = posX;
2226:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex + 1u] = posY;
2227:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2228:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* ((0u != (CapSense_1_MEDIAN_FILTER & \
2229:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *           CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)) || \
2230:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *    (0u != (CapSense_1_AVERAGING_FILTER & \
2231:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *            CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)))
2232:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2233:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2234:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             CapSense_1_posFiltersData[firstTimeIndex] = 1u;
2235:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
2236:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         else
2237:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         {
2238:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             /* Do filtering */
2239:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if (0u != (CapSense_1_MEDIAN_FILTER & CapSense_1_TOUCH_PADS_POS_FILTER
2240:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_MEDIAN_FILTER))
2241:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2242:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     tempPos = posX;
2243:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posX = (uint8) CapSense_1_MedianFilter(posX,
2244:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                       CapSense_1_posFiltersData[pos
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 70


2245:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                       CapSense_1_posFiltersData[pos
2246:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex + 1u] =
2247:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                              CapSense_1_posFiltersD
2248:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex] = tempPos;
2249:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2250:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     tempPos = posY;
2251:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posY = (uint8) CapSense_1_MedianFilter(posY,
2252:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2253:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2254:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex + 1u] =
2255:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                              CapSense_1_posFiltersD
2256:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex] = tempPos;
2257:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2258:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2259:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_MEDIAN_FILTER & \
2260:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *          CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2261:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2262:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2263:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if(0u !=(CapSense_1_AVERAGING_FILTER & CapSense_1_TOUCH_PADS_POS_FILTE
2264:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_AVERAGING_FILTER))
2265:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2266:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     tempPos = posX;
2267:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posX = (uint8) CapSense_1_AveragingFilter(posX,
2268:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2269:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                        CapSense_1_posFiltersData[po
2270:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex + 1u] =
2271:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                              CapSense_1_posFiltersD
2272:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex] = tempPos;
2273:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2274:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     tempPos = posY;
2275:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posY = (uint8) CapSense_1_AveragingFilter(posY,
2276:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                       CapSense_1_posFiltersData[pos
2277:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                       CapSense_1_posFiltersData[pos
2278:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex + 1u] =
2279:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                             CapSense_1_posFiltersDa
2280:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex] = tempPos;
2281:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2282:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2283:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_AVERAGING_FILTER & \
2284:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *           CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2285:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2286:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2287:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if (0u != (CapSense_1_IIR2_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_
2288:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_IIR2_FILTER))
2289:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2290:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posX = (uint8) CapSense_1_IIR2Filter(posX,
2291:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                            CapSense_1_posFiltersDat
2292:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex] = posX;
2293:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2294:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posY = (uint8) CapSense_1_IIR2Filter(posY,
2295:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                             CapSense_1_posFiltersDa
2296:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex] = posY;
2297:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2298:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2299:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_IIR2_FILTER & \
2300:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *          CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2301:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 71


2302:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2303:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if (0u != (CapSense_1_IIR4_FILTER & CapSense_1_TOUCH_PADS_POS_FILTERS_
2304:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_IIR4_FILTER))
2305:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 {
2306:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posX = (uint8) CapSense_1_IIR4Filter((uint16)posX,
2307:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
2308:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posXIndex] = posX;
2309:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2310:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     posY = (uint8) CapSense_1_IIR4Filter((uint16)posY,
2311:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                     (uint16)CapSense_1_posFiltersDa
2312:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     CapSense_1_posFiltersData[posYIndex] = posY;
2313:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 }
2314:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2315:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_IIR4_FILTER & \
2316:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *           CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2317:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2318:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2319:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #if (0u != (CapSense_1_JITTER_FILTER & CapSense_1_TOUCH_PADS_POS_FILTER
2320:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_1_JITTER_FILTER))
2321:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     {
2322:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         posX = (uint8) CapSense_1_JitterFilter(posX,
2323:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                             CapSense_1_posFiltersDa
2324:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         CapSense_1_posFiltersData[posXIndex] = posX;
2325:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2326:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         posY = (uint8) CapSense_1_JitterFilter(posY,
2327:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                                                             CapSense_1_posFiltersDa
2328:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                         CapSense_1_posFiltersData[posYIndex] = posY;
2329:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                     }
2330:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                             #endif /* (0u != (CapSense_1_JITTER_FILTER & \
2331:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    *           CapSense_1_TOUCH_PADS_POS_FILTERS_MASK))
2332:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                                    */
2333:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                         }
2334:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     }
2335:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 #endif /* (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK) */
2336:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2337:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Save positions */
2338:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 pos[0u] = posX;
2339:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 pos[1u] = posY;
2340:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2341:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2342:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2343:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #if (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK)
2344:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if(touch == 0u)
2345:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2346:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 /* Reset filters */
2347:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if ((posFiltersMask & CapSense_1_ANY_POS_FILTER) != 0u)
2348:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
2349:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     CapSense_1_posFiltersData[firstTimeIndex] = 0u;
2350:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2351:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2352:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         #endif /* (0u != CapSense_1_TOUCH_PADS_POS_FILTERS_MASK) */
2353:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2354:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (touch);
2355:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2356:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_TOTAL_TOUCH_PADS_BASIC_COUNT > 0u) */
2357:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2358:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 72


2359:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)) || \
2360:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_MEDIAN_FILTER)) || \
2361:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       ((CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)) )
2362:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2363:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_MedianFilter
2364:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2365:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2366:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2367:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the Median filter function.
2368:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the
2369:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  median value.
2370:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2371:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2372:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2373:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2374:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x3:  Before previous value.
2375:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2376:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2377:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2378:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2379:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2380:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2381:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2382:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2383:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2384:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2385:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2386:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
2387:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2388:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 tmp;
2389:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2390:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (x1 > x2)
2391:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2392:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             tmp = x2;
2393:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             x2 = x1;
2394:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             x1 = tmp;
2395:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2396:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2397:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (x2 > x3)
2398:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2399:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             x2 = x3;
2400:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2401:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2402:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
2403:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2404:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_MEDIAN_FILTER)) || \
2405:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_MEDIAN_FILTER)) || \
2406:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       ((CapSense_1_TUNING_METHOD == CapSense_1__TUNING_AUTO)) ) */
2407:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2408:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2409:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER)) || \
2410:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_AVERAGING_FILTER)) )
2411:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2412:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_AveragingFilter
2413:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2414:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2415:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 73


2416:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the Averaging filter function.
2417:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  The averaging filter looks at the three most recent samples of a position and
2418:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  reports the averaging value.
2419:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2420:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2421:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2422:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2423:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x3:  Before previous value.
2424:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2425:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2426:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2427:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2428:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2429:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2430:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2431:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2432:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2433:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2434:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2435:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_AveragingFilter(uint16 x1, uint16 x2, uint16 x3)
2436:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2437:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp = ((uint32)x1 + (uint32)x2 + (uint32)x3) / 3u;
2438:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2439:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
2440:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2441:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_AVERAGING_FILTER) || \
2442:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_AVERAGING_FILTER) ) */
2443:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2444:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2445:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER)) || \
2446:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_IIR2_FILTER)) )
2447:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2448:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_IIR2Filter
2449:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2450:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2451:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2452:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the IIR1/2 filter function. IIR1/2 = 1/2current + 1/2previous.
2453:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2454:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2455:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2456:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2457:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2458:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2459:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2460:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2461:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2462:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2463:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2464:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2465:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2466:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2467:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2468:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_IIR2Filter(uint16 x1, uint16 x2)
2469:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2470:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp;
2471:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2472:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* IIR = 1/2 Current Value+ 1/2 Previous Value */
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 74


2473:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
2474:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp >>= 1u;
2475:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2476:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
2477:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2478:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR2_FILTER)) || \
2479:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        *    (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_IIR2_FILTER)) )
2480:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        */
2481:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2482:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2483:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER)) || \
2484:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_IIR4_FILTER)) )
2485:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2486:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_IIR4Filter
2487:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2488:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2489:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2490:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the IIR1/4 filter function. IIR1/4 = 1/4current + 3/4previous.
2491:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2492:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2493:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2494:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2495:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2496:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2497:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns a filtered value.
2498:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2499:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2500:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2501:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2502:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2503:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2504:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2505:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2506:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_IIR4Filter(uint16 x1, uint16 x2)
2507:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1669              		.loc 1 2507 0
 1670              		.cfi_startproc
 1671 0000 80B5     		push	{r7, lr}
 1672              		.cfi_def_cfa_offset 8
 1673              		.cfi_offset 7, -8
 1674              		.cfi_offset 14, -4
 1675 0002 84B0     		sub	sp, sp, #16
 1676              		.cfi_def_cfa_offset 24
 1677 0004 00AF     		add	r7, sp, #0
 1678              		.cfi_def_cfa_register 7
 1679 0006 021C     		mov	r2, r0
 1680 0008 BB1D     		add	r3, r7, #6
 1681 000a 1A80     		strh	r2, [r3]
 1682 000c 3B1D     		add	r3, r7, #4
 1683 000e 0A1C     		add	r2, r1, #0
 1684 0010 1A80     		strh	r2, [r3]
2508:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp;
2509:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2510:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* IIR = 1/4 Current Value + 3/4 Previous Value */
2511:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp = (uint32)x1 + (uint32)x2;
 1685              		.loc 1 2511 0
 1686 0012 BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 75


 1687 0014 1A88     		ldrh	r2, [r3]
 1688 0016 3B1D     		add	r3, r7, #4
 1689 0018 1B88     		ldrh	r3, [r3]
 1690 001a D318     		add	r3, r2, r3
 1691 001c FB60     		str	r3, [r7, #12]
2512:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp += ((uint32)x2 << 1u);
 1692              		.loc 1 2512 0
 1693 001e 3B1D     		add	r3, r7, #4
 1694 0020 1B88     		ldrh	r3, [r3]
 1695 0022 5B00     		lsl	r3, r3, #1
 1696 0024 FA68     		ldr	r2, [r7, #12]
 1697 0026 D318     		add	r3, r2, r3
 1698 0028 FB60     		str	r3, [r7, #12]
2513:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp >>= 2u;
 1699              		.loc 1 2513 0
 1700 002a FB68     		ldr	r3, [r7, #12]
 1701 002c 9B08     		lsr	r3, r3, #2
 1702 002e FB60     		str	r3, [r7, #12]
2514:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2515:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
 1703              		.loc 1 2515 0
 1704 0030 FB68     		ldr	r3, [r7, #12]
 1705 0032 9BB2     		uxth	r3, r3
2516:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 1706              		.loc 1 2516 0
 1707 0034 181C     		mov	r0, r3
 1708 0036 BD46     		mov	sp, r7
 1709 0038 04B0     		add	sp, sp, #16
 1710              		@ sp needed
 1711 003a 80BD     		pop	{r7, pc}
 1712              		.cfi_endproc
 1713              	.LFE56:
 1714              		.size	CapSense_1_IIR4Filter, .-CapSense_1_IIR4Filter
 1715              		.section	.text.CapSense_1_GetWidgetNumber,"ax",%progbits
 1716              		.align	2
 1717              		.global	CapSense_1_GetWidgetNumber
 1718              		.code	16
 1719              		.thumb_func
 1720              		.type	CapSense_1_GetWidgetNumber, %function
 1721              	CapSense_1_GetWidgetNumber:
 1722              	.LFB57:
2517:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR4_FILTER)) || \
2518:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        *    (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_IIR4_FILTER)) )
2519:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        */
2520:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2521:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2522:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER)) || \
2523:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_JITTER_FILTER)) || \
2524:Generated_Source\PSoC4/CapSense_1_CSHL.c ****       (0u != (CapSense_1_TRACKPAD_GEST_POS_FILTERS_MASK & CapSense_1_JITTER_FILTER)))
2525:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2526:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: uint16 CapSense_1_JitterFilter
2527:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2528:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2529:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2530:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the Jitter filter function.
2531:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2532:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 76


2533:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2534:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2535:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2536:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2537:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2538:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2539:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2540:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2541:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2542:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2543:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2544:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2545:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2546:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_JitterFilter(uint16 x1, uint16 x2)
2547:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2548:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (x1 > x2)
2549:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2550:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             x1--;
2551:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2552:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         else
2553:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2554:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if (x1 < x2)
2555:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2556:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 x1++;
2557:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2558:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2559:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2560:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return x1;
2561:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2562:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* ( (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_JITTER_FILTER)) || \
2563:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        *    (0u != (CapSense_1_POS_FILTERS_MASK & CapSense_1_JITTER_FILTER)) )
2564:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        *    (0u != (CapSense_1_TRACKPAD_GEST_POS_FILTERS_MASK & CapSense_1_JITTER_FILTER)) )
2565:Generated_Source\PSoC4/CapSense_1_CSHL.c ****        */
2566:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2567:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2568:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER))
2569:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2570:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_IIR8Filter
2571:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2572:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2573:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2574:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the IIR1/8 filter function. IIR1/8 = 1/8current + 7/8previous.
2575:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Only applies for raw data.
2576:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2577:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2578:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2579:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2580:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2581:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2582:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2583:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2584:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2585:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2586:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2587:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2588:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2589:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 77


2590:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2591:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_IIR8Filter(uint16 x1, uint16 x2)
2592:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2593:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp;
2594:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2595:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* IIR = 1/8 Current Value + 7/8 Previous Value */
2596:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp = (uint32)x1;
2597:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp += (((uint32)x2 << 3u) - ((uint32)x2));
2598:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp >>= 3u;
2599:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2600:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
2601:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2602:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR8_FILTER)) */
2603:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2604:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2605:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (0u != (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER))
2606:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2607:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_IIR16Filter
2608:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2609:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2610:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2611:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  This is the IIR1/16 filter function. IIR1/16 = 1/16current + 15/16previous.
2612:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Only applies for raw data.
2613:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2614:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2615:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x1:  Current value.
2616:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  x2:  Previous value.
2617:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2618:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2619:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns filtered value.
2620:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2621:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2622:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None.
2623:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2624:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2625:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2626:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2627:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2628:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint16 CapSense_1_IIR16Filter(uint16 x1, uint16 x2)
2629:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2630:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 tmp;
2631:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2632:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         /* IIR = 1/16 Current Value + 15/16 Previous Value */
2633:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp = (uint32)x1;
2634:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp += (((uint32)x2 << 4u) - ((uint32)x2));
2635:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         tmp >>= 4u;
2636:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2637:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return ((uint16) tmp);
2638:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2639:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (CapSense_1_RAW_FILTER_MASK & CapSense_1_IIR16_FILTER) */
2640:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2641:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2642:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (0u != (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT))
2643:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2644:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2645:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_GetMatrixButtonPos
2646:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 78


2647:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2648:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2649:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Function calculates and returns a touch position (column and row) for the matrix
2650:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  button widget.
2651:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2652:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2653:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  widget:  widget number;
2654:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  pos:     pointer to an array of two uint8, where touch position will be
2655:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *           stored:
2656:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *           pos[0] - column position;
2657:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *           pos[1] - raw position.
2658:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2659:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2660:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Returns 1 if row and column sensors of matrix button are active, 0 - in other
2661:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  cases.
2662:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2663:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2664:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_fingerThreshold[ ] - used to store the finger threshold for all widgets.
2665:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_sensorSignal[ ] - used to store a difference between the current value of
2666:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  raw data and a previous value of the baseline.
2667:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2668:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2669:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2670:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2671:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2672:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     uint32 CapSense_1_GetMatrixButtonPos(uint32 widget, uint8* pos)
2673:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
2674:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 i;
2675:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint32 retVal = 0u;
2676:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 row_sig_max = 0u;
2677:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint16 col_sig_max = 0u;
2678:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 row_ind = 0u;
2679:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         uint8 col_ind = 0u;
2680:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2681:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         if (CapSense_1_CheckIsWidgetActive(widget) == 1u)
2682:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         {
2683:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Find row number with maximal signal value */
2684:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             for(i = CapSense_1_rawDataIndex[widget]; i < (CapSense_1_rawDataIndex[widget] + \
2685:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                  CapSense_1_numberOfSensors[widget]); i++)
2686:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2687:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (CapSense_1_sensorSignal[i] > col_sig_max)
2688:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
2689:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     col_ind = i;
2690:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     col_sig_max = CapSense_1_sensorSignal[i];
2691:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2692:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2693:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2694:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             /* Find row number with maximal signal value */
2695:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             for(i = CapSense_1_rawDataIndex[widget+1u]; i < (CapSense_1_rawDataIndex[widget+1u] + \
2696:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                  CapSense_1_numberOfSensors[widget+1u]); i++)
2697:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2698:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 if (CapSense_1_sensorSignal[i] > row_sig_max)
2699:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 {
2700:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     row_ind = i;
2701:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                     row_sig_max = CapSense_1_sensorSignal[i];
2702:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 }
2703:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 79


2704:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2705:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             if((col_sig_max >= CapSense_1_fingerThreshold[widget]) && \
2706:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                (row_sig_max >= CapSense_1_fingerThreshold[widget+1u]))
2707:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             {
2708:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 pos[0u] = col_ind - CapSense_1_rawDataIndex[widget];
2709:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 pos[1u] = row_ind - CapSense_1_rawDataIndex[widget+1u];
2710:Generated_Source\PSoC4/CapSense_1_CSHL.c ****                 retVal = 1u;
2711:Generated_Source\PSoC4/CapSense_1_CSHL.c ****             }
2712:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         }
2713:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         return (retVal);
2714:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
2715:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2716:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #endif /* (0u != (CapSense_1_TOTAL_MATRIX_BUTTONS_COUNT)) */
2717:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2718:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
2719:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetWidgetNumber
2720:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
2721:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2722:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
2723:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the widget number for the sensor.
2724:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2725:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
2726:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor: sensor index. The value of index can be
2727:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  from 0 to (CapSense_1_TOTAL_SENSOR_COUNT-1).
2728:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2729:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
2730:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the widget number for the sensor.
2731:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2732:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
2733:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_widgetNumber[]  - stores widget numbers.
2734:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2735:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
2736:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
2737:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2738:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
2739:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint32 CapSense_1_GetWidgetNumber(uint32 sensor)
2740:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1723              		.loc 1 2740 0
 1724              		.cfi_startproc
 1725 0000 80B5     		push	{r7, lr}
 1726              		.cfi_def_cfa_offset 8
 1727              		.cfi_offset 7, -8
 1728              		.cfi_offset 14, -4
 1729 0002 82B0     		sub	sp, sp, #8
 1730              		.cfi_def_cfa_offset 16
 1731 0004 00AF     		add	r7, sp, #0
 1732              		.cfi_def_cfa_register 7
 1733 0006 7860     		str	r0, [r7, #4]
2741:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return((uint32)CapSense_1_widgetNumber[sensor]);
 1734              		.loc 1 2741 0
 1735 0008 034A     		ldr	r2, .L106
 1736 000a 7B68     		ldr	r3, [r7, #4]
 1737 000c D318     		add	r3, r2, r3
 1738 000e 1B78     		ldrb	r3, [r3]
2742:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1739              		.loc 1 2742 0
 1740 0010 181C     		mov	r0, r3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 80


 1741 0012 BD46     		mov	sp, r7
 1742 0014 02B0     		add	sp, sp, #8
 1743              		@ sp needed
 1744 0016 80BD     		pop	{r7, pc}
 1745              	.L107:
 1746              		.align	2
 1747              	.L106:
 1748 0018 00000000 		.word	CapSense_1_widgetNumber
 1749              		.cfi_endproc
 1750              	.LFE57:
 1751              		.size	CapSense_1_GetWidgetNumber, .-CapSense_1_GetWidgetNumber
 1752              		.section	.text.CapSense_1_GetLowBaselineReset,"ax",%progbits
 1753              		.align	2
 1754              		.global	CapSense_1_GetLowBaselineReset
 1755              		.code	16
 1756              		.thumb_func
 1757              		.type	CapSense_1_GetLowBaselineReset, %function
 1758              	CapSense_1_GetLowBaselineReset:
 1759              	.LFB58:
2743:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2744:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
2745:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetLowBaselineReset
2746:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
2747:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2748:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
2749:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns the low baseline reset threshold value for the  sensor.
2750:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2751:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
2752:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor: sensor index. The value of index can be
2753:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  from 0 to (CapSense_1_TOTAL_SENSOR_COUNT-1).
2754:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2755:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
2756:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  low baseline reset threshold value a sensor.
2757:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2758:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
2759:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_lowBaselineReset[]  - stores low baseline reset values.
2760:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2761:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
2762:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
2763:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2764:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
2765:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetLowBaselineReset(uint32 sensor)
2766:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1760              		.loc 1 2766 0
 1761              		.cfi_startproc
 1762 0000 80B5     		push	{r7, lr}
 1763              		.cfi_def_cfa_offset 8
 1764              		.cfi_offset 7, -8
 1765              		.cfi_offset 14, -4
 1766 0002 82B0     		sub	sp, sp, #8
 1767              		.cfi_def_cfa_offset 16
 1768 0004 00AF     		add	r7, sp, #0
 1769              		.cfi_def_cfa_register 7
 1770 0006 7860     		str	r0, [r7, #4]
2767:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_lowBaselineReset[sensor]);
 1771              		.loc 1 2767 0
 1772 0008 034A     		ldr	r2, .L110
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 81


 1773 000a 7B68     		ldr	r3, [r7, #4]
 1774 000c D318     		add	r3, r2, r3
 1775 000e 1B78     		ldrb	r3, [r3]
2768:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1776              		.loc 1 2768 0
 1777 0010 181C     		mov	r0, r3
 1778 0012 BD46     		mov	sp, r7
 1779 0014 02B0     		add	sp, sp, #8
 1780              		@ sp needed
 1781 0016 80BD     		pop	{r7, pc}
 1782              	.L111:
 1783              		.align	2
 1784              	.L110:
 1785 0018 00000000 		.word	CapSense_1_lowBaselineReset
 1786              		.cfi_endproc
 1787              	.LFE58:
 1788              		.size	CapSense_1_GetLowBaselineReset, .-CapSense_1_GetLowBaselineReset
 1789              		.section	.text.CapSense_1_GetDebounce,"ax",%progbits
 1790              		.align	2
 1791              		.global	CapSense_1_GetDebounce
 1792              		.code	16
 1793              		.thumb_func
 1794              		.type	CapSense_1_GetDebounce, %function
 1795              	CapSense_1_GetDebounce:
 1796              	.LFB59:
2769:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2770:Generated_Source\PSoC4/CapSense_1_CSHL.c **** /*******************************************************************************
2771:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Function Name: CapSense_1_GetDebounce
2772:Generated_Source\PSoC4/CapSense_1_CSHL.c **** ********************************************************************************
2773:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2774:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Summary:
2775:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  This API returns a debounce value.
2776:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2777:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Parameters:
2778:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  sensor: sensor index. The value of index can be
2779:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  from 0 to (CapSense_1_TOTAL_SENSOR_COUNT-1).
2780:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2781:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Return:
2782:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  Debounce value
2783:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2784:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Global Variables:
2785:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  CapSense_1_debounce[]  - stores the debounce value.
2786:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2787:Generated_Source\PSoC4/CapSense_1_CSHL.c **** * Side Effects:
2788:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *  None
2789:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *
2790:Generated_Source\PSoC4/CapSense_1_CSHL.c **** *******************************************************************************/
2791:Generated_Source\PSoC4/CapSense_1_CSHL.c **** uint8 CapSense_1_GetDebounce(uint32 widget)
2792:Generated_Source\PSoC4/CapSense_1_CSHL.c **** {
 1797              		.loc 1 2792 0
 1798              		.cfi_startproc
 1799 0000 80B5     		push	{r7, lr}
 1800              		.cfi_def_cfa_offset 8
 1801              		.cfi_offset 7, -8
 1802              		.cfi_offset 14, -4
 1803 0002 82B0     		sub	sp, sp, #8
 1804              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 82


 1805 0004 00AF     		add	r7, sp, #0
 1806              		.cfi_def_cfa_register 7
 1807 0006 7860     		str	r0, [r7, #4]
2793:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     return(CapSense_1_debounce[widget]);
 1808              		.loc 1 2793 0
 1809 0008 034A     		ldr	r2, .L114
 1810 000a 7B68     		ldr	r3, [r7, #4]
 1811 000c D318     		add	r3, r2, r3
 1812 000e 1B78     		ldrb	r3, [r3]
2794:Generated_Source\PSoC4/CapSense_1_CSHL.c **** }
 1813              		.loc 1 2794 0
 1814 0010 181C     		mov	r0, r3
 1815 0012 BD46     		mov	sp, r7
 1816 0014 02B0     		add	sp, sp, #8
 1817              		@ sp needed
 1818 0016 80BD     		pop	{r7, pc}
 1819              	.L115:
 1820              		.align	2
 1821              	.L114:
 1822 0018 00000000 		.word	CapSense_1_debounce
 1823              		.cfi_endproc
 1824              	.LFE59:
 1825              		.size	CapSense_1_GetDebounce, .-CapSense_1_GetDebounce
 1826              		.section	.text.CapSense_1_EnableRawDataFilters,"ax",%progbits
 1827              		.align	2
 1828              		.global	CapSense_1_EnableRawDataFilters
 1829              		.code	16
 1830              		.thumb_func
 1831              		.type	CapSense_1_EnableRawDataFilters, %function
 1832              	CapSense_1_EnableRawDataFilters:
 1833              	.LFB60:
2795:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2796:Generated_Source\PSoC4/CapSense_1_CSHL.c **** #if (CapSense_1_RAW_FILTER_MASK != 0u)
2797:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2798:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_EnableRawDataFilters
2799:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2800:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2801:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2802:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Enables the rawdata filters for the sensor signals.
2803:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2804:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2805:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2806:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2807:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2808:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2809:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2810:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2811:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_enableRawFilters defines if the filters are enabled or not.
2812:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2813:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2814:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2815:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2816:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2817:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_EnableRawDataFilters(void)
2818:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1834              		.loc 1 2818 0
 1835              		.cfi_startproc
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 83


 1836 0000 80B5     		push	{r7, lr}
 1837              		.cfi_def_cfa_offset 8
 1838              		.cfi_offset 7, -8
 1839              		.cfi_offset 14, -4
 1840 0002 00AF     		add	r7, sp, #0
 1841              		.cfi_def_cfa_register 7
2819:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_enableRawFilters = CapSense_1_RAW_FILTERS_ENABLED;
 1842              		.loc 1 2819 0
 1843 0004 024B     		ldr	r3, .L117
 1844 0006 0122     		mov	r2, #1
 1845 0008 1A70     		strb	r2, [r3]
2820:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 1846              		.loc 1 2820 0
 1847 000a BD46     		mov	sp, r7
 1848              		@ sp needed
 1849 000c 80BD     		pop	{r7, pc}
 1850              	.L118:
 1851 000e C046     		.align	2
 1852              	.L117:
 1853 0010 00000000 		.word	CapSense_1_enableRawFilters
 1854              		.cfi_endproc
 1855              	.LFE60:
 1856              		.size	CapSense_1_EnableRawDataFilters, .-CapSense_1_EnableRawDataFilters
 1857              		.section	.text.CapSense_1_DisableRawDataFilters,"ax",%progbits
 1858              		.align	2
 1859              		.global	CapSense_1_DisableRawDataFilters
 1860              		.code	16
 1861              		.thumb_func
 1862              		.type	CapSense_1_DisableRawDataFilters, %function
 1863              	CapSense_1_DisableRawDataFilters:
 1864              	.LFB61:
2821:Generated_Source\PSoC4/CapSense_1_CSHL.c **** 
2822:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     /*******************************************************************************
2823:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Function Name: CapSense_1_DisableRawDataFilters
2824:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     ********************************************************************************
2825:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2826:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Summary:
2827:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  Disables the rawdata filters for the sensor signals.
2828:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2829:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Parameters:
2830:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2831:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2832:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Return:
2833:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2834:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2835:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Global Variables:
2836:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  CapSense_1_enableRawFilters defines if the filters are enabled or not.
2837:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2838:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     * Side Effects:
2839:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *  None
2840:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *
2841:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     *******************************************************************************/
2842:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     void CapSense_1_DisableRawDataFilters(void)
2843:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     {
 1865              		.loc 1 2843 0
 1866              		.cfi_startproc
 1867 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 84


 1868              		.cfi_def_cfa_offset 8
 1869              		.cfi_offset 7, -8
 1870              		.cfi_offset 14, -4
 1871 0002 00AF     		add	r7, sp, #0
 1872              		.cfi_def_cfa_register 7
2844:Generated_Source\PSoC4/CapSense_1_CSHL.c ****         CapSense_1_enableRawFilters = CapSense_1_RAW_FILTERS_DISABLED;
 1873              		.loc 1 2844 0
 1874 0004 024B     		ldr	r3, .L120
 1875 0006 0022     		mov	r2, #0
 1876 0008 1A70     		strb	r2, [r3]
2845:Generated_Source\PSoC4/CapSense_1_CSHL.c ****     }
 1877              		.loc 1 2845 0
 1878 000a BD46     		mov	sp, r7
 1879              		@ sp needed
 1880 000c 80BD     		pop	{r7, pc}
 1881              	.L121:
 1882 000e C046     		.align	2
 1883              	.L120:
 1884 0010 00000000 		.word	CapSense_1_enableRawFilters
 1885              		.cfi_endproc
 1886              	.LFE61:
 1887              		.size	CapSense_1_DisableRawDataFilters, .-CapSense_1_DisableRawDataFilters
 1888              		.text
 1889              	.Letext0:
 1890              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1891              		.section	.debug_info,"",%progbits
 1892              	.Ldebug_info0:
 1893 0000 F9070000 		.4byte	0x7f9
 1894 0004 0400     		.2byte	0x4
 1895 0006 00000000 		.4byte	.Ldebug_abbrev0
 1896 000a 04       		.byte	0x4
 1897 000b 01       		.uleb128 0x1
 1898 000c C1060000 		.4byte	.LASF81
 1899 0010 01       		.byte	0x1
 1900 0011 6B060000 		.4byte	.LASF82
 1901 0015 AE050000 		.4byte	.LASF83
 1902 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1903 001d 00000000 		.4byte	0
 1904 0021 00000000 		.4byte	.Ldebug_line0
 1905 0025 02       		.uleb128 0x2
 1906 0026 01       		.byte	0x1
 1907 0027 06       		.byte	0x6
 1908 0028 1D010000 		.4byte	.LASF0
 1909 002c 02       		.uleb128 0x2
 1910 002d 01       		.byte	0x1
 1911 002e 08       		.byte	0x8
 1912 002f D8040000 		.4byte	.LASF1
 1913 0033 02       		.uleb128 0x2
 1914 0034 02       		.byte	0x2
 1915 0035 05       		.byte	0x5
 1916 0036 1B050000 		.4byte	.LASF2
 1917 003a 02       		.uleb128 0x2
 1918 003b 02       		.byte	0x2
 1919 003c 07       		.byte	0x7
 1920 003d 72020000 		.4byte	.LASF3
 1921 0041 02       		.uleb128 0x2
 1922 0042 04       		.byte	0x4
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 85


 1923 0043 05       		.byte	0x5
 1924 0044 38010000 		.4byte	.LASF4
 1925 0048 02       		.uleb128 0x2
 1926 0049 04       		.byte	0x4
 1927 004a 07       		.byte	0x7
 1928 004b 3F020000 		.4byte	.LASF5
 1929 004f 02       		.uleb128 0x2
 1930 0050 08       		.byte	0x8
 1931 0051 05       		.byte	0x5
 1932 0052 0F010000 		.4byte	.LASF6
 1933 0056 02       		.uleb128 0x2
 1934 0057 08       		.byte	0x8
 1935 0058 07       		.byte	0x7
 1936 0059 5D000000 		.4byte	.LASF7
 1937 005d 03       		.uleb128 0x3
 1938 005e 04       		.byte	0x4
 1939 005f 05       		.byte	0x5
 1940 0060 696E7400 		.ascii	"int\000"
 1941 0064 02       		.uleb128 0x2
 1942 0065 04       		.byte	0x4
 1943 0066 07       		.byte	0x7
 1944 0067 32020000 		.4byte	.LASF8
 1945 006b 04       		.uleb128 0x4
 1946 006c 5A010000 		.4byte	.LASF9
 1947 0070 02       		.byte	0x2
 1948 0071 9801     		.2byte	0x198
 1949 0073 2C000000 		.4byte	0x2c
 1950 0077 04       		.uleb128 0x4
 1951 0078 00000000 		.4byte	.LASF10
 1952 007c 02       		.byte	0x2
 1953 007d 9901     		.2byte	0x199
 1954 007f 3A000000 		.4byte	0x3a
 1955 0083 04       		.uleb128 0x4
 1956 0084 67010000 		.4byte	.LASF11
 1957 0088 02       		.byte	0x2
 1958 0089 9A01     		.2byte	0x19a
 1959 008b 48000000 		.4byte	0x48
 1960 008f 02       		.uleb128 0x2
 1961 0090 04       		.byte	0x4
 1962 0091 04       		.byte	0x4
 1963 0092 01040000 		.4byte	.LASF12
 1964 0096 02       		.uleb128 0x2
 1965 0097 08       		.byte	0x8
 1966 0098 04       		.byte	0x4
 1967 0099 60010000 		.4byte	.LASF13
 1968 009d 02       		.uleb128 0x2
 1969 009e 01       		.byte	0x1
 1970 009f 08       		.byte	0x8
 1971 00a0 2F060000 		.4byte	.LASF14
 1972 00a4 02       		.uleb128 0x2
 1973 00a5 04       		.byte	0x4
 1974 00a6 07       		.byte	0x7
 1975 00a7 11030000 		.4byte	.LASF15
 1976 00ab 05       		.uleb128 0x5
 1977 00ac 49000000 		.4byte	.LASF16
 1978 00b0 01       		.byte	0x1
 1979 00b1 98       		.byte	0x98
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 86


 1980 00b2 00000000 		.4byte	.LFB35
 1981 00b6 84000000 		.4byte	.LFE35-.LFB35
 1982 00ba 01       		.uleb128 0x1
 1983 00bb 9C       		.byte	0x9c
 1984 00bc DD000000 		.4byte	0xdd
 1985 00c0 06       		.uleb128 0x6
 1986 00c1 85020000 		.4byte	.LASF18
 1987 00c5 01       		.byte	0x1
 1988 00c6 98       		.byte	0x98
 1989 00c7 83000000 		.4byte	0x83
 1990 00cb 02       		.uleb128 0x2
 1991 00cc 91       		.byte	0x91
 1992 00cd 6C       		.sleb128 -20
 1993 00ce 07       		.uleb128 0x7
 1994 00cf 25050000 		.4byte	.LASF20
 1995 00d3 01       		.byte	0x1
 1996 00d4 9C       		.byte	0x9c
 1997 00d5 6B000000 		.4byte	0x6b
 1998 00d9 02       		.uleb128 0x2
 1999 00da 91       		.byte	0x91
 2000 00db 77       		.sleb128 -9
 2001 00dc 00       		.byte	0
 2002 00dd 08       		.uleb128 0x8
 2003 00de 84030000 		.4byte	.LASF17
 2004 00e2 01       		.byte	0x1
 2005 00e3 E4       		.byte	0xe4
 2006 00e4 00000000 		.4byte	.LFB36
 2007 00e8 28000000 		.4byte	.LFE36-.LFB36
 2008 00ec 01       		.uleb128 0x1
 2009 00ed 9C       		.byte	0x9c
 2010 00ee 01010000 		.4byte	0x101
 2011 00f2 06       		.uleb128 0x6
 2012 00f3 85020000 		.4byte	.LASF18
 2013 00f7 01       		.byte	0x1
 2014 00f8 E4       		.byte	0xe4
 2015 00f9 83000000 		.4byte	0x83
 2016 00fd 02       		.uleb128 0x2
 2017 00fe 91       		.byte	0x91
 2018 00ff 74       		.sleb128 -12
 2019 0100 00       		.byte	0
 2020 0101 09       		.uleb128 0x9
 2021 0102 27000000 		.4byte	.LASF19
 2022 0106 01       		.byte	0x1
 2023 0107 0901     		.2byte	0x109
 2024 0109 00000000 		.4byte	.LFB37
 2025 010d 26000000 		.4byte	.LFE37-.LFB37
 2026 0111 01       		.uleb128 0x1
 2027 0112 9C       		.byte	0x9c
 2028 0113 25010000 		.4byte	0x125
 2029 0117 0A       		.uleb128 0xa
 2030 0118 6900     		.ascii	"i\000"
 2031 011a 01       		.byte	0x1
 2032 011b 0B01     		.2byte	0x10b
 2033 011d 83000000 		.4byte	0x83
 2034 0121 02       		.uleb128 0x2
 2035 0122 91       		.byte	0x91
 2036 0123 74       		.sleb128 -12
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 87


 2037 0124 00       		.byte	0
 2038 0125 09       		.uleb128 0x9
 2039 0126 E6040000 		.4byte	.LASF21
 2040 012a 01       		.byte	0x1
 2041 012b 2C01     		.2byte	0x12c
 2042 012d 00000000 		.4byte	.LFB38
 2043 0131 50000000 		.4byte	.LFE38-.LFB38
 2044 0135 01       		.uleb128 0x1
 2045 0136 9C       		.byte	0x9c
 2046 0137 58010000 		.4byte	0x158
 2047 013b 0A       		.uleb128 0xa
 2048 013c 6900     		.ascii	"i\000"
 2049 013e 01       		.byte	0x1
 2050 013f 2E01     		.2byte	0x12e
 2051 0141 83000000 		.4byte	0x83
 2052 0145 02       		.uleb128 0x2
 2053 0146 91       		.byte	0x91
 2054 0147 74       		.sleb128 -12
 2055 0148 0B       		.uleb128 0xb
 2056 0149 9E050000 		.4byte	.LASF22
 2057 014d 01       		.byte	0x1
 2058 014e 2F01     		.2byte	0x12f
 2059 0150 83000000 		.4byte	0x83
 2060 0154 02       		.uleb128 0x2
 2061 0155 91       		.byte	0x91
 2062 0156 70       		.sleb128 -16
 2063 0157 00       		.byte	0
 2064 0158 09       		.uleb128 0x9
 2065 0159 40040000 		.4byte	.LASF23
 2066 015d 01       		.byte	0x1
 2067 015e 6D01     		.2byte	0x16d
 2068 0160 00000000 		.4byte	.LFB39
 2069 0164 04020000 		.4byte	.LFE39-.LFB39
 2070 0168 01       		.uleb128 0x1
 2071 0169 9C       		.byte	0x9c
 2072 016a D8010000 		.4byte	0x1d8
 2073 016e 0C       		.uleb128 0xc
 2074 016f 85020000 		.4byte	.LASF18
 2075 0173 01       		.byte	0x1
 2076 0174 6D01     		.2byte	0x16d
 2077 0176 83000000 		.4byte	0x83
 2078 017a 02       		.uleb128 0x2
 2079 017b 91       		.byte	0x91
 2080 017c 5C       		.sleb128 -36
 2081 017d 0B       		.uleb128 0xb
 2082 017e CC020000 		.4byte	.LASF24
 2083 0182 01       		.byte	0x1
 2084 0183 6F01     		.2byte	0x16f
 2085 0185 83000000 		.4byte	0x83
 2086 0189 02       		.uleb128 0x2
 2087 018a 91       		.byte	0x91
 2088 018b 60       		.sleb128 -32
 2089 018c 0B       		.uleb128 0xb
 2090 018d 94060000 		.4byte	.LASF25
 2091 0191 01       		.byte	0x1
 2092 0192 7001     		.2byte	0x170
 2093 0194 83000000 		.4byte	0x83
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 88


 2094 0198 02       		.uleb128 0x2
 2095 0199 91       		.byte	0x91
 2096 019a 6C       		.sleb128 -20
 2097 019b 0B       		.uleb128 0xb
 2098 019c 83070000 		.4byte	.LASF26
 2099 01a0 01       		.byte	0x1
 2100 01a1 7101     		.2byte	0x171
 2101 01a3 77000000 		.4byte	0x77
 2102 01a7 02       		.uleb128 0x2
 2103 01a8 91       		.byte	0x91
 2104 01a9 6A       		.sleb128 -22
 2105 01aa 0B       		.uleb128 0xb
 2106 01ab 07000000 		.4byte	.LASF27
 2107 01af 01       		.byte	0x1
 2108 01b0 7201     		.2byte	0x172
 2109 01b2 77000000 		.4byte	0x77
 2110 01b6 02       		.uleb128 0x2
 2111 01b7 91       		.byte	0x91
 2112 01b8 68       		.sleb128 -24
 2113 01b9 0B       		.uleb128 0xb
 2114 01ba 25050000 		.4byte	.LASF20
 2115 01be 01       		.byte	0x1
 2116 01bf 7301     		.2byte	0x173
 2117 01c1 6B000000 		.4byte	0x6b
 2118 01c5 02       		.uleb128 0x2
 2119 01c6 91       		.byte	0x91
 2120 01c7 67       		.sleb128 -25
 2121 01c8 0B       		.uleb128 0xb
 2122 01c9 0C050000 		.4byte	.LASF28
 2123 01cd 01       		.byte	0x1
 2124 01ce 7401     		.2byte	0x174
 2125 01d0 6B000000 		.4byte	0x6b
 2126 01d4 02       		.uleb128 0x2
 2127 01d5 91       		.byte	0x91
 2128 01d6 66       		.sleb128 -26
 2129 01d7 00       		.byte	0
 2130 01d8 09       		.uleb128 0x9
 2131 01d9 2C050000 		.4byte	.LASF29
 2132 01dd 01       		.byte	0x1
 2133 01de 2D02     		.2byte	0x22d
 2134 01e0 00000000 		.4byte	.LFB40
 2135 01e4 16000000 		.4byte	.LFE40-.LFB40
 2136 01e8 01       		.uleb128 0x1
 2137 01e9 9C       		.byte	0x9c
 2138 01ea FE010000 		.4byte	0x1fe
 2139 01ee 0C       		.uleb128 0xc
 2140 01ef 85020000 		.4byte	.LASF18
 2141 01f3 01       		.byte	0x1
 2142 01f4 2D02     		.2byte	0x22d
 2143 01f6 83000000 		.4byte	0x83
 2144 01fa 02       		.uleb128 0x2
 2145 01fb 91       		.byte	0x91
 2146 01fc 74       		.sleb128 -12
 2147 01fd 00       		.byte	0
 2148 01fe 09       		.uleb128 0x9
 2149 01ff C3030000 		.4byte	.LASF30
 2150 0203 01       		.byte	0x1
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 89


 2151 0204 6302     		.2byte	0x263
 2152 0206 00000000 		.4byte	.LFB41
 2153 020a 40000000 		.4byte	.LFE41-.LFB41
 2154 020e 01       		.uleb128 0x1
 2155 020f 9C       		.byte	0x9c
 2156 0210 31020000 		.4byte	0x231
 2157 0214 0A       		.uleb128 0xa
 2158 0215 6900     		.ascii	"i\000"
 2159 0217 01       		.byte	0x1
 2160 0218 6502     		.2byte	0x265
 2161 021a 83000000 		.4byte	0x83
 2162 021e 02       		.uleb128 0x2
 2163 021f 91       		.byte	0x91
 2164 0220 74       		.sleb128 -12
 2165 0221 0B       		.uleb128 0xb
 2166 0222 9E050000 		.4byte	.LASF22
 2167 0226 01       		.byte	0x1
 2168 0227 6602     		.2byte	0x266
 2169 0229 83000000 		.4byte	0x83
 2170 022d 02       		.uleb128 0x2
 2171 022e 91       		.byte	0x91
 2172 022f 70       		.sleb128 -16
 2173 0230 00       		.byte	0
 2174 0231 09       		.uleb128 0x9
 2175 0232 98010000 		.4byte	.LASF31
 2176 0236 01       		.byte	0x1
 2177 0237 9002     		.2byte	0x290
 2178 0239 00000000 		.4byte	.LFB42
 2179 023d 70000000 		.4byte	.LFE42-.LFB42
 2180 0241 01       		.uleb128 0x1
 2181 0242 9C       		.byte	0x9c
 2182 0243 A0020000 		.4byte	0x2a0
 2183 0247 0C       		.uleb128 0xc
 2184 0248 25050000 		.4byte	.LASF20
 2185 024c 01       		.byte	0x1
 2186 024d 9002     		.2byte	0x290
 2187 024f 83000000 		.4byte	0x83
 2188 0253 02       		.uleb128 0x2
 2189 0254 91       		.byte	0x91
 2190 0255 5C       		.sleb128 -36
 2191 0256 0B       		.uleb128 0xb
 2192 0257 04060000 		.4byte	.LASF32
 2193 025b 01       		.byte	0x1
 2194 025c 9202     		.2byte	0x292
 2195 025e 83000000 		.4byte	0x83
 2196 0262 02       		.uleb128 0x2
 2197 0263 91       		.byte	0x91
 2198 0264 70       		.sleb128 -16
 2199 0265 0B       		.uleb128 0xb
 2200 0266 34060000 		.4byte	.LASF33
 2201 026a 01       		.byte	0x1
 2202 026b 9302     		.2byte	0x293
 2203 026d 83000000 		.4byte	0x83
 2204 0271 02       		.uleb128 0x2
 2205 0272 91       		.byte	0x91
 2206 0273 6C       		.sleb128 -20
 2207 0274 0B       		.uleb128 0xb
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 90


 2208 0275 27020000 		.4byte	.LASF34
 2209 0279 01       		.byte	0x1
 2210 027a 9402     		.2byte	0x294
 2211 027c 83000000 		.4byte	0x83
 2212 0280 02       		.uleb128 0x2
 2213 0281 91       		.byte	0x91
 2214 0282 68       		.sleb128 -24
 2215 0283 0A       		.uleb128 0xa
 2216 0284 6900     		.ascii	"i\000"
 2217 0286 01       		.byte	0x1
 2218 0287 9502     		.2byte	0x295
 2219 0289 83000000 		.4byte	0x83
 2220 028d 02       		.uleb128 0x2
 2221 028e 91       		.byte	0x91
 2222 028f 74       		.sleb128 -12
 2223 0290 0B       		.uleb128 0xb
 2224 0291 9E050000 		.4byte	.LASF22
 2225 0295 01       		.byte	0x1
 2226 0296 9602     		.2byte	0x296
 2227 0298 83000000 		.4byte	0x83
 2228 029c 02       		.uleb128 0x2
 2229 029d 91       		.byte	0x91
 2230 029e 64       		.sleb128 -28
 2231 029f 00       		.byte	0
 2232 02a0 0D       		.uleb128 0xd
 2233 02a1 A6060000 		.4byte	.LASF37
 2234 02a5 01       		.byte	0x1
 2235 02a6 C102     		.2byte	0x2c1
 2236 02a8 77000000 		.4byte	0x77
 2237 02ac 00000000 		.4byte	.LFB43
 2238 02b0 1C000000 		.4byte	.LFE43-.LFB43
 2239 02b4 01       		.uleb128 0x1
 2240 02b5 9C       		.byte	0x9c
 2241 02b6 CA020000 		.4byte	0x2ca
 2242 02ba 0C       		.uleb128 0xc
 2243 02bb 85020000 		.4byte	.LASF18
 2244 02bf 01       		.byte	0x1
 2245 02c0 C102     		.2byte	0x2c1
 2246 02c2 83000000 		.4byte	0x83
 2247 02c6 02       		.uleb128 0x2
 2248 02c7 91       		.byte	0x91
 2249 02c8 74       		.sleb128 -12
 2250 02c9 00       		.byte	0
 2251 02ca 0E       		.uleb128 0xe
 2252 02cb D1020000 		.4byte	.LASF35
 2253 02cf 01       		.byte	0x1
 2254 02d0 DC02     		.2byte	0x2dc
 2255 02d2 00000000 		.4byte	.LFB44
 2256 02d6 24000000 		.4byte	.LFE44-.LFB44
 2257 02da 01       		.uleb128 0x1
 2258 02db 9C       		.byte	0x9c
 2259 02dc FF020000 		.4byte	0x2ff
 2260 02e0 0C       		.uleb128 0xc
 2261 02e1 85020000 		.4byte	.LASF18
 2262 02e5 01       		.byte	0x1
 2263 02e6 DC02     		.2byte	0x2dc
 2264 02e8 83000000 		.4byte	0x83
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 91


 2265 02ec 02       		.uleb128 0x2
 2266 02ed 91       		.byte	0x91
 2267 02ee 74       		.sleb128 -12
 2268 02ef 0C       		.uleb128 0xc
 2269 02f0 6D020000 		.4byte	.LASF36
 2270 02f4 01       		.byte	0x1
 2271 02f5 DC02     		.2byte	0x2dc
 2272 02f7 77000000 		.4byte	0x77
 2273 02fb 02       		.uleb128 0x2
 2274 02fc 91       		.byte	0x91
 2275 02fd 72       		.sleb128 -14
 2276 02fe 00       		.byte	0
 2277 02ff 0D       		.uleb128 0xd
 2278 0300 50030000 		.4byte	.LASF38
 2279 0304 01       		.byte	0x1
 2280 0305 F702     		.2byte	0x2f7
 2281 0307 6B000000 		.4byte	0x6b
 2282 030b 00000000 		.4byte	.LFB45
 2283 030f 1C000000 		.4byte	.LFE45-.LFB45
 2284 0313 01       		.uleb128 0x1
 2285 0314 9C       		.byte	0x9c
 2286 0315 29030000 		.4byte	0x329
 2287 0319 0C       		.uleb128 0xc
 2288 031a 85020000 		.4byte	.LASF18
 2289 031e 01       		.byte	0x1
 2290 031f F702     		.2byte	0x2f7
 2291 0321 83000000 		.4byte	0x83
 2292 0325 02       		.uleb128 0x2
 2293 0326 91       		.byte	0x91
 2294 0327 74       		.sleb128 -12
 2295 0328 00       		.byte	0
 2296 0329 0E       		.uleb128 0xe
 2297 032a 51020000 		.4byte	.LASF39
 2298 032e 01       		.byte	0x1
 2299 032f 1203     		.2byte	0x312
 2300 0331 00000000 		.4byte	.LFB46
 2301 0335 24000000 		.4byte	.LFE46-.LFB46
 2302 0339 01       		.uleb128 0x1
 2303 033a 9C       		.byte	0x9c
 2304 033b 5E030000 		.4byte	0x35e
 2305 033f 0C       		.uleb128 0xc
 2306 0340 85020000 		.4byte	.LASF18
 2307 0344 01       		.byte	0x1
 2308 0345 1203     		.2byte	0x312
 2309 0347 83000000 		.4byte	0x83
 2310 034b 02       		.uleb128 0x2
 2311 034c 91       		.byte	0x91
 2312 034d 74       		.sleb128 -12
 2313 034e 0C       		.uleb128 0xc
 2314 034f 21020000 		.4byte	.LASF40
 2315 0353 01       		.byte	0x1
 2316 0354 1203     		.2byte	0x312
 2317 0356 6B000000 		.4byte	0x6b
 2318 035a 02       		.uleb128 0x2
 2319 035b 91       		.byte	0x91
 2320 035c 73       		.sleb128 -13
 2321 035d 00       		.byte	0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 92


 2322 035e 0D       		.uleb128 0xd
 2323 035f 4F070000 		.4byte	.LASF41
 2324 0363 01       		.byte	0x1
 2325 0364 2D03     		.2byte	0x32d
 2326 0366 6B000000 		.4byte	0x6b
 2327 036a 00000000 		.4byte	.LFB47
 2328 036e 1C000000 		.4byte	.LFE47-.LFB47
 2329 0372 01       		.uleb128 0x1
 2330 0373 9C       		.byte	0x9c
 2331 0374 88030000 		.4byte	0x388
 2332 0378 0C       		.uleb128 0xc
 2333 0379 25050000 		.4byte	.LASF20
 2334 037d 01       		.byte	0x1
 2335 037e 2D03     		.2byte	0x32d
 2336 0380 83000000 		.4byte	0x83
 2337 0384 02       		.uleb128 0x2
 2338 0385 91       		.byte	0x91
 2339 0386 74       		.sleb128 -12
 2340 0387 00       		.byte	0
 2341 0388 0D       		.uleb128 0xd
 2342 0389 07040000 		.4byte	.LASF42
 2343 038d 01       		.byte	0x1
 2344 038e 4803     		.2byte	0x348
 2345 0390 6B000000 		.4byte	0x6b
 2346 0394 00000000 		.4byte	.LFB48
 2347 0398 1C000000 		.4byte	.LFE48-.LFB48
 2348 039c 01       		.uleb128 0x1
 2349 039d 9C       		.byte	0x9c
 2350 039e B2030000 		.4byte	0x3b2
 2351 03a2 0C       		.uleb128 0xc
 2352 03a3 25050000 		.4byte	.LASF20
 2353 03a7 01       		.byte	0x1
 2354 03a8 4803     		.2byte	0x348
 2355 03aa 83000000 		.4byte	0x83
 2356 03ae 02       		.uleb128 0x2
 2357 03af 91       		.byte	0x91
 2358 03b0 74       		.sleb128 -12
 2359 03b1 00       		.byte	0
 2360 03b2 0D       		.uleb128 0xd
 2361 03b3 79010000 		.4byte	.LASF43
 2362 03b7 01       		.byte	0x1
 2363 03b8 6403     		.2byte	0x364
 2364 03ba 6B000000 		.4byte	0x6b
 2365 03be 00000000 		.4byte	.LFB49
 2366 03c2 1C000000 		.4byte	.LFE49-.LFB49
 2367 03c6 01       		.uleb128 0x1
 2368 03c7 9C       		.byte	0x9c
 2369 03c8 DC030000 		.4byte	0x3dc
 2370 03cc 0C       		.uleb128 0xc
 2371 03cd 25050000 		.4byte	.LASF20
 2372 03d1 01       		.byte	0x1
 2373 03d2 6403     		.2byte	0x364
 2374 03d4 83000000 		.4byte	0x83
 2375 03d8 02       		.uleb128 0x2
 2376 03d9 91       		.byte	0x91
 2377 03da 74       		.sleb128 -12
 2378 03db 00       		.byte	0
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 93


 2379 03dc 0D       		.uleb128 0xd
 2380 03dd 8C020000 		.4byte	.LASF44
 2381 03e1 01       		.byte	0x1
 2382 03e2 8003     		.2byte	0x380
 2383 03e4 6B000000 		.4byte	0x6b
 2384 03e8 00000000 		.4byte	.LFB50
 2385 03ec 12000000 		.4byte	.LFE50-.LFB50
 2386 03f0 01       		.uleb128 0x1
 2387 03f1 9C       		.byte	0x9c
 2388 03f2 06040000 		.4byte	0x406
 2389 03f6 0C       		.uleb128 0xc
 2390 03f7 25050000 		.4byte	.LASF20
 2391 03fb 01       		.byte	0x1
 2392 03fc 8003     		.2byte	0x380
 2393 03fe 83000000 		.4byte	0x83
 2394 0402 02       		.uleb128 0x2
 2395 0403 91       		.byte	0x91
 2396 0404 74       		.sleb128 -12
 2397 0405 00       		.byte	0
 2398 0406 0F       		.uleb128 0xf
 2399 0407 97040000 		.4byte	.LASF45
 2400 040b 01       		.byte	0x1
 2401 040c 5C04     		.2byte	0x45c
 2402 040e 83000000 		.4byte	0x83
 2403 0412 00000000 		.4byte	.LFB51
 2404 0416 34010000 		.4byte	.LFE51-.LFB51
 2405 041a 01       		.uleb128 0x1
 2406 041b 9C       		.byte	0x9c
 2407 041c 7B040000 		.4byte	0x47b
 2408 0420 0C       		.uleb128 0xc
 2409 0421 85020000 		.4byte	.LASF18
 2410 0425 01       		.byte	0x1
 2411 0426 5C04     		.2byte	0x45c
 2412 0428 83000000 		.4byte	0x83
 2413 042c 02       		.uleb128 0x2
 2414 042d 91       		.byte	0x91
 2415 042e 6C       		.sleb128 -20
 2416 042f 0B       		.uleb128 0xb
 2417 0430 25050000 		.4byte	.LASF20
 2418 0434 01       		.byte	0x1
 2419 0435 5E04     		.2byte	0x45e
 2420 0437 6B000000 		.4byte	0x6b
 2421 043b 02       		.uleb128 0x2
 2422 043c 91       		.byte	0x91
 2423 043d 77       		.sleb128 -9
 2424 043e 0B       		.uleb128 0xb
 2425 043f 08030000 		.4byte	.LASF46
 2426 0443 01       		.byte	0x1
 2427 0444 5F04     		.2byte	0x45f
 2428 0446 6B000000 		.4byte	0x6b
 2429 044a 02       		.uleb128 0x2
 2430 044b 91       		.byte	0x91
 2431 044c 74       		.sleb128 -12
 2432 044d 0B       		.uleb128 0xb
 2433 044e 5D060000 		.4byte	.LASF47
 2434 0452 01       		.byte	0x1
 2435 0453 6004     		.2byte	0x460
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 94


 2436 0455 6B000000 		.4byte	0x6b
 2437 0459 02       		.uleb128 0x2
 2438 045a 91       		.byte	0x91
 2439 045b 73       		.sleb128 -13
 2440 045c 0B       		.uleb128 0xb
 2441 045d 17000000 		.4byte	.LASF48
 2442 0461 01       		.byte	0x1
 2443 0462 6204     		.2byte	0x462
 2444 0464 6B000000 		.4byte	0x6b
 2445 0468 02       		.uleb128 0x2
 2446 0469 91       		.byte	0x91
 2447 046a 76       		.sleb128 -10
 2448 046b 0B       		.uleb128 0xb
 2449 046c 6E010000 		.4byte	.LASF49
 2450 0470 01       		.byte	0x1
 2451 0471 6304     		.2byte	0x463
 2452 0473 6B000000 		.4byte	0x6b
 2453 0477 02       		.uleb128 0x2
 2454 0478 91       		.byte	0x91
 2455 0479 75       		.sleb128 -11
 2456 047a 00       		.byte	0
 2457 047b 0F       		.uleb128 0xf
 2458 047c 8C000000 		.4byte	.LASF50
 2459 0480 01       		.byte	0x1
 2460 0481 AE04     		.2byte	0x4ae
 2461 0483 83000000 		.4byte	0x83
 2462 0487 00000000 		.4byte	.LFB52
 2463 048b 58000000 		.4byte	.LFE52-.LFB52
 2464 048f 01       		.uleb128 0x1
 2465 0490 9C       		.byte	0x9c
 2466 0491 D2040000 		.4byte	0x4d2
 2467 0495 0C       		.uleb128 0xc
 2468 0496 25050000 		.4byte	.LASF20
 2469 049a 01       		.byte	0x1
 2470 049b AE04     		.2byte	0x4ae
 2471 049d 83000000 		.4byte	0x83
 2472 04a1 02       		.uleb128 0x2
 2473 04a2 91       		.byte	0x91
 2474 04a3 64       		.sleb128 -28
 2475 04a4 0B       		.uleb128 0xb
 2476 04a5 29010000 		.4byte	.LASF51
 2477 04a9 01       		.byte	0x1
 2478 04aa B004     		.2byte	0x4b0
 2479 04ac 83000000 		.4byte	0x83
 2480 04b0 02       		.uleb128 0x2
 2481 04b1 91       		.byte	0x91
 2482 04b2 74       		.sleb128 -12
 2483 04b3 0B       		.uleb128 0xb
 2484 04b4 99060000 		.4byte	.LASF52
 2485 04b8 01       		.byte	0x1
 2486 04b9 B104     		.2byte	0x4b1
 2487 04bb 83000000 		.4byte	0x83
 2488 04bf 02       		.uleb128 0x2
 2489 04c0 91       		.byte	0x91
 2490 04c1 6C       		.sleb128 -20
 2491 04c2 0B       		.uleb128 0xb
 2492 04c3 32010000 		.4byte	.LASF53
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 95


 2493 04c7 01       		.byte	0x1
 2494 04c8 B204     		.2byte	0x4b2
 2495 04ca 83000000 		.4byte	0x83
 2496 04ce 02       		.uleb128 0x2
 2497 04cf 91       		.byte	0x91
 2498 04d0 70       		.sleb128 -16
 2499 04d1 00       		.byte	0
 2500 04d2 0F       		.uleb128 0xf
 2501 04d3 B6040000 		.4byte	.LASF54
 2502 04d7 01       		.byte	0x1
 2503 04d8 DC04     		.2byte	0x4dc
 2504 04da 83000000 		.4byte	0x83
 2505 04de 00000000 		.4byte	.LFB53
 2506 04e2 36000000 		.4byte	.LFE53-.LFB53
 2507 04e6 01       		.uleb128 0x1
 2508 04e7 9C       		.byte	0x9c
 2509 04e8 09050000 		.4byte	0x509
 2510 04ec 0A       		.uleb128 0xa
 2511 04ed 6900     		.ascii	"i\000"
 2512 04ef 01       		.byte	0x1
 2513 04f0 DF04     		.2byte	0x4df
 2514 04f2 83000000 		.4byte	0x83
 2515 04f6 02       		.uleb128 0x2
 2516 04f7 91       		.byte	0x91
 2517 04f8 74       		.sleb128 -12
 2518 04f9 0B       		.uleb128 0xb
 2519 04fa 32010000 		.4byte	.LASF53
 2520 04fe 01       		.byte	0x1
 2521 04ff E004     		.2byte	0x4e0
 2522 0501 83000000 		.4byte	0x83
 2523 0505 02       		.uleb128 0x2
 2524 0506 91       		.byte	0x91
 2525 0507 70       		.sleb128 -16
 2526 0508 00       		.byte	0
 2527 0509 09       		.uleb128 0x9
 2528 050a 74000000 		.4byte	.LASF55
 2529 050e 01       		.byte	0x1
 2530 050f 0B05     		.2byte	0x50b
 2531 0511 00000000 		.4byte	.LFB54
 2532 0515 70000000 		.4byte	.LFE54-.LFB54
 2533 0519 01       		.uleb128 0x1
 2534 051a 9C       		.byte	0x9c
 2535 051b 4D050000 		.4byte	0x54d
 2536 051f 0C       		.uleb128 0xc
 2537 0520 25050000 		.4byte	.LASF20
 2538 0524 01       		.byte	0x1
 2539 0525 0B05     		.2byte	0x50b
 2540 0527 83000000 		.4byte	0x83
 2541 052b 02       		.uleb128 0x2
 2542 052c 91       		.byte	0x91
 2543 052d 6C       		.sleb128 -20
 2544 052e 0B       		.uleb128 0xb
 2545 052f 29010000 		.4byte	.LASF51
 2546 0533 01       		.byte	0x1
 2547 0534 0E05     		.2byte	0x50e
 2548 0536 6B000000 		.4byte	0x6b
 2549 053a 02       		.uleb128 0x2
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 96


 2550 053b 91       		.byte	0x91
 2551 053c 77       		.sleb128 -9
 2552 053d 0B       		.uleb128 0xb
 2553 053e 99060000 		.4byte	.LASF52
 2554 0542 01       		.byte	0x1
 2555 0543 0F05     		.2byte	0x50f
 2556 0545 6B000000 		.4byte	0x6b
 2557 0549 02       		.uleb128 0x2
 2558 054a 91       		.byte	0x91
 2559 054b 76       		.sleb128 -10
 2560 054c 00       		.byte	0
 2561 054d 09       		.uleb128 0x9
 2562 054e 41010000 		.4byte	.LASF56
 2563 0552 01       		.byte	0x1
 2564 0553 3605     		.2byte	0x536
 2565 0555 00000000 		.4byte	.LFB55
 2566 0559 70000000 		.4byte	.LFE55-.LFB55
 2567 055d 01       		.uleb128 0x1
 2568 055e 9C       		.byte	0x9c
 2569 055f 91050000 		.4byte	0x591
 2570 0563 0C       		.uleb128 0xc
 2571 0564 25050000 		.4byte	.LASF20
 2572 0568 01       		.byte	0x1
 2573 0569 3605     		.2byte	0x536
 2574 056b 83000000 		.4byte	0x83
 2575 056f 02       		.uleb128 0x2
 2576 0570 91       		.byte	0x91
 2577 0571 6C       		.sleb128 -20
 2578 0572 0B       		.uleb128 0xb
 2579 0573 29010000 		.4byte	.LASF51
 2580 0577 01       		.byte	0x1
 2581 0578 3805     		.2byte	0x538
 2582 057a 6B000000 		.4byte	0x6b
 2583 057e 02       		.uleb128 0x2
 2584 057f 91       		.byte	0x91
 2585 0580 77       		.sleb128 -9
 2586 0581 0B       		.uleb128 0xb
 2587 0582 99060000 		.4byte	.LASF52
 2588 0586 01       		.byte	0x1
 2589 0587 3905     		.2byte	0x539
 2590 0589 6B000000 		.4byte	0x6b
 2591 058d 02       		.uleb128 0x2
 2592 058e 91       		.byte	0x91
 2593 058f 76       		.sleb128 -10
 2594 0590 00       		.byte	0
 2595 0591 0D       		.uleb128 0xd
 2596 0592 6D070000 		.4byte	.LASF57
 2597 0596 01       		.byte	0x1
 2598 0597 CA09     		.2byte	0x9ca
 2599 0599 77000000 		.4byte	0x77
 2600 059d 00000000 		.4byte	.LFB56
 2601 05a1 3C000000 		.4byte	.LFE56-.LFB56
 2602 05a5 01       		.uleb128 0x1
 2603 05a6 9C       		.byte	0x9c
 2604 05a7 D7050000 		.4byte	0x5d7
 2605 05ab 10       		.uleb128 0x10
 2606 05ac 783100   		.ascii	"x1\000"
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 97


 2607 05af 01       		.byte	0x1
 2608 05b0 CA09     		.2byte	0x9ca
 2609 05b2 77000000 		.4byte	0x77
 2610 05b6 02       		.uleb128 0x2
 2611 05b7 91       		.byte	0x91
 2612 05b8 6E       		.sleb128 -18
 2613 05b9 10       		.uleb128 0x10
 2614 05ba 783200   		.ascii	"x2\000"
 2615 05bd 01       		.byte	0x1
 2616 05be CA09     		.2byte	0x9ca
 2617 05c0 77000000 		.4byte	0x77
 2618 05c4 02       		.uleb128 0x2
 2619 05c5 91       		.byte	0x91
 2620 05c6 6C       		.sleb128 -20
 2621 05c7 0A       		.uleb128 0xa
 2622 05c8 746D7000 		.ascii	"tmp\000"
 2623 05cc 01       		.byte	0x1
 2624 05cd CC09     		.2byte	0x9cc
 2625 05cf 83000000 		.4byte	0x83
 2626 05d3 02       		.uleb128 0x2
 2627 05d4 91       		.byte	0x91
 2628 05d5 74       		.sleb128 -12
 2629 05d6 00       		.byte	0
 2630 05d7 0D       		.uleb128 0xd
 2631 05d8 64050000 		.4byte	.LASF58
 2632 05dc 01       		.byte	0x1
 2633 05dd B30A     		.2byte	0xab3
 2634 05df 83000000 		.4byte	0x83
 2635 05e3 00000000 		.4byte	.LFB57
 2636 05e7 1C000000 		.4byte	.LFE57-.LFB57
 2637 05eb 01       		.uleb128 0x1
 2638 05ec 9C       		.byte	0x9c
 2639 05ed 01060000 		.4byte	0x601
 2640 05f1 0C       		.uleb128 0xc
 2641 05f2 85020000 		.4byte	.LASF18
 2642 05f6 01       		.byte	0x1
 2643 05f7 B30A     		.2byte	0xab3
 2644 05f9 83000000 		.4byte	0x83
 2645 05fd 02       		.uleb128 0x2
 2646 05fe 91       		.byte	0x91
 2647 05ff 74       		.sleb128 -12
 2648 0600 00       		.byte	0
 2649 0601 0D       		.uleb128 0xd
 2650 0602 7F050000 		.4byte	.LASF59
 2651 0606 01       		.byte	0x1
 2652 0607 CD0A     		.2byte	0xacd
 2653 0609 6B000000 		.4byte	0x6b
 2654 060d 00000000 		.4byte	.LFB58
 2655 0611 1C000000 		.4byte	.LFE58-.LFB58
 2656 0615 01       		.uleb128 0x1
 2657 0616 9C       		.byte	0x9c
 2658 0617 2B060000 		.4byte	0x62b
 2659 061b 0C       		.uleb128 0xc
 2660 061c 85020000 		.4byte	.LASF18
 2661 0620 01       		.byte	0x1
 2662 0621 CD0A     		.2byte	0xacd
 2663 0623 83000000 		.4byte	0x83
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 98


 2664 0627 02       		.uleb128 0x2
 2665 0628 91       		.byte	0x91
 2666 0629 74       		.sleb128 -12
 2667 062a 00       		.byte	0
 2668 062b 0D       		.uleb128 0xd
 2669 062c 39030000 		.4byte	.LASF60
 2670 0630 01       		.byte	0x1
 2671 0631 E70A     		.2byte	0xae7
 2672 0633 6B000000 		.4byte	0x6b
 2673 0637 00000000 		.4byte	.LFB59
 2674 063b 1C000000 		.4byte	.LFE59-.LFB59
 2675 063f 01       		.uleb128 0x1
 2676 0640 9C       		.byte	0x9c
 2677 0641 55060000 		.4byte	0x655
 2678 0645 0C       		.uleb128 0xc
 2679 0646 25050000 		.4byte	.LASF20
 2680 064a 01       		.byte	0x1
 2681 064b E70A     		.2byte	0xae7
 2682 064d 83000000 		.4byte	0x83
 2683 0651 02       		.uleb128 0x2
 2684 0652 91       		.byte	0x91
 2685 0653 74       		.sleb128 -12
 2686 0654 00       		.byte	0
 2687 0655 11       		.uleb128 0x11
 2688 0656 01020000 		.4byte	.LASF61
 2689 065a 01       		.byte	0x1
 2690 065b 010B     		.2byte	0xb01
 2691 065d 00000000 		.4byte	.LFB60
 2692 0661 14000000 		.4byte	.LFE60-.LFB60
 2693 0665 01       		.uleb128 0x1
 2694 0666 9C       		.byte	0x9c
 2695 0667 11       		.uleb128 0x11
 2696 0668 EE000000 		.4byte	.LASF62
 2697 066c 01       		.byte	0x1
 2698 066d 1A0B     		.2byte	0xb1a
 2699 066f 00000000 		.4byte	.LFB61
 2700 0673 14000000 		.4byte	.LFE61-.LFB61
 2701 0677 01       		.uleb128 0x1
 2702 0678 9C       		.byte	0x9c
 2703 0679 12       		.uleb128 0x12
 2704 067a 6B000000 		.4byte	0x6b
 2705 067e 89060000 		.4byte	0x689
 2706 0682 13       		.uleb128 0x13
 2707 0683 A4000000 		.4byte	0xa4
 2708 0687 08       		.byte	0x8
 2709 0688 00       		.byte	0
 2710 0689 07       		.uleb128 0x7
 2711 068a A8030000 		.4byte	.LASF63
 2712 068e 01       		.byte	0x1
 2713 068f 59       		.byte	0x59
 2714 0690 79060000 		.4byte	0x679
 2715 0694 05       		.uleb128 0x5
 2716 0695 03       		.byte	0x3
 2717 0696 24000000 		.4byte	CapSense_1_debounceCounter
 2718 069a 12       		.uleb128 0x12
 2719 069b 77000000 		.4byte	0x77
 2720 069f AA060000 		.4byte	0x6aa
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 99


 2721 06a3 13       		.uleb128 0x13
 2722 06a4 A4000000 		.4byte	0xa4
 2723 06a8 07       		.byte	0x7
 2724 06a9 00       		.byte	0
 2725 06aa 14       		.uleb128 0x14
 2726 06ab D9000000 		.4byte	.LASF64
 2727 06af 01       		.byte	0x1
 2728 06b0 2C       		.byte	0x2c
 2729 06b1 9A060000 		.4byte	0x69a
 2730 06b5 12       		.uleb128 0x12
 2731 06b6 6B000000 		.4byte	0x6b
 2732 06ba C5060000 		.4byte	0x6c5
 2733 06be 13       		.uleb128 0x13
 2734 06bf A4000000 		.4byte	0xa4
 2735 06c3 00       		.byte	0
 2736 06c4 00       		.byte	0
 2737 06c5 14       		.uleb128 0x14
 2738 06c6 EC020000 		.4byte	.LASF65
 2739 06ca 01       		.byte	0x1
 2740 06cb 2D       		.byte	0x2d
 2741 06cc B5060000 		.4byte	0x6b5
 2742 06d0 12       		.uleb128 0x12
 2743 06d1 6B000000 		.4byte	0x6b
 2744 06d5 E0060000 		.4byte	0x6e0
 2745 06d9 13       		.uleb128 0x13
 2746 06da A4000000 		.4byte	0xa4
 2747 06de 07       		.byte	0x7
 2748 06df 00       		.byte	0
 2749 06e0 14       		.uleb128 0x14
 2750 06e1 6C030000 		.4byte	.LASF66
 2751 06e5 01       		.byte	0x1
 2752 06e6 2E       		.byte	0x2e
 2753 06e7 EB060000 		.4byte	0x6eb
 2754 06eb 15       		.uleb128 0x15
 2755 06ec D0060000 		.4byte	0x6d0
 2756 06f0 16       		.uleb128 0x16
 2757 06f1 15060000 		.4byte	.LASF67
 2758 06f5 01       		.byte	0x1
 2759 06f6 34       		.byte	0x34
 2760 06f7 9A060000 		.4byte	0x69a
 2761 06fb 05       		.uleb128 0x5
 2762 06fc 03       		.byte	0x3
 2763 06fd 00000000 		.4byte	CapSense_1_sensorBaseline
 2764 0701 16       		.uleb128 0x16
 2765 0702 40060000 		.4byte	.LASF68
 2766 0706 01       		.byte	0x1
 2767 0707 35       		.byte	0x35
 2768 0708 D0060000 		.4byte	0x6d0
 2769 070c 05       		.uleb128 0x5
 2770 070d 03       		.byte	0x3
 2771 070e 00000000 		.4byte	CapSense_1_sensorBaselineLow
 2772 0712 16       		.uleb128 0x16
 2773 0713 4C050000 		.4byte	.LASF69
 2774 0717 01       		.byte	0x1
 2775 0718 36       		.byte	0x36
 2776 0719 D0060000 		.4byte	0x6d0
 2777 071d 05       		.uleb128 0x5
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 100


 2778 071e 03       		.byte	0x3
 2779 071f 00000000 		.4byte	CapSense_1_sensorSignal
 2780 0723 16       		.uleb128 0x16
 2781 0724 65040000 		.4byte	.LASF70
 2782 0728 01       		.byte	0x1
 2783 0729 37       		.byte	0x37
 2784 072a B5060000 		.4byte	0x6b5
 2785 072e 05       		.uleb128 0x5
 2786 072f 03       		.byte	0x3
 2787 0730 00000000 		.4byte	CapSense_1_sensorOnMask
 2788 0734 16       		.uleb128 0x16
 2789 0735 1A030000 		.4byte	.LASF71
 2790 0739 01       		.byte	0x1
 2791 073a 39       		.byte	0x39
 2792 073b D0060000 		.4byte	0x6d0
 2793 073f 05       		.uleb128 0x5
 2794 0740 03       		.byte	0x3
 2795 0741 00000000 		.4byte	CapSense_1_lowBaselineResetCnt
 2796 0745 16       		.uleb128 0x16
 2797 0746 E5030000 		.4byte	.LASF72
 2798 074a 01       		.byte	0x1
 2799 074b 3A       		.byte	0x3a
 2800 074c D0060000 		.4byte	0x6d0
 2801 0750 05       		.uleb128 0x5
 2802 0751 03       		.byte	0x3
 2803 0752 00000000 		.4byte	CapSense_1_lowBaselineReset
 2804 0756 16       		.uleb128 0x16
 2805 0757 E6010000 		.4byte	.LASF73
 2806 075b 01       		.byte	0x1
 2807 075c 49       		.byte	0x49
 2808 075d 67070000 		.4byte	0x767
 2809 0761 05       		.uleb128 0x5
 2810 0762 03       		.byte	0x3
 2811 0763 00000000 		.4byte	CapSense_1_fingerThreshold
 2812 0767 15       		.uleb128 0x15
 2813 0768 D0060000 		.4byte	0x6d0
 2814 076c 16       		.uleb128 0x16
 2815 076d AB000000 		.4byte	.LASF74
 2816 0771 01       		.byte	0x1
 2817 0772 4D       		.byte	0x4d
 2818 0773 7D070000 		.4byte	0x77d
 2819 0777 05       		.uleb128 0x5
 2820 0778 03       		.byte	0x3
 2821 0779 00000000 		.4byte	CapSense_1_noiseThreshold
 2822 077d 15       		.uleb128 0x15
 2823 077e D0060000 		.4byte	0x6d0
 2824 0782 16       		.uleb128 0x16
 2825 0783 B8010000 		.4byte	.LASF75
 2826 0787 01       		.byte	0x1
 2827 0788 51       		.byte	0x51
 2828 0789 93070000 		.4byte	0x793
 2829 078d 05       		.uleb128 0x5
 2830 078e 03       		.byte	0x3
 2831 078f 00000000 		.4byte	CapSense_1_hysteresis
 2832 0793 15       		.uleb128 0x15
 2833 0794 D0060000 		.4byte	0x6d0
 2834 0798 16       		.uleb128 0x16
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 101


 2835 0799 C5000000 		.4byte	.LASF76
 2836 079d 01       		.byte	0x1
 2837 079e 55       		.byte	0x55
 2838 079f A9070000 		.4byte	0x7a9
 2839 07a3 05       		.uleb128 0x5
 2840 07a4 03       		.byte	0x3
 2841 07a5 00000000 		.4byte	CapSense_1_debounce
 2842 07a9 15       		.uleb128 0x15
 2843 07aa D0060000 		.4byte	0x6d0
 2844 07ae 16       		.uleb128 0x16
 2845 07af CE010000 		.4byte	.LASF77
 2846 07b3 01       		.byte	0x1
 2847 07b4 5D       		.byte	0x5d
 2848 07b5 BF070000 		.4byte	0x7bf
 2849 07b9 05       		.uleb128 0x5
 2850 07ba 03       		.byte	0x3
 2851 07bb 00000000 		.4byte	CapSense_1_rawDataIndex
 2852 07bf 15       		.uleb128 0x15
 2853 07c0 D0060000 		.4byte	0x6d0
 2854 07c4 16       		.uleb128 0x16
 2855 07c5 B1020000 		.4byte	.LASF78
 2856 07c9 01       		.byte	0x1
 2857 07ca 68       		.byte	0x68
 2858 07cb D5070000 		.4byte	0x7d5
 2859 07cf 05       		.uleb128 0x5
 2860 07d0 03       		.byte	0x3
 2861 07d1 00000000 		.4byte	CapSense_1_numberOfSensors
 2862 07d5 15       		.uleb128 0x15
 2863 07d6 D0060000 		.4byte	0x6d0
 2864 07da 16       		.uleb128 0x16
 2865 07db 7D040000 		.4byte	.LASF79
 2866 07df 01       		.byte	0x1
 2867 07e0 27       		.byte	0x27
 2868 07e1 9A060000 		.4byte	0x69a
 2869 07e5 05       		.uleb128 0x5
 2870 07e6 03       		.byte	0x3
 2871 07e7 00000000 		.4byte	CapSense_1_rawFilterData1
 2872 07eb 16       		.uleb128 0x16
 2873 07ec 24040000 		.4byte	.LASF80
 2874 07f0 01       		.byte	0x1
 2875 07f1 45       		.byte	0x45
 2876 07f2 6B000000 		.4byte	0x6b
 2877 07f6 05       		.uleb128 0x5
 2878 07f7 03       		.byte	0x3
 2879 07f8 00000000 		.4byte	CapSense_1_enableRawFilters
 2880 07fc 00       		.byte	0
 2881              		.section	.debug_abbrev,"",%progbits
 2882              	.Ldebug_abbrev0:
 2883 0000 01       		.uleb128 0x1
 2884 0001 11       		.uleb128 0x11
 2885 0002 01       		.byte	0x1
 2886 0003 25       		.uleb128 0x25
 2887 0004 0E       		.uleb128 0xe
 2888 0005 13       		.uleb128 0x13
 2889 0006 0B       		.uleb128 0xb
 2890 0007 03       		.uleb128 0x3
 2891 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 102


 2892 0009 1B       		.uleb128 0x1b
 2893 000a 0E       		.uleb128 0xe
 2894 000b 55       		.uleb128 0x55
 2895 000c 17       		.uleb128 0x17
 2896 000d 11       		.uleb128 0x11
 2897 000e 01       		.uleb128 0x1
 2898 000f 10       		.uleb128 0x10
 2899 0010 17       		.uleb128 0x17
 2900 0011 00       		.byte	0
 2901 0012 00       		.byte	0
 2902 0013 02       		.uleb128 0x2
 2903 0014 24       		.uleb128 0x24
 2904 0015 00       		.byte	0
 2905 0016 0B       		.uleb128 0xb
 2906 0017 0B       		.uleb128 0xb
 2907 0018 3E       		.uleb128 0x3e
 2908 0019 0B       		.uleb128 0xb
 2909 001a 03       		.uleb128 0x3
 2910 001b 0E       		.uleb128 0xe
 2911 001c 00       		.byte	0
 2912 001d 00       		.byte	0
 2913 001e 03       		.uleb128 0x3
 2914 001f 24       		.uleb128 0x24
 2915 0020 00       		.byte	0
 2916 0021 0B       		.uleb128 0xb
 2917 0022 0B       		.uleb128 0xb
 2918 0023 3E       		.uleb128 0x3e
 2919 0024 0B       		.uleb128 0xb
 2920 0025 03       		.uleb128 0x3
 2921 0026 08       		.uleb128 0x8
 2922 0027 00       		.byte	0
 2923 0028 00       		.byte	0
 2924 0029 04       		.uleb128 0x4
 2925 002a 16       		.uleb128 0x16
 2926 002b 00       		.byte	0
 2927 002c 03       		.uleb128 0x3
 2928 002d 0E       		.uleb128 0xe
 2929 002e 3A       		.uleb128 0x3a
 2930 002f 0B       		.uleb128 0xb
 2931 0030 3B       		.uleb128 0x3b
 2932 0031 05       		.uleb128 0x5
 2933 0032 49       		.uleb128 0x49
 2934 0033 13       		.uleb128 0x13
 2935 0034 00       		.byte	0
 2936 0035 00       		.byte	0
 2937 0036 05       		.uleb128 0x5
 2938 0037 2E       		.uleb128 0x2e
 2939 0038 01       		.byte	0x1
 2940 0039 3F       		.uleb128 0x3f
 2941 003a 19       		.uleb128 0x19
 2942 003b 03       		.uleb128 0x3
 2943 003c 0E       		.uleb128 0xe
 2944 003d 3A       		.uleb128 0x3a
 2945 003e 0B       		.uleb128 0xb
 2946 003f 3B       		.uleb128 0x3b
 2947 0040 0B       		.uleb128 0xb
 2948 0041 27       		.uleb128 0x27
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 103


 2949 0042 19       		.uleb128 0x19
 2950 0043 11       		.uleb128 0x11
 2951 0044 01       		.uleb128 0x1
 2952 0045 12       		.uleb128 0x12
 2953 0046 06       		.uleb128 0x6
 2954 0047 40       		.uleb128 0x40
 2955 0048 18       		.uleb128 0x18
 2956 0049 9742     		.uleb128 0x2117
 2957 004b 19       		.uleb128 0x19
 2958 004c 01       		.uleb128 0x1
 2959 004d 13       		.uleb128 0x13
 2960 004e 00       		.byte	0
 2961 004f 00       		.byte	0
 2962 0050 06       		.uleb128 0x6
 2963 0051 05       		.uleb128 0x5
 2964 0052 00       		.byte	0
 2965 0053 03       		.uleb128 0x3
 2966 0054 0E       		.uleb128 0xe
 2967 0055 3A       		.uleb128 0x3a
 2968 0056 0B       		.uleb128 0xb
 2969 0057 3B       		.uleb128 0x3b
 2970 0058 0B       		.uleb128 0xb
 2971 0059 49       		.uleb128 0x49
 2972 005a 13       		.uleb128 0x13
 2973 005b 02       		.uleb128 0x2
 2974 005c 18       		.uleb128 0x18
 2975 005d 00       		.byte	0
 2976 005e 00       		.byte	0
 2977 005f 07       		.uleb128 0x7
 2978 0060 34       		.uleb128 0x34
 2979 0061 00       		.byte	0
 2980 0062 03       		.uleb128 0x3
 2981 0063 0E       		.uleb128 0xe
 2982 0064 3A       		.uleb128 0x3a
 2983 0065 0B       		.uleb128 0xb
 2984 0066 3B       		.uleb128 0x3b
 2985 0067 0B       		.uleb128 0xb
 2986 0068 49       		.uleb128 0x49
 2987 0069 13       		.uleb128 0x13
 2988 006a 02       		.uleb128 0x2
 2989 006b 18       		.uleb128 0x18
 2990 006c 00       		.byte	0
 2991 006d 00       		.byte	0
 2992 006e 08       		.uleb128 0x8
 2993 006f 2E       		.uleb128 0x2e
 2994 0070 01       		.byte	0x1
 2995 0071 3F       		.uleb128 0x3f
 2996 0072 19       		.uleb128 0x19
 2997 0073 03       		.uleb128 0x3
 2998 0074 0E       		.uleb128 0xe
 2999 0075 3A       		.uleb128 0x3a
 3000 0076 0B       		.uleb128 0xb
 3001 0077 3B       		.uleb128 0x3b
 3002 0078 0B       		.uleb128 0xb
 3003 0079 27       		.uleb128 0x27
 3004 007a 19       		.uleb128 0x19
 3005 007b 11       		.uleb128 0x11
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 104


 3006 007c 01       		.uleb128 0x1
 3007 007d 12       		.uleb128 0x12
 3008 007e 06       		.uleb128 0x6
 3009 007f 40       		.uleb128 0x40
 3010 0080 18       		.uleb128 0x18
 3011 0081 9642     		.uleb128 0x2116
 3012 0083 19       		.uleb128 0x19
 3013 0084 01       		.uleb128 0x1
 3014 0085 13       		.uleb128 0x13
 3015 0086 00       		.byte	0
 3016 0087 00       		.byte	0
 3017 0088 09       		.uleb128 0x9
 3018 0089 2E       		.uleb128 0x2e
 3019 008a 01       		.byte	0x1
 3020 008b 3F       		.uleb128 0x3f
 3021 008c 19       		.uleb128 0x19
 3022 008d 03       		.uleb128 0x3
 3023 008e 0E       		.uleb128 0xe
 3024 008f 3A       		.uleb128 0x3a
 3025 0090 0B       		.uleb128 0xb
 3026 0091 3B       		.uleb128 0x3b
 3027 0092 05       		.uleb128 0x5
 3028 0093 27       		.uleb128 0x27
 3029 0094 19       		.uleb128 0x19
 3030 0095 11       		.uleb128 0x11
 3031 0096 01       		.uleb128 0x1
 3032 0097 12       		.uleb128 0x12
 3033 0098 06       		.uleb128 0x6
 3034 0099 40       		.uleb128 0x40
 3035 009a 18       		.uleb128 0x18
 3036 009b 9642     		.uleb128 0x2116
 3037 009d 19       		.uleb128 0x19
 3038 009e 01       		.uleb128 0x1
 3039 009f 13       		.uleb128 0x13
 3040 00a0 00       		.byte	0
 3041 00a1 00       		.byte	0
 3042 00a2 0A       		.uleb128 0xa
 3043 00a3 34       		.uleb128 0x34
 3044 00a4 00       		.byte	0
 3045 00a5 03       		.uleb128 0x3
 3046 00a6 08       		.uleb128 0x8
 3047 00a7 3A       		.uleb128 0x3a
 3048 00a8 0B       		.uleb128 0xb
 3049 00a9 3B       		.uleb128 0x3b
 3050 00aa 05       		.uleb128 0x5
 3051 00ab 49       		.uleb128 0x49
 3052 00ac 13       		.uleb128 0x13
 3053 00ad 02       		.uleb128 0x2
 3054 00ae 18       		.uleb128 0x18
 3055 00af 00       		.byte	0
 3056 00b0 00       		.byte	0
 3057 00b1 0B       		.uleb128 0xb
 3058 00b2 34       		.uleb128 0x34
 3059 00b3 00       		.byte	0
 3060 00b4 03       		.uleb128 0x3
 3061 00b5 0E       		.uleb128 0xe
 3062 00b6 3A       		.uleb128 0x3a
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 105


 3063 00b7 0B       		.uleb128 0xb
 3064 00b8 3B       		.uleb128 0x3b
 3065 00b9 05       		.uleb128 0x5
 3066 00ba 49       		.uleb128 0x49
 3067 00bb 13       		.uleb128 0x13
 3068 00bc 02       		.uleb128 0x2
 3069 00bd 18       		.uleb128 0x18
 3070 00be 00       		.byte	0
 3071 00bf 00       		.byte	0
 3072 00c0 0C       		.uleb128 0xc
 3073 00c1 05       		.uleb128 0x5
 3074 00c2 00       		.byte	0
 3075 00c3 03       		.uleb128 0x3
 3076 00c4 0E       		.uleb128 0xe
 3077 00c5 3A       		.uleb128 0x3a
 3078 00c6 0B       		.uleb128 0xb
 3079 00c7 3B       		.uleb128 0x3b
 3080 00c8 05       		.uleb128 0x5
 3081 00c9 49       		.uleb128 0x49
 3082 00ca 13       		.uleb128 0x13
 3083 00cb 02       		.uleb128 0x2
 3084 00cc 18       		.uleb128 0x18
 3085 00cd 00       		.byte	0
 3086 00ce 00       		.byte	0
 3087 00cf 0D       		.uleb128 0xd
 3088 00d0 2E       		.uleb128 0x2e
 3089 00d1 01       		.byte	0x1
 3090 00d2 3F       		.uleb128 0x3f
 3091 00d3 19       		.uleb128 0x19
 3092 00d4 03       		.uleb128 0x3
 3093 00d5 0E       		.uleb128 0xe
 3094 00d6 3A       		.uleb128 0x3a
 3095 00d7 0B       		.uleb128 0xb
 3096 00d8 3B       		.uleb128 0x3b
 3097 00d9 05       		.uleb128 0x5
 3098 00da 27       		.uleb128 0x27
 3099 00db 19       		.uleb128 0x19
 3100 00dc 49       		.uleb128 0x49
 3101 00dd 13       		.uleb128 0x13
 3102 00de 11       		.uleb128 0x11
 3103 00df 01       		.uleb128 0x1
 3104 00e0 12       		.uleb128 0x12
 3105 00e1 06       		.uleb128 0x6
 3106 00e2 40       		.uleb128 0x40
 3107 00e3 18       		.uleb128 0x18
 3108 00e4 9742     		.uleb128 0x2117
 3109 00e6 19       		.uleb128 0x19
 3110 00e7 01       		.uleb128 0x1
 3111 00e8 13       		.uleb128 0x13
 3112 00e9 00       		.byte	0
 3113 00ea 00       		.byte	0
 3114 00eb 0E       		.uleb128 0xe
 3115 00ec 2E       		.uleb128 0x2e
 3116 00ed 01       		.byte	0x1
 3117 00ee 3F       		.uleb128 0x3f
 3118 00ef 19       		.uleb128 0x19
 3119 00f0 03       		.uleb128 0x3
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 106


 3120 00f1 0E       		.uleb128 0xe
 3121 00f2 3A       		.uleb128 0x3a
 3122 00f3 0B       		.uleb128 0xb
 3123 00f4 3B       		.uleb128 0x3b
 3124 00f5 05       		.uleb128 0x5
 3125 00f6 27       		.uleb128 0x27
 3126 00f7 19       		.uleb128 0x19
 3127 00f8 11       		.uleb128 0x11
 3128 00f9 01       		.uleb128 0x1
 3129 00fa 12       		.uleb128 0x12
 3130 00fb 06       		.uleb128 0x6
 3131 00fc 40       		.uleb128 0x40
 3132 00fd 18       		.uleb128 0x18
 3133 00fe 9742     		.uleb128 0x2117
 3134 0100 19       		.uleb128 0x19
 3135 0101 01       		.uleb128 0x1
 3136 0102 13       		.uleb128 0x13
 3137 0103 00       		.byte	0
 3138 0104 00       		.byte	0
 3139 0105 0F       		.uleb128 0xf
 3140 0106 2E       		.uleb128 0x2e
 3141 0107 01       		.byte	0x1
 3142 0108 3F       		.uleb128 0x3f
 3143 0109 19       		.uleb128 0x19
 3144 010a 03       		.uleb128 0x3
 3145 010b 0E       		.uleb128 0xe
 3146 010c 3A       		.uleb128 0x3a
 3147 010d 0B       		.uleb128 0xb
 3148 010e 3B       		.uleb128 0x3b
 3149 010f 05       		.uleb128 0x5
 3150 0110 27       		.uleb128 0x27
 3151 0111 19       		.uleb128 0x19
 3152 0112 49       		.uleb128 0x49
 3153 0113 13       		.uleb128 0x13
 3154 0114 11       		.uleb128 0x11
 3155 0115 01       		.uleb128 0x1
 3156 0116 12       		.uleb128 0x12
 3157 0117 06       		.uleb128 0x6
 3158 0118 40       		.uleb128 0x40
 3159 0119 18       		.uleb128 0x18
 3160 011a 9642     		.uleb128 0x2116
 3161 011c 19       		.uleb128 0x19
 3162 011d 01       		.uleb128 0x1
 3163 011e 13       		.uleb128 0x13
 3164 011f 00       		.byte	0
 3165 0120 00       		.byte	0
 3166 0121 10       		.uleb128 0x10
 3167 0122 05       		.uleb128 0x5
 3168 0123 00       		.byte	0
 3169 0124 03       		.uleb128 0x3
 3170 0125 08       		.uleb128 0x8
 3171 0126 3A       		.uleb128 0x3a
 3172 0127 0B       		.uleb128 0xb
 3173 0128 3B       		.uleb128 0x3b
 3174 0129 05       		.uleb128 0x5
 3175 012a 49       		.uleb128 0x49
 3176 012b 13       		.uleb128 0x13
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 107


 3177 012c 02       		.uleb128 0x2
 3178 012d 18       		.uleb128 0x18
 3179 012e 00       		.byte	0
 3180 012f 00       		.byte	0
 3181 0130 11       		.uleb128 0x11
 3182 0131 2E       		.uleb128 0x2e
 3183 0132 00       		.byte	0
 3184 0133 3F       		.uleb128 0x3f
 3185 0134 19       		.uleb128 0x19
 3186 0135 03       		.uleb128 0x3
 3187 0136 0E       		.uleb128 0xe
 3188 0137 3A       		.uleb128 0x3a
 3189 0138 0B       		.uleb128 0xb
 3190 0139 3B       		.uleb128 0x3b
 3191 013a 05       		.uleb128 0x5
 3192 013b 27       		.uleb128 0x27
 3193 013c 19       		.uleb128 0x19
 3194 013d 11       		.uleb128 0x11
 3195 013e 01       		.uleb128 0x1
 3196 013f 12       		.uleb128 0x12
 3197 0140 06       		.uleb128 0x6
 3198 0141 40       		.uleb128 0x40
 3199 0142 18       		.uleb128 0x18
 3200 0143 9742     		.uleb128 0x2117
 3201 0145 19       		.uleb128 0x19
 3202 0146 00       		.byte	0
 3203 0147 00       		.byte	0
 3204 0148 12       		.uleb128 0x12
 3205 0149 01       		.uleb128 0x1
 3206 014a 01       		.byte	0x1
 3207 014b 49       		.uleb128 0x49
 3208 014c 13       		.uleb128 0x13
 3209 014d 01       		.uleb128 0x1
 3210 014e 13       		.uleb128 0x13
 3211 014f 00       		.byte	0
 3212 0150 00       		.byte	0
 3213 0151 13       		.uleb128 0x13
 3214 0152 21       		.uleb128 0x21
 3215 0153 00       		.byte	0
 3216 0154 49       		.uleb128 0x49
 3217 0155 13       		.uleb128 0x13
 3218 0156 2F       		.uleb128 0x2f
 3219 0157 0B       		.uleb128 0xb
 3220 0158 00       		.byte	0
 3221 0159 00       		.byte	0
 3222 015a 14       		.uleb128 0x14
 3223 015b 34       		.uleb128 0x34
 3224 015c 00       		.byte	0
 3225 015d 03       		.uleb128 0x3
 3226 015e 0E       		.uleb128 0xe
 3227 015f 3A       		.uleb128 0x3a
 3228 0160 0B       		.uleb128 0xb
 3229 0161 3B       		.uleb128 0x3b
 3230 0162 0B       		.uleb128 0xb
 3231 0163 49       		.uleb128 0x49
 3232 0164 13       		.uleb128 0x13
 3233 0165 3F       		.uleb128 0x3f
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 108


 3234 0166 19       		.uleb128 0x19
 3235 0167 3C       		.uleb128 0x3c
 3236 0168 19       		.uleb128 0x19
 3237 0169 00       		.byte	0
 3238 016a 00       		.byte	0
 3239 016b 15       		.uleb128 0x15
 3240 016c 26       		.uleb128 0x26
 3241 016d 00       		.byte	0
 3242 016e 49       		.uleb128 0x49
 3243 016f 13       		.uleb128 0x13
 3244 0170 00       		.byte	0
 3245 0171 00       		.byte	0
 3246 0172 16       		.uleb128 0x16
 3247 0173 34       		.uleb128 0x34
 3248 0174 00       		.byte	0
 3249 0175 03       		.uleb128 0x3
 3250 0176 0E       		.uleb128 0xe
 3251 0177 3A       		.uleb128 0x3a
 3252 0178 0B       		.uleb128 0xb
 3253 0179 3B       		.uleb128 0x3b
 3254 017a 0B       		.uleb128 0xb
 3255 017b 49       		.uleb128 0x49
 3256 017c 13       		.uleb128 0x13
 3257 017d 3F       		.uleb128 0x3f
 3258 017e 19       		.uleb128 0x19
 3259 017f 02       		.uleb128 0x2
 3260 0180 18       		.uleb128 0x18
 3261 0181 00       		.byte	0
 3262 0182 00       		.byte	0
 3263 0183 00       		.byte	0
 3264              		.section	.debug_aranges,"",%progbits
 3265 0000 EC000000 		.4byte	0xec
 3266 0004 0200     		.2byte	0x2
 3267 0006 00000000 		.4byte	.Ldebug_info0
 3268 000a 04       		.byte	0x4
 3269 000b 00       		.byte	0
 3270 000c 0000     		.2byte	0
 3271 000e 0000     		.2byte	0
 3272 0010 00000000 		.4byte	.LFB35
 3273 0014 84000000 		.4byte	.LFE35-.LFB35
 3274 0018 00000000 		.4byte	.LFB36
 3275 001c 28000000 		.4byte	.LFE36-.LFB36
 3276 0020 00000000 		.4byte	.LFB37
 3277 0024 26000000 		.4byte	.LFE37-.LFB37
 3278 0028 00000000 		.4byte	.LFB38
 3279 002c 50000000 		.4byte	.LFE38-.LFB38
 3280 0030 00000000 		.4byte	.LFB39
 3281 0034 04020000 		.4byte	.LFE39-.LFB39
 3282 0038 00000000 		.4byte	.LFB40
 3283 003c 16000000 		.4byte	.LFE40-.LFB40
 3284 0040 00000000 		.4byte	.LFB41
 3285 0044 40000000 		.4byte	.LFE41-.LFB41
 3286 0048 00000000 		.4byte	.LFB42
 3287 004c 70000000 		.4byte	.LFE42-.LFB42
 3288 0050 00000000 		.4byte	.LFB43
 3289 0054 1C000000 		.4byte	.LFE43-.LFB43
 3290 0058 00000000 		.4byte	.LFB44
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 109


 3291 005c 24000000 		.4byte	.LFE44-.LFB44
 3292 0060 00000000 		.4byte	.LFB45
 3293 0064 1C000000 		.4byte	.LFE45-.LFB45
 3294 0068 00000000 		.4byte	.LFB46
 3295 006c 24000000 		.4byte	.LFE46-.LFB46
 3296 0070 00000000 		.4byte	.LFB47
 3297 0074 1C000000 		.4byte	.LFE47-.LFB47
 3298 0078 00000000 		.4byte	.LFB48
 3299 007c 1C000000 		.4byte	.LFE48-.LFB48
 3300 0080 00000000 		.4byte	.LFB49
 3301 0084 1C000000 		.4byte	.LFE49-.LFB49
 3302 0088 00000000 		.4byte	.LFB50
 3303 008c 12000000 		.4byte	.LFE50-.LFB50
 3304 0090 00000000 		.4byte	.LFB51
 3305 0094 34010000 		.4byte	.LFE51-.LFB51
 3306 0098 00000000 		.4byte	.LFB52
 3307 009c 58000000 		.4byte	.LFE52-.LFB52
 3308 00a0 00000000 		.4byte	.LFB53
 3309 00a4 36000000 		.4byte	.LFE53-.LFB53
 3310 00a8 00000000 		.4byte	.LFB54
 3311 00ac 70000000 		.4byte	.LFE54-.LFB54
 3312 00b0 00000000 		.4byte	.LFB55
 3313 00b4 70000000 		.4byte	.LFE55-.LFB55
 3314 00b8 00000000 		.4byte	.LFB56
 3315 00bc 3C000000 		.4byte	.LFE56-.LFB56
 3316 00c0 00000000 		.4byte	.LFB57
 3317 00c4 1C000000 		.4byte	.LFE57-.LFB57
 3318 00c8 00000000 		.4byte	.LFB58
 3319 00cc 1C000000 		.4byte	.LFE58-.LFB58
 3320 00d0 00000000 		.4byte	.LFB59
 3321 00d4 1C000000 		.4byte	.LFE59-.LFB59
 3322 00d8 00000000 		.4byte	.LFB60
 3323 00dc 14000000 		.4byte	.LFE60-.LFB60
 3324 00e0 00000000 		.4byte	.LFB61
 3325 00e4 14000000 		.4byte	.LFE61-.LFB61
 3326 00e8 00000000 		.4byte	0
 3327 00ec 00000000 		.4byte	0
 3328              		.section	.debug_ranges,"",%progbits
 3329              	.Ldebug_ranges0:
 3330 0000 00000000 		.4byte	.LFB35
 3331 0004 84000000 		.4byte	.LFE35
 3332 0008 00000000 		.4byte	.LFB36
 3333 000c 28000000 		.4byte	.LFE36
 3334 0010 00000000 		.4byte	.LFB37
 3335 0014 26000000 		.4byte	.LFE37
 3336 0018 00000000 		.4byte	.LFB38
 3337 001c 50000000 		.4byte	.LFE38
 3338 0020 00000000 		.4byte	.LFB39
 3339 0024 04020000 		.4byte	.LFE39
 3340 0028 00000000 		.4byte	.LFB40
 3341 002c 16000000 		.4byte	.LFE40
 3342 0030 00000000 		.4byte	.LFB41
 3343 0034 40000000 		.4byte	.LFE41
 3344 0038 00000000 		.4byte	.LFB42
 3345 003c 70000000 		.4byte	.LFE42
 3346 0040 00000000 		.4byte	.LFB43
 3347 0044 1C000000 		.4byte	.LFE43
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 110


 3348 0048 00000000 		.4byte	.LFB44
 3349 004c 24000000 		.4byte	.LFE44
 3350 0050 00000000 		.4byte	.LFB45
 3351 0054 1C000000 		.4byte	.LFE45
 3352 0058 00000000 		.4byte	.LFB46
 3353 005c 24000000 		.4byte	.LFE46
 3354 0060 00000000 		.4byte	.LFB47
 3355 0064 1C000000 		.4byte	.LFE47
 3356 0068 00000000 		.4byte	.LFB48
 3357 006c 1C000000 		.4byte	.LFE48
 3358 0070 00000000 		.4byte	.LFB49
 3359 0074 1C000000 		.4byte	.LFE49
 3360 0078 00000000 		.4byte	.LFB50
 3361 007c 12000000 		.4byte	.LFE50
 3362 0080 00000000 		.4byte	.LFB51
 3363 0084 34010000 		.4byte	.LFE51
 3364 0088 00000000 		.4byte	.LFB52
 3365 008c 58000000 		.4byte	.LFE52
 3366 0090 00000000 		.4byte	.LFB53
 3367 0094 36000000 		.4byte	.LFE53
 3368 0098 00000000 		.4byte	.LFB54
 3369 009c 70000000 		.4byte	.LFE54
 3370 00a0 00000000 		.4byte	.LFB55
 3371 00a4 70000000 		.4byte	.LFE55
 3372 00a8 00000000 		.4byte	.LFB56
 3373 00ac 3C000000 		.4byte	.LFE56
 3374 00b0 00000000 		.4byte	.LFB57
 3375 00b4 1C000000 		.4byte	.LFE57
 3376 00b8 00000000 		.4byte	.LFB58
 3377 00bc 1C000000 		.4byte	.LFE58
 3378 00c0 00000000 		.4byte	.LFB59
 3379 00c4 1C000000 		.4byte	.LFE59
 3380 00c8 00000000 		.4byte	.LFB60
 3381 00cc 14000000 		.4byte	.LFE60
 3382 00d0 00000000 		.4byte	.LFB61
 3383 00d4 14000000 		.4byte	.LFE61
 3384 00d8 00000000 		.4byte	0
 3385 00dc 00000000 		.4byte	0
 3386              		.section	.debug_line,"",%progbits
 3387              	.Ldebug_line0:
 3388 0000 45030000 		.section	.debug_str,"MS",%progbits,1
 3388      02004C00 
 3388      00000201 
 3388      FB0E0D00 
 3388      01010101 
 3389              	.LASF10:
 3390 0000 75696E74 		.ascii	"uint16\000"
 3390      313600
 3391              	.LASF27:
 3392 0007 66696C74 		.ascii	"filteredRawData\000"
 3392      65726564 
 3392      52617744 
 3392      61746100 
 3393              	.LASF48:
 3394 0017 66696E67 		.ascii	"fingerThreshold\000"
 3394      65725468 
 3394      72657368 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 111


 3394      6F6C6400 
 3395              	.LASF19:
 3396 0027 43617053 		.ascii	"CapSense_1_InitializeAllBaselines\000"
 3396      656E7365 
 3396      5F315F49 
 3396      6E697469 
 3396      616C697A 
 3397              	.LASF16:
 3398 0049 43617053 		.ascii	"CapSense_1_BaseInit\000"
 3398      656E7365 
 3398      5F315F42 
 3398      61736549 
 3398      6E697400 
 3399              	.LASF7:
 3400 005d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3400      206C6F6E 
 3400      6720756E 
 3400      7369676E 
 3400      65642069 
 3401              	.LASF55:
 3402 0074 43617053 		.ascii	"CapSense_1_EnableWidget\000"
 3402      656E7365 
 3402      5F315F45 
 3402      6E61626C 
 3402      65576964 
 3403              	.LASF50:
 3404 008c 43617053 		.ascii	"CapSense_1_CheckIsWidgetActive\000"
 3404      656E7365 
 3404      5F315F43 
 3404      6865636B 
 3404      49735769 
 3405              	.LASF74:
 3406 00ab 43617053 		.ascii	"CapSense_1_noiseThreshold\000"
 3406      656E7365 
 3406      5F315F6E 
 3406      6F697365 
 3406      54687265 
 3407              	.LASF76:
 3408 00c5 43617053 		.ascii	"CapSense_1_debounce\000"
 3408      656E7365 
 3408      5F315F64 
 3408      65626F75 
 3408      6E636500 
 3409              	.LASF64:
 3410 00d9 43617053 		.ascii	"CapSense_1_sensorRaw\000"
 3410      656E7365 
 3410      5F315F73 
 3410      656E736F 
 3410      72526177 
 3411              	.LASF62:
 3412 00ee 43617053 		.ascii	"CapSense_1_DisableRawDataFilters\000"
 3412      656E7365 
 3412      5F315F44 
 3412      69736162 
 3412      6C655261 
 3413              	.LASF6:
 3414 010f 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 112


 3414      206C6F6E 
 3414      6720696E 
 3414      7400
 3415              	.LASF0:
 3416 011d 7369676E 		.ascii	"signed char\000"
 3416      65642063 
 3416      68617200 
 3417              	.LASF51:
 3418 0129 72617749 		.ascii	"rawIndex\000"
 3418      6E646578 
 3418      00
 3419              	.LASF53:
 3420 0132 73746174 		.ascii	"state\000"
 3420      6500
 3421              	.LASF4:
 3422 0138 6C6F6E67 		.ascii	"long int\000"
 3422      20696E74 
 3422      00
 3423              	.LASF56:
 3424 0141 43617053 		.ascii	"CapSense_1_DisableWidget\000"
 3424      656E7365 
 3424      5F315F44 
 3424      69736162 
 3424      6C655769 
 3425              	.LASF9:
 3426 015a 75696E74 		.ascii	"uint8\000"
 3426      3800
 3427              	.LASF13:
 3428 0160 646F7562 		.ascii	"double\000"
 3428      6C6500
 3429              	.LASF11:
 3430 0167 75696E74 		.ascii	"uint32\000"
 3430      333200
 3431              	.LASF49:
 3432 016e 68797374 		.ascii	"hysteresis\000"
 3432      65726573 
 3432      697300
 3433              	.LASF43:
 3434 0179 43617053 		.ascii	"CapSense_1_GetFingerHysteresis\000"
 3434      656E7365 
 3434      5F315F47 
 3434      65744669 
 3434      6E676572 
 3435              	.LASF31:
 3436 0198 43617053 		.ascii	"CapSense_1_UpdateWidgetBaseline\000"
 3436      656E7365 
 3436      5F315F55 
 3436      70646174 
 3436      65576964 
 3437              	.LASF75:
 3438 01b8 43617053 		.ascii	"CapSense_1_hysteresis\000"
 3438      656E7365 
 3438      5F315F68 
 3438      79737465 
 3438      72657369 
 3439              	.LASF77:
 3440 01ce 43617053 		.ascii	"CapSense_1_rawDataIndex\000"
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 113


 3440      656E7365 
 3440      5F315F72 
 3440      61774461 
 3440      7461496E 
 3441              	.LASF73:
 3442 01e6 43617053 		.ascii	"CapSense_1_fingerThreshold\000"
 3442      656E7365 
 3442      5F315F66 
 3442      696E6765 
 3442      72546872 
 3443              	.LASF61:
 3444 0201 43617053 		.ascii	"CapSense_1_EnableRawDataFilters\000"
 3444      656E7365 
 3444      5F315F45 
 3444      6E61626C 
 3444      65526177 
 3445              	.LASF40:
 3446 0221 76616C75 		.ascii	"value\000"
 3446      6500
 3447              	.LASF34:
 3448 0227 6C617374 		.ascii	"lastSensor\000"
 3448      53656E73 
 3448      6F7200
 3449              	.LASF8:
 3450 0232 756E7369 		.ascii	"unsigned int\000"
 3450      676E6564 
 3450      20696E74 
 3450      00
 3451              	.LASF5:
 3452 023f 6C6F6E67 		.ascii	"long unsigned int\000"
 3452      20756E73 
 3452      69676E65 
 3452      6420696E 
 3452      7400
 3453              	.LASF39:
 3454 0251 43617053 		.ascii	"CapSense_1_SetDiffCountData\000"
 3454      656E7365 
 3454      5F315F53 
 3454      65744469 
 3454      6666436F 
 3455              	.LASF36:
 3456 026d 64617461 		.ascii	"data\000"
 3456      00
 3457              	.LASF3:
 3458 0272 73686F72 		.ascii	"short unsigned int\000"
 3458      7420756E 
 3458      7369676E 
 3458      65642069 
 3458      6E7400
 3459              	.LASF18:
 3460 0285 73656E73 		.ascii	"sensor\000"
 3460      6F7200
 3461              	.LASF44:
 3462 028c 43617053 		.ascii	"CapSense_1_GetNegativeNoiseThreshold\000"
 3462      656E7365 
 3462      5F315F47 
 3462      65744E65 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 114


 3462      67617469 
 3463              	.LASF78:
 3464 02b1 43617053 		.ascii	"CapSense_1_numberOfSensors\000"
 3464      656E7365 
 3464      5F315F6E 
 3464      756D6265 
 3464      724F6653 
 3465              	.LASF24:
 3466 02cc 63616C63 		.ascii	"calc\000"
 3466      00
 3467              	.LASF35:
 3468 02d1 43617053 		.ascii	"CapSense_1_SetBaselineData\000"
 3468      656E7365 
 3468      5F315F53 
 3468      65744261 
 3468      73656C69 
 3469              	.LASF65:
 3470 02ec 43617053 		.ascii	"CapSense_1_sensorEnableMask\000"
 3470      656E7365 
 3470      5F315F73 
 3470      656E736F 
 3470      72456E61 
 3471              	.LASF46:
 3472 0308 6465626F 		.ascii	"debounce\000"
 3472      756E6365 
 3472      00
 3473              	.LASF15:
 3474 0311 73697A65 		.ascii	"sizetype\000"
 3474      74797065 
 3474      00
 3475              	.LASF71:
 3476 031a 43617053 		.ascii	"CapSense_1_lowBaselineResetCnt\000"
 3476      656E7365 
 3476      5F315F6C 
 3476      6F774261 
 3476      73656C69 
 3477              	.LASF60:
 3478 0339 43617053 		.ascii	"CapSense_1_GetDebounce\000"
 3478      656E7365 
 3478      5F315F47 
 3478      65744465 
 3478      626F756E 
 3479              	.LASF38:
 3480 0350 43617053 		.ascii	"CapSense_1_GetDiffCountData\000"
 3480      656E7365 
 3480      5F315F47 
 3480      65744469 
 3480      6666436F 
 3481              	.LASF66:
 3482 036c 43617053 		.ascii	"CapSense_1_widgetNumber\000"
 3482      656E7365 
 3482      5F315F77 
 3482      69646765 
 3482      744E756D 
 3483              	.LASF17:
 3484 0384 43617053 		.ascii	"CapSense_1_InitializeSensorBaseline\000"
 3484      656E7365 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 115


 3484      5F315F49 
 3484      6E697469 
 3484      616C697A 
 3485              	.LASF63:
 3486 03a8 43617053 		.ascii	"CapSense_1_debounceCounter\000"
 3486      656E7365 
 3486      5F315F64 
 3486      65626F75 
 3486      6E636543 
 3487              	.LASF30:
 3488 03c3 43617053 		.ascii	"CapSense_1_UpdateEnabledBaselines\000"
 3488      656E7365 
 3488      5F315F55 
 3488      70646174 
 3488      65456E61 
 3489              	.LASF72:
 3490 03e5 43617053 		.ascii	"CapSense_1_lowBaselineReset\000"
 3490      656E7365 
 3490      5F315F6C 
 3490      6F774261 
 3490      73656C69 
 3491              	.LASF12:
 3492 0401 666C6F61 		.ascii	"float\000"
 3492      7400
 3493              	.LASF42:
 3494 0407 43617053 		.ascii	"CapSense_1_GetNoiseThreshold\000"
 3494      656E7365 
 3494      5F315F47 
 3494      65744E6F 
 3494      69736554 
 3495              	.LASF80:
 3496 0424 43617053 		.ascii	"CapSense_1_enableRawFilters\000"
 3496      656E7365 
 3496      5F315F65 
 3496      6E61626C 
 3496      65526177 
 3497              	.LASF23:
 3498 0440 43617053 		.ascii	"CapSense_1_UpdateBaselineNoThreshold\000"
 3498      656E7365 
 3498      5F315F55 
 3498      70646174 
 3498      65426173 
 3499              	.LASF70:
 3500 0465 43617053 		.ascii	"CapSense_1_sensorOnMask\000"
 3500      656E7365 
 3500      5F315F73 
 3500      656E736F 
 3500      724F6E4D 
 3501              	.LASF79:
 3502 047d 43617053 		.ascii	"CapSense_1_rawFilterData1\000"
 3502      656E7365 
 3502      5F315F72 
 3502      61774669 
 3502      6C746572 
 3503              	.LASF45:
 3504 0497 43617053 		.ascii	"CapSense_1_CheckIsSensorActive\000"
 3504      656E7365 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 116


 3504      5F315F43 
 3504      6865636B 
 3504      49735365 
 3505              	.LASF54:
 3506 04b6 43617053 		.ascii	"CapSense_1_CheckIsAnyWidgetActive\000"
 3506      656E7365 
 3506      5F315F43 
 3506      6865636B 
 3506      4973416E 
 3507              	.LASF1:
 3508 04d8 756E7369 		.ascii	"unsigned char\000"
 3508      676E6564 
 3508      20636861 
 3508      7200
 3509              	.LASF21:
 3510 04e6 43617053 		.ascii	"CapSense_1_InitializeEnabledBaselines\000"
 3510      656E7365 
 3510      5F315F49 
 3510      6E697469 
 3510      616C697A 
 3511              	.LASF28:
 3512 050c 6E6F6973 		.ascii	"noiseThreshold\000"
 3512      65546872 
 3512      6573686F 
 3512      6C6400
 3513              	.LASF2:
 3514 051b 73686F72 		.ascii	"short int\000"
 3514      7420696E 
 3514      7400
 3515              	.LASF20:
 3516 0525 77696467 		.ascii	"widget\000"
 3516      657400
 3517              	.LASF29:
 3518 052c 43617053 		.ascii	"CapSense_1_UpdateSensorBaseline\000"
 3518      656E7365 
 3518      5F315F55 
 3518      70646174 
 3518      6553656E 
 3519              	.LASF69:
 3520 054c 43617053 		.ascii	"CapSense_1_sensorSignal\000"
 3520      656E7365 
 3520      5F315F73 
 3520      656E736F 
 3520      72536967 
 3521              	.LASF58:
 3522 0564 43617053 		.ascii	"CapSense_1_GetWidgetNumber\000"
 3522      656E7365 
 3522      5F315F47 
 3522      65745769 
 3522      64676574 
 3523              	.LASF59:
 3524 057f 43617053 		.ascii	"CapSense_1_GetLowBaselineReset\000"
 3524      656E7365 
 3524      5F315F47 
 3524      65744C6F 
 3524      77426173 
 3525              	.LASF22:
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 117


 3526 059e 69735365 		.ascii	"isSensorEnabled\000"
 3526      6E736F72 
 3526      456E6162 
 3526      6C656400 
 3527              	.LASF83:
 3528 05ae 433A5C55 		.ascii	"C:\\Users\\glenn\\OneDrive\\PSOC\\moisture_sensor_4"
 3528      73657273 
 3528      5C676C65 
 3528      6E6E5C4F 
 3528      6E654472 
 3529 05dc 6D5C4D6F 		.ascii	"m\\Moisture_Sensor\\Moisture_Sensor.cydsn\000"
 3529      69737475 
 3529      72655F53 
 3529      656E736F 
 3529      725C4D6F 
 3530              	.LASF32:
 3531 0604 73656E73 		.ascii	"sensorsPerWidget\000"
 3531      6F727350 
 3531      65725769 
 3531      64676574 
 3531      00
 3532              	.LASF67:
 3533 0615 43617053 		.ascii	"CapSense_1_sensorBaseline\000"
 3533      656E7365 
 3533      5F315F73 
 3533      656E736F 
 3533      72426173 
 3534              	.LASF14:
 3535 062f 63686172 		.ascii	"char\000"
 3535      00
 3536              	.LASF33:
 3537 0634 66697273 		.ascii	"firstSensor\000"
 3537      7453656E 
 3537      736F7200 
 3538              	.LASF68:
 3539 0640 43617053 		.ascii	"CapSense_1_sensorBaselineLow\000"
 3539      656E7365 
 3539      5F315F73 
 3539      656E736F 
 3539      72426173 
 3540              	.LASF47:
 3541 065d 6465626F 		.ascii	"debounceIndex\000"
 3541      756E6365 
 3541      496E6465 
 3541      7800
 3542              	.LASF82:
 3543 066b 47656E65 		.ascii	"Generated_Source\\PSoC4\\CapSense_1_CSHL.c\000"
 3543      72617465 
 3543      645F536F 
 3543      75726365 
 3543      5C50536F 
 3544              	.LASF25:
 3545 0694 7369676E 		.ascii	"sign\000"
 3545      00
 3546              	.LASF52:
 3547 0699 6E756D4F 		.ascii	"numOfSensors\000"
 3547      6653656E 
ARM GAS  C:\Users\glenn\AppData\Local\Temp\ccmrfTvU.s 			page 118


 3547      736F7273 
 3547      00
 3548              	.LASF37:
 3549 06a6 43617053 		.ascii	"CapSense_1_GetBaselineData\000"
 3549      656E7365 
 3549      5F315F47 
 3549      65744261 
 3549      73656C69 
 3550              	.LASF81:
 3551 06c1 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3551      4320342E 
 3551      392E3320 
 3551      32303135 
 3551      30333033 
 3552 06f4 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 3552      20726576 
 3552      6973696F 
 3552      6E203232 
 3552      31323230 
 3553 0727 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3553      66756E63 
 3553      74696F6E 
 3553      2D736563 
 3553      74696F6E 
 3554              	.LASF41:
 3555 074f 43617053 		.ascii	"CapSense_1_GetFingerThreshold\000"
 3555      656E7365 
 3555      5F315F47 
 3555      65744669 
 3555      6E676572 
 3556              	.LASF57:
 3557 076d 43617053 		.ascii	"CapSense_1_IIR4Filter\000"
 3557      656E7365 
 3557      5F315F49 
 3557      49523446 
 3557      696C7465 
 3558              	.LASF26:
 3559 0783 74656D70 		.ascii	"tempRaw\000"
 3559      52617700 
 3560              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
